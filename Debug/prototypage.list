
prototypage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080076b8  080076b8  000176b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa4  08007aa4  00020254  2**0
                  CONTENTS
  4 .ARM          00000000  08007aa4  08007aa4  00020254  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aa4  08007aa4  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08007aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000258  08007d00  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08007d00  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db82  00000000  00000000  000202c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6f  00000000  00000000  0002de49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d8  00000000  00000000  00030750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166ef  00000000  00000000  00031128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f701  00000000  00000000  00047817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000897d0  00000000  00000000  00056f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004604  00000000  00000000  000e06e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e4cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a0 	.word	0x080076a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	080076a0 	.word	0x080076a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fca5 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f845 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f95f 	bl	8000e78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bba:	f000 f887 	bl	8000ccc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bbe:	f000 f92b 	bl	8000e18 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000bc2:	f000 f8f3 	bl	8000dac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <main+0x78>)
 8000bc8:	f002 fac0 	bl	800314c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // should be generated but I guess not
 8000bcc:	4815      	ldr	r0, [pc, #84]	; (8000c24 <main+0x7c>)
 8000bce:	f002 fabd 	bl	800314c <HAL_TIM_Base_Start_IT>
  // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

  HAL_UART_Transmit(&huart2, (unsigned char*) "\r\nInitialised successfully \r\n--- \r\n", 64, 500);
 8000bd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	4913      	ldr	r1, [pc, #76]	; (8000c28 <main+0x80>)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <main+0x84>)
 8000bdc:	f003 fb06 	bl	80041ec <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000be0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be4:	f000 fcf0 	bl	80015c8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  measure();
 8000be8:	f000 fa70 	bl	80010cc <measure>
	  HAL_Delay(100);
 8000bec:	2064      	movs	r0, #100	; 0x64
 8000bee:	f000 fceb 	bl	80015c8 <HAL_Delay>

	  sprintf(uart_message, "Freq : %f Hz  - C : %f pF \r\n", sensor_input_frequency_hz, sensor_capacity_pF);
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <main+0x88>)
 8000bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <main+0x8c>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	e9cd 2300 	strd	r2, r3, [sp]
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	490c      	ldr	r1, [pc, #48]	; (8000c38 <main+0x90>)
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <main+0x94>)
 8000c0a:	f004 fbed 	bl	80053e8 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*) uart_message, 64, 500);
 8000c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	4909      	ldr	r1, [pc, #36]	; (8000c3c <main+0x94>)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <main+0x84>)
 8000c18:	f003 fae8 	bl	80041ec <HAL_UART_Transmit>
	  measure();
 8000c1c:	e7e4      	b.n	8000be8 <main+0x40>
 8000c1e:	bf00      	nop
 8000c20:	200002c0 	.word	0x200002c0
 8000c24:	20000274 	.word	0x20000274
 8000c28:	080076b8 	.word	0x080076b8
 8000c2c:	2000030c 	.word	0x2000030c
 8000c30:	20000398 	.word	0x20000398
 8000c34:	200003a0 	.word	0x200003a0
 8000c38:	080076dc 	.word	0x080076dc
 8000c3c:	20000000 	.word	0x20000000

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	; 0x40
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fc2d 	bl	80054ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 ff61 	bl	8001b48 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c8c:	f000 f9ea 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2302      	movs	r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 ff8b 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000cb4:	f000 f9d6 	bl	8001064 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f002 f8fc 	bl	8002ebc <HAL_RCC_MCOConfig>
}
 8000cc4:	bf00      	nop
 8000cc6:	3740      	adds	r7, #64	; 0x40
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d20:	4821      	ldr	r0, [pc, #132]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d22:	f002 f9bb 	bl	800309c <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d2c:	f000 f99a 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481a      	ldr	r0, [pc, #104]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d3e:	f002 fe62 	bl	8003a06 <HAL_TIM_ConfigClockSource>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d48:	f000 f98c 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d4e:	f002 fa51 	bl	80031f4 <HAL_TIM_IC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d58:	f000 f984 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d6c:	f003 f96c 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d76:	f000 f975 	bl	8001064 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM2_Init+0xdc>)
 8000d92:	f002 fd9c 	bl	80038ce <HAL_TIM_IC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d9c:	f000 f962 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3730      	adds	r7, #48	; 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000274 	.word	0x20000274

08000dac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <MX_TIM6_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dc4:	2217      	movs	r2, #23
 8000dc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dde:	f002 f95d 	bl	800309c <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000de8:	f000 f93c 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM6_Init+0x64>)
 8000dfa:	f003 f925 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 f92e 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200002c0 	.word	0x200002c0
 8000e14:	40001000 	.word	0x40001000

08000e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_USART2_UART_Init+0x5c>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f003 f978 	bl	8004150 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 f8fd 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000030c 	.word	0x2000030c
 8000e74:	40004400 	.word	0x40004400

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_GPIO_Init+0xb0>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2108      	movs	r1, #8
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <MX_GPIO_Init+0xb4>)
 8000edc:	f000 fe1c 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fc98 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f04:	2308      	movs	r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_GPIO_Init+0xb4>)
 8000f1c:	f000 fc8a 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) // TIM6 : counts to 1000 with increments every 1us, for a total 1ms
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d153      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0xba>
	{
		if(tim6_activate && !tim6_active)
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d012      	beq.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	482d      	ldr	r0, [pc, #180]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f60:	f002 f9aa 	bl	80032b8 <HAL_TIM_IC_Start_IT>
			tim6_active = 1;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
			// Calculations
			sensor_input_frequency_hz = rising_edge_count * 1000;
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
		}
	}
}
 8000f70:	e03b      	b.n	8000fea <HAL_TIM_PeriodElapsedCallback+0xba>
		else if(tim6_active)
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d036      	beq.n	8000fea <HAL_TIM_PeriodElapsedCallback+0xba>
			tim6_active = 0;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f8c:	f002 fac2 	bl	8003514 <HAL_TIM_IC_Stop_IT>
			sensor_input_frequency_hz = rising_edge_count * 1000;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fab1 	bl	8000504 <__aeabi_ui2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	491d      	ldr	r1, [pc, #116]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	491a      	ldr	r1, [pc, #104]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000fb8:	f7ff fc48 	bl	800084c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	a30c      	add	r3, pc, #48	; (adr r3, 8000ff8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb15 	bl	80005f8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	a30a      	add	r3, pc, #40	; (adr r3, 8001000 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff f954 	bl	8000288 <__aeabi_dsub>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000fe6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	4129ad4c 	.word	0x4129ad4c
 8001000:	22d0e560 	.word	0x22d0e560
 8001004:	402c39db 	.word	0x402c39db
 8001008:	40001000 	.word	0x40001000
 800100c:	200003a9 	.word	0x200003a9
 8001010:	200003a8 	.word	0x200003a8
 8001014:	20000274 	.word	0x20000274
 8001018:	200003ac 	.word	0x200003ac
 800101c:	20000398 	.word	0x20000398
 8001020:	3ff00000 	.word	0x3ff00000
 8001024:	200003a0 	.word	0x200003a0

08001028 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) // PWM measurement on PA0, only use of TIM2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001038:	d109      	bne.n	800104e <HAL_TIM_IC_CaptureCallback+0x26>
		sensor_input_frequency_hz = 1 / (sensor_input_period_ns * 1000000000);
		sensor_capacity_pF = PERIOD_CAPA_COEFF * sensor_input_period_ns + PERIOD_CAPA_BASE; // values of coefficients in settings.h

		__HAL_TIM_SET_COUNTER(htim, 0);
		*/
		if(tim6_active)
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_TIM_IC_CaptureCallback+0x34>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_TIM_IC_CaptureCallback+0x26>
		{
			rising_edge_count++;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HAL_TIM_IC_CaptureCallback+0x38>)
 800104c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200003a8 	.word	0x200003a8
 8001060:	200003ac 	.word	0x200003ac

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <startMeasure>:

#include "sensor.h"

// Starts a measure on next tim6 overflow
void startMeasure()
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	tim6_activate = 1;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <startMeasure+0x1c>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
	rising_edge_count = 0;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <startMeasure+0x20>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200003a9 	.word	0x200003a9
 8001090:	200003ac 	.word	0x200003ac

08001094 <isMeasuring>:

// Check if the system is currently measuring
_Bool isMeasuring()
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return (tim6_activate || tim6_active);
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <isMeasuring+0x30>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <isMeasuring+0x18>
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <isMeasuring+0x34>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <isMeasuring+0x1c>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <isMeasuring+0x1e>
 80010b0:	2300      	movs	r3, #0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200003a9 	.word	0x200003a9
 80010c8:	200003a8 	.word	0x200003a8

080010cc <measure>:

void measure()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	startMeasure();
 80010d0:	f7ff ffce 	bl	8001070 <startMeasure>
	while(isMeasuring()) {};
 80010d4:	bf00      	nop
 80010d6:	f7ff ffdd 	bl	8001094 <isMeasuring>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1fa      	bne.n	80010d6 <measure+0xa>
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x44>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_MspInit+0x44>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x44>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001150:	d131      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f000 fb48 	bl	8001834 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	201c      	movs	r0, #28
 80011aa:	f000 fb0c 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ae:	201c      	movs	r0, #28
 80011b0:	f000 fb25 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011b4:	e018      	b.n	80011e8 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM6)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_TIM_Base_MspInit+0xc4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d113      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	61d3      	str	r3, [r2, #28]
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_TIM_Base_MspInit+0xc0>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2036      	movs	r0, #54	; 0x36
 80011de:	f000 faf2 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e2:	2036      	movs	r0, #54	; 0x36
 80011e4:	f000 fb0b 	bl	80017fe <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40001000 	.word	0x40001000

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_UART_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d128      	bne.n	800126c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_UART_MspInit+0x80>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <HAL_UART_MspInit+0x80>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_UART_MspInit+0x80>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_UART_MspInit+0x80>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_UART_MspInit+0x80>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_UART_MspInit+0x80>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800124a:	230c      	movs	r3, #12
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125a:	2307      	movs	r3, #7
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f000 fae4 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40004400 	.word	0x40004400
 8001278:	40021000 	.word	0x40021000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f95e 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM2_IRQHandler+0x10>)
 80012d6:	f002 f9db 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000274 	.word	0x20000274

080012e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM6_DAC_IRQHandler+0x10>)
 80012ea:	f002 f9d1 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002c0 	.word	0x200002c0

080012f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_kill>:

int _kill(int pid, int sig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001312:	f004 f91f 	bl	8005554 <__errno>
 8001316:	4603      	mov	r3, r0
 8001318:	2216      	movs	r2, #22
 800131a:	601a      	str	r2, [r3, #0]
  return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_exit>:

void _exit (int status)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffe7 	bl	8001308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800133a:	e7fe      	b.n	800133a <_exit+0x12>

0800133c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
  }

  return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
  }
  return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d6:	605a      	str	r2, [r3, #4]
  return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_isatty>:

int _isatty(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f004 f884 	bl	8005554 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20004000 	.word	0x20004000
 8001478:	00000400 	.word	0x00000400
 800147c:	200003b0 	.word	0x200003b0
 8001480:	20000508 	.word	0x20000508

08001484 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f004 f843 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7ff fb65 	bl	8000ba8 <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80014ec:	08007aac 	.word	0x08007aac
  ldr r2, =_sbss
 80014f0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80014f4:	20000504 	.word	0x20000504

080014f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_IRQHandler>
	...

080014fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x28>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x28>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f94f 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fde6 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f967 	bl	800181a <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f92f 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000080 	.word	0x20000080
 8001580:	20000088 	.word	0x20000088
 8001584:	20000084 	.word	0x20000084

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000088 	.word	0x20000088
 80015ac:	200003b4 	.word	0x200003b4

080015b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200003b4 	.word	0x200003b4

080015c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000088 	.word	0x20000088

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff29 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff3e 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff8e 	bl	8001704 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff31 	bl	8001674 <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	e14e      	b.n	8001ae2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8140 	beq.w	8001adc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d005      	beq.n	8001874 <HAL_GPIO_Init+0x40>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d130      	bne.n	80018d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018aa:	2201      	movs	r2, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 0201 	and.w	r2, r3, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d017      	beq.n	8001912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d123      	bne.n	8001966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 809a 	beq.w	8001adc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a8:	4b55      	ldr	r3, [pc, #340]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ea:	d013      	beq.n	8001a14 <HAL_GPIO_Init+0x1e0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_GPIO_Init+0x2d4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1dc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <HAL_GPIO_Init+0x2d8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1d8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <HAL_GPIO_Init+0x2dc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1d4>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a08:	2305      	movs	r3, #5
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a58:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a82:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f aea9 	bne.w	8001844 <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f001 b823 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 817d 	beq.w	8001e7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b84:	4bbc      	ldr	r3, [pc, #752]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4bb9      	ldr	r3, [pc, #740]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d15c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x10e>
 8001b9c:	4bb6      	ldr	r3, [pc, #728]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d155      	bne.n	8001c56 <HAL_RCC_OscConfig+0x10e>
 8001baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x94>
 8001bd6:	4ba8      	ldr	r3, [pc, #672]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	e015      	b.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bf8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c04:	4b9c      	ldr	r3, [pc, #624]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c14:	fa92 f2a2 	rbit	r2, r2
 8001c18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 811f 	beq.w	8001e7c <HAL_RCC_OscConfig+0x334>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8116 	bne.w	8001e7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f000 bfaf 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12e>
 8001c68:	4b83      	ldr	r3, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a82      	ldr	r2, [pc, #520]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e036      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x158>
 8001c86:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7b      	ldr	r2, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b79      	ldr	r3, [pc, #484]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a78      	ldr	r2, [pc, #480]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e021      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x184>
 8001cb2:	4b71      	ldr	r3, [pc, #452]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a70      	ldr	r2, [pc, #448]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6e      	ldr	r3, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6d      	ldr	r2, [pc, #436]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a69      	ldr	r2, [pc, #420]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a66      	ldr	r2, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f023 020f 	bic.w	r2, r3, #15
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	495f      	ldr	r1, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d059      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc4f 	bl	80015b0 <HAL_GetTick>
 8001d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc4a 	bl	80015b0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 bf43 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x218>
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e015      	b.n	8001d8c <HAL_RCC_OscConfig+0x244>
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d90:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d98:	fa92 f2a2 	rbit	r2, r2
 8001d9c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001da0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ab      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1d0>
 8001dc0:	e05d      	b.n	8001e7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fbf5 	bl	80015b0 <HAL_GetTick>
 8001dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fbf0 	bl	80015b0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d902      	bls.n	8001de2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f000 bee9 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8001de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001df6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2cc>
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0x2f8>
 8001e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e4c:	fa92 f2a2 	rbit	r2, r2
 8001e50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ab      	bne.n	8001dcc <HAL_RCC_OscConfig+0x284>
 8001e74:	e003      	b.n	8001e7e <HAL_RCC_OscConfig+0x336>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 817d 	beq.w	800218e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e94:	4ba6      	ldr	r3, [pc, #664]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea0:	4ba3      	ldr	r3, [pc, #652]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d172      	bne.n	8001f92 <HAL_RCC_OscConfig+0x44a>
 8001eac:	4ba0      	ldr	r3, [pc, #640]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d16c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x44a>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001eca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3a0>
 8001ee2:	4b93      	ldr	r3, [pc, #588]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e013      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f0c:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2202      	movs	r2, #2
 8001f12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f1a:	fa92 f2a2 	rbit	r2, r2
 8001f1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f26:	fab2 f282 	clz	r2, r2
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f042 0220 	orr.w	r2, r2, #32
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f002 021f 	and.w	r2, r2, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCC_OscConfig+0x410>
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f000 be2e 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	21f8      	movs	r1, #248	; 0xf8
 8001f6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f76:	fa91 f1a1 	rbit	r1, r1
 8001f7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f82:	fab1 f181 	clz	r1, r1
 8001f86:	b2c9      	uxtb	r1, r1
 8001f88:	408b      	lsls	r3, r1
 8001f8a:	4969      	ldr	r1, [pc, #420]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f90:	e0fd      	b.n	800218e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8088 	beq.w	80020b4 <HAL_RCC_OscConfig+0x56c>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff faee 	bl	80015b0 <HAL_GetTick>
 8001fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff fae9 	bl	80015b0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d902      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	f000 bde2 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002002:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x4d8>
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x500>
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002038:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800204e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800205a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f002 021f 	and.w	r2, r2, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0af      	beq.n	8001fda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	21f8      	movs	r1, #248	; 0xf8
 8002090:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002098:	fa91 f1a1 	rbit	r1, r1
 800209c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80020a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80020a4:	fab1 f181 	clz	r1, r1
 80020a8:	b2c9      	uxtb	r1, r1
 80020aa:	408b      	lsls	r3, r1
 80020ac:	4920      	ldr	r1, [pc, #128]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
 80020b2:	e06c      	b.n	800218e <HAL_RCC_OscConfig+0x646>
 80020b4:	2301      	movs	r3, #1
 80020b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fa66 	bl	80015b0 <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff fa61 	bl	80015b0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f000 bd5a 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d104      	bne.n	8002134 <HAL_RCC_OscConfig+0x5ec>
 800212a:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_RCC_OscConfig+0x5e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	e015      	b.n	800215c <HAL_RCC_OscConfig+0x614>
 8002130:	40021000 	.word	0x40021000
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800214c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002158:	4bc8      	ldr	r3, [pc, #800]	; (800247c <HAL_RCC_OscConfig+0x934>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2202      	movs	r2, #2
 800215e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002162:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800216e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ad      	bne.n	80020ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8110 	beq.w	80023c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d079      	beq.n	80022a8 <HAL_RCC_OscConfig+0x760>
 80021b4:	2301      	movs	r3, #1
 80021b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	4bab      	ldr	r3, [pc, #684]	; (8002480 <HAL_RCC_OscConfig+0x938>)
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f9e7 	bl	80015b0 <HAL_GetTick>
 80021e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f9e2 	bl	80015b0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d902      	bls.n	80021fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	f000 bcdb 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002256:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x934>)
 800225a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002264:	2102      	movs	r1, #2
 8002266:	6019      	str	r1, [r3, #0]
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f1a3 	rbit	r1, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800227e:	6019      	str	r1, [r3, #0]
  return result;
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0a0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x6a0>
 80022a6:	e08d      	b.n	80023c4 <HAL_RCC_OscConfig+0x87c>
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022ca:	601a      	str	r2, [r3, #0]
  return result;
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x938>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2300      	movs	r3, #0
 80022e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f961 	bl	80015b0 <HAL_GetTick>
 80022ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f95c 	bl	80015b0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d902      	bls.n	800230a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	f000 bc55 	b.w	8002bb4 <HAL_RCC_OscConfig+0x106c>
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002336:	2202      	movs	r2, #2
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fa93 f2a3 	rbit	r2, r3
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800235a:	2202      	movs	r2, #2
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002374:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x934>)
 8002378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002382:	2102      	movs	r1, #2
 8002384:	6019      	str	r1, [r3, #0]
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fa93 f1a3 	rbit	r1, r3
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800239c:	6019      	str	r1, [r3, #0]
  return result;
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d197      	bne.n	80022f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 81a1 	beq.w	800271c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x934>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_RCC_OscConfig+0x934>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_RCC_OscConfig+0x934>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	61d3      	str	r3, [r2, #28]
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_OscConfig+0x934>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002412:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_OscConfig+0x93c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11a      	bne.n	800245c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x93c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_RCC_OscConfig+0x93c>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff f8bd 	bl	80015b0 <HAL_GetTick>
 8002436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	e009      	b.n	8002450 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7ff f8b8 	bl	80015b0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e3b1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x93c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ef      	beq.n	800243c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10d      	bne.n	8002488 <HAL_RCC_OscConfig+0x940>
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_OscConfig+0x934>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a02      	ldr	r2, [pc, #8]	; (800247c <HAL_RCC_OscConfig+0x934>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	e03c      	b.n	80024f4 <HAL_RCC_OscConfig+0x9ac>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	10908120 	.word	0x10908120
 8002484:	40007000 	.word	0x40007000
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x96a>
 8002498:	4bc1      	ldr	r3, [pc, #772]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4ac0      	ldr	r2, [pc, #768]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	4bbe      	ldr	r3, [pc, #760]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4abd      	ldr	r2, [pc, #756]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024aa:	f023 0304 	bic.w	r3, r3, #4
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x9ac>
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x994>
 80024c2:	4bb7      	ldr	r3, [pc, #732]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4ab6      	ldr	r2, [pc, #728]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	4bb4      	ldr	r3, [pc, #720]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4ab3      	ldr	r2, [pc, #716]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x9ac>
 80024dc:	4bb0      	ldr	r3, [pc, #704]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4aaf      	ldr	r2, [pc, #700]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	4bad      	ldr	r3, [pc, #692]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4aac      	ldr	r2, [pc, #688]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80024ee:	f023 0304 	bic.w	r3, r3, #4
 80024f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8081 	beq.w	8002608 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff f853 	bl	80015b0 <HAL_GetTick>
 800250a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7ff f84e 	bl	80015b0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e345      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002578:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0xa4c>
 800258e:	4b84      	ldr	r3, [pc, #528]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0xa74>
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800259c:	2202      	movs	r2, #2
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025c4:	2102      	movs	r1, #2
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fa92 f1a2 	rbit	r1, r2
 80025d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025de:	6011      	str	r1, [r2, #0]
  return result;
 80025e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d084      	beq.n	8002510 <HAL_RCC_OscConfig+0x9c8>
 8002606:	e07f      	b.n	8002708 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe ffd2 	bl	80015b0 <HAL_GetTick>
 800260c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00b      	b.n	800262a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe ffcd 	bl	80015b0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2c4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002656:	2202      	movs	r2, #2
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002670:	601a      	str	r2, [r3, #0]
  return result;
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800267a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0xb4e>
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	e013      	b.n	80026be <HAL_RCC_OscConfig+0xb76>
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026c6:	2102      	movs	r1, #2
 80026c8:	6011      	str	r1, [r2, #0]
 80026ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	fa92 f1a2 	rbit	r1, r2
 80026d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026e0:	6011      	str	r1, [r2, #0]
  return result;
 80026e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f002 021f 	and.w	r2, r2, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d184      	bne.n	8002612 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002708:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8242 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_RCC_OscConfig+0xc58>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b08      	cmp	r3, #8
 8002738:	f000 8213 	beq.w	8002b62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 8162 	bne.w	8002a12 <HAL_RCC_OscConfig+0xeca>
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002772:	601a      	str	r2, [r3, #0]
  return result;
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800277c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe ff0c 	bl	80015b0 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	e00c      	b.n	80027b8 <HAL_RCC_OscConfig+0xc70>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe ff04 	bl	80015b0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1fd      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027dc:	601a      	str	r2, [r3, #0]
  return result;
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_OscConfig+0xcba>
 80027fc:	4bb0      	ldr	r3, [pc, #704]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	e027      	b.n	8002852 <HAL_RCC_OscConfig+0xd0a>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800280a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4b9c      	ldr	r3, [pc, #624]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800285a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800285e:	6011      	str	r1, [r2, #0]
 8002860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002864:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	fa92 f1a2 	rbit	r1, r2
 800286e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002872:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002876:	6011      	str	r1, [r2, #0]
  return result;
 8002878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d182      	bne.n	80027a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289e:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	430b      	orrs	r3, r1
 80028c0:	497f      	ldr	r1, [pc, #508]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028ea:	601a      	str	r2, [r3, #0]
  return result;
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	461a      	mov	r2, r3
 8002908:	2301      	movs	r3, #1
 800290a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fe50 	bl	80015b0 <HAL_GetTick>
 8002910:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	e009      	b.n	800292a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fe4b 	bl	80015b0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e144      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800294e:	601a      	str	r2, [r3, #0]
  return result;
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002958:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_OscConfig+0xe2c>
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e027      	b.n	80029c4 <HAL_RCC_OscConfig+0xe7c>
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800297c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029d0:	6011      	str	r1, [r2, #0]
 80029d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fa92 f1a2 	rbit	r1, r2
 80029e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029e8:	6011      	str	r1, [r2, #0]
  return result;
 80029ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f042 0220 	orr.w	r2, r2, #32
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d082      	beq.n	8002916 <HAL_RCC_OscConfig+0xdce>
 8002a10:	e0cf      	b.n	8002bb2 <HAL_RCC_OscConfig+0x106a>
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a36:	601a      	str	r2, [r3, #0]
  return result;
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	461a      	mov	r2, r3
 8002a54:	2300      	movs	r3, #0
 8002a56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fdaa 	bl	80015b0 <HAL_GetTick>
 8002a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	e009      	b.n	8002a76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fda5 	bl	80015b0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e09e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a9a:	601a      	str	r2, [r3, #0]
  return result;
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002aa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d104      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xf7c>
 8002aba:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_RCC_OscConfig+0xf78>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e029      	b.n	8002b14 <HAL_RCC_OscConfig+0xfcc>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x1078>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b18:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b20:	6011      	str	r1, [r2, #0]
 8002b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b26:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b38:	6011      	str	r1, [r2, #0]
  return result;
 8002b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b3e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d180      	bne.n	8002a62 <HAL_RCC_OscConfig+0xf1a>
 8002b60:	e027      	b.n	8002bb2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e01e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x1078>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b09e      	sub	sp, #120	; 0x78
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e162      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b90      	ldr	r3, [pc, #576]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b8d      	ldr	r3, [pc, #564]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	498b      	ldr	r1, [pc, #556]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e14a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	497f      	ldr	r1, [pc, #508]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80dc 	beq.w	8002df0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d13c      	bne.n	8002cba <HAL_RCC_ClockConfig+0xf6>
 8002c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xa6>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e00f      	b.n	8002c8a <HAL_RCC_ClockConfig+0xc6>
 8002c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
 8002c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f002 021f 	and.w	r2, r2, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d17b      	bne.n	8002dae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0f3      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d13c      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x178>
 8002cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_ClockConfig+0x128>
 8002ce6:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e00f      	b.n	8002d0c <HAL_RCC_ClockConfig+0x148>
 8002cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d10:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d14:	fa92 f2a2 	rbit	r2, r2
 8002d18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d13a      	bne.n	8002dae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b2      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e00d      	b.n	8002d80 <HAL_RCC_ClockConfig+0x1bc>
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	2302      	movs	r3, #2
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2202      	movs	r2, #2
 8002d82:	61ba      	str	r2, [r7, #24]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	617a      	str	r2, [r7, #20]
  return result;
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	fab2 f282 	clz	r2, r2
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f042 0220 	orr.w	r2, r2, #32
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f002 021f 	and.w	r2, r2, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e079      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	491a      	ldr	r1, [pc, #104]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fbf6 	bl	80015b0 <HAL_GetTick>
 8002dc4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fe fbf2 	bl	80015b0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e061      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d214      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4906      	ldr	r1, [pc, #24]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_ClockConfig+0x25c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e040      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x2de>
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_ClockConfig+0x2e8>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	491a      	ldr	r1, [pc, #104]	; (8002eac <HAL_RCC_ClockConfig+0x2e8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x2e8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4912      	ldr	r1, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x2e8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e66:	f000 f85d 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCC_ClockConfig+0x2e8>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	22f0      	movs	r2, #240	; 0xf0
 8002e76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	fa92 f2a2 	rbit	r2, r2
 8002e7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	fab2 f282 	clz	r2, r2
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	40d3      	lsrs	r3, r2
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x2ec>)
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
 8002e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_RCC_ClockConfig+0x2f0>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_RCC_ClockConfig+0x2f4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fb44 	bl	8001528 <HAL_InitTick>
  
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3778      	adds	r7, #120	; 0x78
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	080076fc 	.word	0x080076fc
 8002eb4:	20000080 	.word	0x20000080
 8002eb8:	20000084 	.word	0x20000084

08002ebc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed8:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002eda:	2300      	movs	r3, #0
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_MCOConfig+0x64>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_RCC_MCOConfig+0x64>)
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	6153      	str	r3, [r2, #20]
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_RCC_MCOConfig+0x64>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f00:	f7fe fc98 	bl	8001834 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_MCOConfig+0x64>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_MCOConfig+0x64>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b08b      	sub	sp, #44	; 0x2c
 8002f28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x30>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x36>
 8002f52:	e03c      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f56:	623b      	str	r3, [r7, #32]
      break;
 8002f58:	e03c      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	607a      	str	r2, [r7, #4]
  return result;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	40d3      	lsrs	r3, r2
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	220f      	movs	r2, #15
 8002f88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	60fa      	str	r2, [r7, #12]
  return result;
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	40d3      	lsrs	r3, r2
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fac:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	623b      	str	r3, [r7, #32]
      break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fd0:	623b      	str	r3, [r7, #32]
      break;
 8002fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	372c      	adds	r7, #44	; 0x2c
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	016e3600 	.word	0x016e3600
 8002fec:	08007714 	.word	0x08007714
 8002ff0:	08007724 	.word	0x08007724
 8002ff4:	003d0900 	.word	0x003d0900
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000080 	.word	0x20000080

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800301a:	f7ff ffef 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301e:	4601      	mov	r1, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003028:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800302c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	fa92 f2a2 	rbit	r2, r2
 8003034:	603a      	str	r2, [r7, #0]
  return result;
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	40d3      	lsrs	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	0800770c 	.word	0x0800770c

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800305e:	f7ff ffcd 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003062:	4601      	mov	r1, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800306c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003070:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	fa92 f2a2 	rbit	r2, r2
 8003078:	603a      	str	r2, [r7, #0]
  return result;
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	fab2 f282 	clz	r2, r2
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	40d3      	lsrs	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	0800770c 	.word	0x0800770c

0800309c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e049      	b.n	8003142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f834 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 fd7a 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e03b      	b.n	80031dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_TIM_Base_Start_IT+0x4e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d004      	beq.n	800319a <HAL_TIM_Base_Start_IT+0x4e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_TIM_Base_Start_IT+0xa0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d115      	bne.n	80031c6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d015      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x8c>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b2:	d011      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	e008      	b.n	80031d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e000      	b.n	80031da <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014000 	.word	0x40014000
 80031f0:	00010007 	.word	0x00010007

080031f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e049      	b.n	800329a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f841 	bl	80032a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fcce 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x1e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e023      	b.n	800331e <HAL_TIM_IC_Start_IT+0x66>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_IC_Start_IT+0x2e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e01b      	b.n	800331e <HAL_TIM_IC_Start_IT+0x66>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_IC_Start_IT+0x3e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e013      	b.n	800331e <HAL_TIM_IC_Start_IT+0x66>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0x4e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e00b      	b.n	800331e <HAL_TIM_IC_Start_IT+0x66>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0x5e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e003      	b.n	800331e <HAL_TIM_IC_Start_IT+0x66>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_TIM_IC_Start_IT+0x78>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e013      	b.n	8003358 <HAL_TIM_IC_Start_IT+0xa0>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d104      	bne.n	8003340 <HAL_TIM_IC_Start_IT+0x88>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e00b      	b.n	8003358 <HAL_TIM_IC_Start_IT+0xa0>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d104      	bne.n	8003350 <HAL_TIM_IC_Start_IT+0x98>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e003      	b.n	8003358 <HAL_TIM_IC_Start_IT+0xa0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003356:	b2db      	uxtb	r3, r3
 8003358:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800335a:	7bbb      	ldrb	r3, [r7, #14]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003360:	7b7b      	ldrb	r3, [r7, #13]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0c9      	b.n	80034fe <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_TIM_IC_Start_IT+0xc2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003378:	e023      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x10a>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d104      	bne.n	800338a <HAL_TIM_IC_Start_IT+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	e01b      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x10a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d104      	bne.n	800339a <HAL_TIM_IC_Start_IT+0xe2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	e013      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x10a>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d104      	bne.n	80033aa <HAL_TIM_IC_Start_IT+0xf2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033a8:	e00b      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x10a>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_IC_Start_IT+0x102>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b8:	e003      	b.n	80033c2 <HAL_TIM_IC_Start_IT+0x10a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_IC_Start_IT+0x11a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	e013      	b.n	80033fa <HAL_TIM_IC_Start_IT+0x142>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_IT+0x12a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e0:	e00b      	b.n	80033fa <HAL_TIM_IC_Start_IT+0x142>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_IC_Start_IT+0x13a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033f0:	e003      	b.n	80033fa <HAL_TIM_IC_Start_IT+0x142>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	d841      	bhi.n	8003484 <HAL_TIM_IC_Start_IT+0x1cc>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_TIM_IC_Start_IT+0x150>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800343d 	.word	0x0800343d
 800340c:	08003485 	.word	0x08003485
 8003410:	08003485 	.word	0x08003485
 8003414:	08003485 	.word	0x08003485
 8003418:	0800344f 	.word	0x0800344f
 800341c:	08003485 	.word	0x08003485
 8003420:	08003485 	.word	0x08003485
 8003424:	08003485 	.word	0x08003485
 8003428:	08003461 	.word	0x08003461
 800342c:	08003485 	.word	0x08003485
 8003430:	08003485 	.word	0x08003485
 8003434:	08003485 	.word	0x08003485
 8003438:	08003473 	.word	0x08003473
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0202 	orr.w	r2, r2, #2
 800344a:	60da      	str	r2, [r3, #12]
      break;
 800344c:	e01d      	b.n	800348a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0204 	orr.w	r2, r2, #4
 800345c:	60da      	str	r2, [r3, #12]
      break;
 800345e:	e014      	b.n	800348a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	60da      	str	r2, [r3, #12]
      break;
 8003470:	e00b      	b.n	800348a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0210 	orr.w	r2, r2, #16
 8003480:	60da      	str	r2, [r3, #12]
      break;
 8003482:	e002      	b.n	800348a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	bf00      	nop
  }

  if (status == HAL_OK)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d135      	bne.n	80034fc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fdaf 	bl	8003ffc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_TIM_IC_Start_IT+0x250>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_TIM_IC_Start_IT+0x204>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_IC_Start_IT+0x204>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_TIM_IC_Start_IT+0x254>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d115      	bne.n	80034e8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_TIM_IC_Start_IT+0x258>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d015      	beq.n	80034fa <HAL_TIM_IC_Start_IT+0x242>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d011      	beq.n	80034fa <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	e008      	b.n	80034fa <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e000      	b.n	80034fc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40014000 	.word	0x40014000
 8003510:	00010007 	.word	0x00010007

08003514 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d841      	bhi.n	80035ac <HAL_TIM_IC_Stop_IT+0x98>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_TIM_IC_Stop_IT+0x1c>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003565 	.word	0x08003565
 8003534:	080035ad 	.word	0x080035ad
 8003538:	080035ad 	.word	0x080035ad
 800353c:	080035ad 	.word	0x080035ad
 8003540:	08003577 	.word	0x08003577
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	08003589 	.word	0x08003589
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035ad 	.word	0x080035ad
 8003560:	0800359b 	.word	0x0800359b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0202 	bic.w	r2, r2, #2
 8003572:	60da      	str	r2, [r3, #12]
      break;
 8003574:	e01d      	b.n	80035b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0204 	bic.w	r2, r2, #4
 8003584:	60da      	str	r2, [r3, #12]
      break;
 8003586:	e014      	b.n	80035b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0208 	bic.w	r2, r2, #8
 8003596:	60da      	str	r2, [r3, #12]
      break;
 8003598:	e00b      	b.n	80035b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0210 	bic.w	r2, r2, #16
 80035a8:	60da      	str	r2, [r3, #12]
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d166      	bne.n	8003686 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd1b 	bl	8003ffc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_TIM_IC_Stop_IT+0xe2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	f240 4344 	movw	r3, #1092	; 0x444
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IC_Stop_IT+0xe2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_IC_Stop_IT+0xf2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	e023      	b.n	800364e <HAL_TIM_IC_Stop_IT+0x13a>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_IC_Stop_IT+0x102>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	e01b      	b.n	800364e <HAL_TIM_IC_Stop_IT+0x13a>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_IC_Stop_IT+0x112>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003624:	e013      	b.n	800364e <HAL_TIM_IC_Stop_IT+0x13a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d104      	bne.n	8003636 <HAL_TIM_IC_Stop_IT+0x122>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003634:	e00b      	b.n	800364e <HAL_TIM_IC_Stop_IT+0x13a>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b10      	cmp	r3, #16
 800363a:	d104      	bne.n	8003646 <HAL_TIM_IC_Stop_IT+0x132>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	e003      	b.n	800364e <HAL_TIM_IC_Stop_IT+0x13a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Stop_IT+0x14a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	e013      	b.n	8003686 <HAL_TIM_IC_Stop_IT+0x172>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Stop_IT+0x15a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366c:	e00b      	b.n	8003686 <HAL_TIM_IC_Stop_IT+0x172>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Stop_IT+0x16a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800367c:	e003      	b.n	8003686 <HAL_TIM_IC_Stop_IT+0x172>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0202 	mvn.w	r2, #2
 80036bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fca8 	bl	8001028 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa5c 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa63 	bl	8003bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0204 	mvn.w	r2, #4
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fc7e 	bl	8001028 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa32 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa39 	bl	8003bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b08      	cmp	r3, #8
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0208 	mvn.w	r2, #8
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fc54 	bl	8001028 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa08 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa0f 	bl	8003bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0210 	mvn.w	r2, #16
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2208      	movs	r2, #8
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fc2a 	bl	8001028 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9de 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f9e5 	bl	8003bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0201 	mvn.w	r2, #1
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fb8e 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fc74 	bl	8004128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fc67 	bl	800413c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f993 	bl	8003bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d10e      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0220 	mvn.w	r2, #32
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fc27 	bl	8004114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e088      	b.n	80039fe <HAL_TIM_IC_ConfigChannel+0x130>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11b      	bne.n	8003932 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800390a:	f000 f9d1 	bl	8003cb0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 020c 	bic.w	r2, r2, #12
 800391c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6999      	ldr	r1, [r3, #24]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	619a      	str	r2, [r3, #24]
 8003930:	e060      	b.n	80039f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11c      	bne.n	8003972 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003948:	f000 fa37 	bl	8003dba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800395a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6999      	ldr	r1, [r3, #24]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	619a      	str	r2, [r3, #24]
 8003970:	e040      	b.n	80039f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d11b      	bne.n	80039b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003988:	f000 fa84 	bl	8003e94 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020c 	bic.w	r2, r2, #12
 800399a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69d9      	ldr	r1, [r3, #28]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	61da      	str	r2, [r3, #28]
 80039ae:	e021      	b.n	80039f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d11c      	bne.n	80039f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039c6:	f000 faa1 	bl	8003f0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
 80039ee:	e001      	b.n	80039f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_ConfigClockSource+0x1c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0b6      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x18a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d03e      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xd8>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	f200 8087 	bhi.w	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	f000 8086 	beq.w	8003b7c <HAL_TIM_ConfigClockSource+0x176>
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d87f      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a76:	2b70      	cmp	r3, #112	; 0x70
 8003a78:	d01a      	beq.n	8003ab0 <HAL_TIM_ConfigClockSource+0xaa>
 8003a7a:	2b70      	cmp	r3, #112	; 0x70
 8003a7c:	d87b      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a7e:	2b60      	cmp	r3, #96	; 0x60
 8003a80:	d050      	beq.n	8003b24 <HAL_TIM_ConfigClockSource+0x11e>
 8003a82:	2b60      	cmp	r3, #96	; 0x60
 8003a84:	d877      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a86:	2b50      	cmp	r3, #80	; 0x50
 8003a88:	d03c      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xfe>
 8003a8a:	2b50      	cmp	r3, #80	; 0x50
 8003a8c:	d873      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d058      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0x13e>
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d86f      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d064      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0x15e>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d86b      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d060      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0x15e>
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d867      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d05c      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0x15e>
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d05a      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0x15e>
 8003aae:	e062      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac0:	f000 fa7c 	bl	8003fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
      break;
 8003adc:	e04f      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aee:	f000 fa65 	bl	8003fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b00:	609a      	str	r2, [r3, #8]
      break;
 8003b02:	e03c      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b10:	461a      	mov	r2, r3
 8003b12:	f000 f923 	bl	8003d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2150      	movs	r1, #80	; 0x50
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa32 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003b22:	e02c      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b30:	461a      	mov	r2, r3
 8003b32:	f000 f97f 	bl	8003e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2160      	movs	r1, #96	; 0x60
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa22 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003b42:	e01c      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b50:	461a      	mov	r2, r3
 8003b52:	f000 f903 	bl	8003d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa12 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003b62:	e00c      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 fa09 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e003      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <TIM_Base_SetConfig+0xcc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x20>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <TIM_Base_SetConfig+0xcc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x5a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x5a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <TIM_Base_SetConfig+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x5a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_Base_SetConfig+0xd4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x5a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_Base_SetConfig+0xd8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <TIM_Base_SetConfig+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <TIM_Base_SetConfig+0xb0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <TIM_Base_SetConfig+0xd0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_Base_SetConfig+0xb0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <TIM_Base_SetConfig+0xd4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_Base_SetConfig+0xb0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <TIM_Base_SetConfig+0xd8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d103      	bne.n	8003c8c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800

08003cb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0201 	bic.w	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <TIM_TI1_SetConfig+0xa4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_TI1_SetConfig+0x3e>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d003      	beq.n	8003cee <TIM_TI1_SetConfig+0x3e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <TIM_TI1_SetConfig+0xa8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <TIM_TI1_SetConfig+0x42>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <TIM_TI1_SetConfig+0x44>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e003      	b.n	8003d12 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f023 030a 	bic.w	r3, r3, #10
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f003 030a 	and.w	r3, r3, #10
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40014000 	.word	0x40014000

08003d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 030a 	bic.w	r3, r3, #10
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b087      	sub	sp, #28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f023 0210 	bic.w	r2, r3, #16
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	031b      	lsls	r3, r3, #12
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 0210 	bic.w	r2, r3, #16
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	031b      	lsls	r3, r3, #12
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 0303 	bic.w	r3, r3, #3
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	031b      	lsls	r3, r3, #12
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	031b      	lsls	r3, r3, #12
 8003f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f043 0307 	orr.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e04f      	b.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004090:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d004      	beq.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10c      	bne.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40014000 	.word	0x40014000

08004114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e040      	b.n	80041e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd f840 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8b6 	bl	8004300 <UART_SetConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9e0 	bl	800456c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa67 	bl	80046b0 <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004200:	2b20      	cmp	r3, #32
 8004202:	d178      	bne.n	80042f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_UART_Transmit+0x24>
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e071      	b.n	80042f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2221      	movs	r2, #33	; 0x21
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004222:	f7fd f9c5 	bl	80015b0 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d108      	bne.n	8004254 <HAL_UART_Transmit+0x68>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e003      	b.n	800425c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800425c:	e030      	b.n	80042c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fac9 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e03c      	b.n	80042f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	b292      	uxth	r2, r2
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3302      	adds	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e008      	b.n	80042ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b292      	uxth	r2, r2
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1c8      	bne.n	800425e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fa92 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e005      	b.n	80042f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8a      	ldr	r3, [pc, #552]	; (8004554 <UART_SetConfig+0x254>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	430b      	orrs	r3, r1
 8004336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a78      	ldr	r2, [pc, #480]	; (8004558 <UART_SetConfig+0x258>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d120      	bne.n	80043be <UART_SetConfig+0xbe>
 800437c:	4b77      	ldr	r3, [pc, #476]	; (800455c <UART_SetConfig+0x25c>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b03      	cmp	r3, #3
 8004386:	d817      	bhi.n	80043b8 <UART_SetConfig+0xb8>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x90>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043ad 	.word	0x080043ad
 8004398:	080043b3 	.word	0x080043b3
 800439c:	080043a7 	.word	0x080043a7
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e01d      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e01a      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e017      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e014      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e011      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a67      	ldr	r2, [pc, #412]	; (8004560 <UART_SetConfig+0x260>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d102      	bne.n	80043ce <UART_SetConfig+0xce>
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e009      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a64      	ldr	r2, [pc, #400]	; (8004564 <UART_SetConfig+0x264>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d102      	bne.n	80043de <UART_SetConfig+0xde>
 80043d8:	2300      	movs	r3, #0
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e001      	b.n	80043e2 <UART_SetConfig+0xe2>
 80043de:	2310      	movs	r3, #16
 80043e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d15a      	bne.n	80044a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d827      	bhi.n	8004442 <UART_SetConfig+0x142>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0xf8>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fe fdfa 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fe18 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <UART_SetConfig+0x268>)
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fd77 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8004436:	61b8      	str	r0, [r7, #24]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77bb      	strb	r3, [r7, #30]
        break;
 800444a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d074      	beq.n	800453c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	005a      	lsls	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0f      	cmp	r3, #15
 800446c:	d916      	bls.n	800449c <UART_SetConfig+0x19c>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d212      	bcs.n	800449c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f023 030f 	bic.w	r3, r3, #15
 800447e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	b29a      	uxth	r2, r3
 800448c:	89fb      	ldrh	r3, [r7, #14]
 800448e:	4313      	orrs	r3, r2
 8004490:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	89fa      	ldrh	r2, [r7, #14]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	e04f      	b.n	800453c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	77bb      	strb	r3, [r7, #30]
 80044a0:	e04c      	b.n	800453c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d828      	bhi.n	80044fa <UART_SetConfig+0x1fa>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x1b0>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044fb 	.word	0x080044fb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fd9e 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80044d8:	61b8      	str	r0, [r7, #24]
        break;
 80044da:	e013      	b.n	8004504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe fdbc 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 80044e0:	61b8      	str	r0, [r7, #24]
        break;
 80044e2:	e00f      	b.n	8004504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <UART_SetConfig+0x268>)
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e00c      	b.n	8004504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe fd1b 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 80044ee:	61b8      	str	r0, [r7, #24]
        break;
 80044f0:	e008      	b.n	8004504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	61bb      	str	r3, [r7, #24]
        break;
 80044f8:	e004      	b.n	8004504 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	77bb      	strb	r3, [r7, #30]
        break;
 8004502:	bf00      	nop
    }

    if (pclk != 0U)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d018      	beq.n	800453c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085a      	lsrs	r2, r3, #1
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	441a      	add	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d909      	bls.n	8004538 <UART_SetConfig+0x238>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d205      	bcs.n	8004538 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e001      	b.n	800453c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004548:	7fbb      	ldrb	r3, [r7, #30]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	efff69f3 	.word	0xefff69f3
 8004558:	40013800 	.word	0x40013800
 800455c:	40021000 	.word	0x40021000
 8004560:	40004400 	.word	0x40004400
 8004564:	40004800 	.word	0x40004800
 8004568:	007a1200 	.word	0x007a1200

0800456c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01a      	beq.n	8004682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466a:	d10a      	bne.n	8004682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b098      	sub	sp, #96	; 0x60
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c0:	f7fc ff76 	bl	80015b0 <HAL_GetTick>
 80046c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d12e      	bne.n	8004732 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046dc:	2200      	movs	r2, #0
 80046de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f88c 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d021      	beq.n	8004732 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
 800470e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e6      	bne.n	80046ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e062      	b.n	80047f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d149      	bne.n	80047d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f856 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03c      	beq.n	80047d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	623b      	str	r3, [r7, #32]
   return(result);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
 800477a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800477e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	60fb      	str	r3, [r7, #12]
   return(result);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	617b      	str	r3, [r7, #20]
   return(result);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e011      	b.n	80047f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3758      	adds	r7, #88	; 0x58
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004810:	e049      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d045      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fc fec9 	bl	80015b0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e048      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d031      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d110      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f838 	bl	80048ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2208      	movs	r2, #8
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e029      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004880:	d111      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f81e 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d0a6      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b095      	sub	sp, #84	; 0x54
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
 80048f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	61fb      	str	r3, [r7, #28]
   return(result);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800492e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	2b01      	cmp	r3, #1
 8004942:	d118      	bne.n	8004976 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60bb      	str	r3, [r7, #8]
   return(result);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	669a      	str	r2, [r3, #104]	; 0x68
}
 800498a:	bf00      	nop
 800498c:	3754      	adds	r7, #84	; 0x54
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <__cvt>:
 8004996:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800499a:	ec55 4b10 	vmov	r4, r5, d0
 800499e:	2d00      	cmp	r5, #0
 80049a0:	460e      	mov	r6, r1
 80049a2:	4619      	mov	r1, r3
 80049a4:	462b      	mov	r3, r5
 80049a6:	bfbb      	ittet	lt
 80049a8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049ac:	461d      	movlt	r5, r3
 80049ae:	2300      	movge	r3, #0
 80049b0:	232d      	movlt	r3, #45	; 0x2d
 80049b2:	700b      	strb	r3, [r1, #0]
 80049b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049ba:	4691      	mov	r9, r2
 80049bc:	f023 0820 	bic.w	r8, r3, #32
 80049c0:	bfbc      	itt	lt
 80049c2:	4622      	movlt	r2, r4
 80049c4:	4614      	movlt	r4, r2
 80049c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ca:	d005      	beq.n	80049d8 <__cvt+0x42>
 80049cc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049d0:	d100      	bne.n	80049d4 <__cvt+0x3e>
 80049d2:	3601      	adds	r6, #1
 80049d4:	2102      	movs	r1, #2
 80049d6:	e000      	b.n	80049da <__cvt+0x44>
 80049d8:	2103      	movs	r1, #3
 80049da:	ab03      	add	r3, sp, #12
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	ab02      	add	r3, sp, #8
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	ec45 4b10 	vmov	d0, r4, r5
 80049e6:	4653      	mov	r3, sl
 80049e8:	4632      	mov	r2, r6
 80049ea:	f000 fe69 	bl	80056c0 <_dtoa_r>
 80049ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049f2:	4607      	mov	r7, r0
 80049f4:	d102      	bne.n	80049fc <__cvt+0x66>
 80049f6:	f019 0f01 	tst.w	r9, #1
 80049fa:	d022      	beq.n	8004a42 <__cvt+0xac>
 80049fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a00:	eb07 0906 	add.w	r9, r7, r6
 8004a04:	d110      	bne.n	8004a28 <__cvt+0x92>
 8004a06:	783b      	ldrb	r3, [r7, #0]
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d10a      	bne.n	8004a22 <__cvt+0x8c>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4620      	mov	r0, r4
 8004a12:	4629      	mov	r1, r5
 8004a14:	f7fc f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a18:	b918      	cbnz	r0, 8004a22 <__cvt+0x8c>
 8004a1a:	f1c6 0601 	rsb	r6, r6, #1
 8004a1e:	f8ca 6000 	str.w	r6, [sl]
 8004a22:	f8da 3000 	ldr.w	r3, [sl]
 8004a26:	4499      	add	r9, r3
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4629      	mov	r1, r5
 8004a30:	f7fc f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a34:	b108      	cbz	r0, 8004a3a <__cvt+0xa4>
 8004a36:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a3a:	2230      	movs	r2, #48	; 0x30
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	454b      	cmp	r3, r9
 8004a40:	d307      	bcc.n	8004a52 <__cvt+0xbc>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a46:	1bdb      	subs	r3, r3, r7
 8004a48:	4638      	mov	r0, r7
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	b004      	add	sp, #16
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	9103      	str	r1, [sp, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	e7f0      	b.n	8004a3c <__cvt+0xa6>

08004a5a <__exponent>:
 8004a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	bfb8      	it	lt
 8004a62:	4249      	neglt	r1, r1
 8004a64:	f803 2b02 	strb.w	r2, [r3], #2
 8004a68:	bfb4      	ite	lt
 8004a6a:	222d      	movlt	r2, #45	; 0x2d
 8004a6c:	222b      	movge	r2, #43	; 0x2b
 8004a6e:	2909      	cmp	r1, #9
 8004a70:	7042      	strb	r2, [r0, #1]
 8004a72:	dd2a      	ble.n	8004aca <__exponent+0x70>
 8004a74:	f10d 0207 	add.w	r2, sp, #7
 8004a78:	4617      	mov	r7, r2
 8004a7a:	260a      	movs	r6, #10
 8004a7c:	4694      	mov	ip, r2
 8004a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a82:	fb06 1415 	mls	r4, r6, r5, r1
 8004a86:	3430      	adds	r4, #48	; 0x30
 8004a88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2c63      	cmp	r4, #99	; 0x63
 8004a90:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a94:	4629      	mov	r1, r5
 8004a96:	dcf1      	bgt.n	8004a7c <__exponent+0x22>
 8004a98:	3130      	adds	r1, #48	; 0x30
 8004a9a:	f1ac 0402 	sub.w	r4, ip, #2
 8004a9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004aa2:	1c41      	adds	r1, r0, #1
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	42ba      	cmp	r2, r7
 8004aa8:	d30a      	bcc.n	8004ac0 <__exponent+0x66>
 8004aaa:	f10d 0209 	add.w	r2, sp, #9
 8004aae:	eba2 020c 	sub.w	r2, r2, ip
 8004ab2:	42bc      	cmp	r4, r7
 8004ab4:	bf88      	it	hi
 8004ab6:	2200      	movhi	r2, #0
 8004ab8:	4413      	add	r3, r2
 8004aba:	1a18      	subs	r0, r3, r0
 8004abc:	b003      	add	sp, #12
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ac4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ac8:	e7ed      	b.n	8004aa6 <__exponent+0x4c>
 8004aca:	2330      	movs	r3, #48	; 0x30
 8004acc:	3130      	adds	r1, #48	; 0x30
 8004ace:	7083      	strb	r3, [r0, #2]
 8004ad0:	70c1      	strb	r1, [r0, #3]
 8004ad2:	1d03      	adds	r3, r0, #4
 8004ad4:	e7f1      	b.n	8004aba <__exponent+0x60>
	...

08004ad8 <_printf_float>:
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	ed2d 8b02 	vpush	{d8}
 8004ae0:	b08d      	sub	sp, #52	; 0x34
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ae8:	4616      	mov	r6, r2
 8004aea:	461f      	mov	r7, r3
 8004aec:	4605      	mov	r5, r0
 8004aee:	f000 fce7 	bl	80054c0 <_localeconv_r>
 8004af2:	f8d0 a000 	ldr.w	sl, [r0]
 8004af6:	4650      	mov	r0, sl
 8004af8:	f7fb fbba 	bl	8000270 <strlen>
 8004afc:	2300      	movs	r3, #0
 8004afe:	930a      	str	r3, [sp, #40]	; 0x28
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	9305      	str	r3, [sp, #20]
 8004b04:	f8d8 3000 	ldr.w	r3, [r8]
 8004b08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b0c:	3307      	adds	r3, #7
 8004b0e:	f023 0307 	bic.w	r3, r3, #7
 8004b12:	f103 0208 	add.w	r2, r3, #8
 8004b16:	f8c8 2000 	str.w	r2, [r8]
 8004b1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b22:	9307      	str	r3, [sp, #28]
 8004b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b28:	ee08 0a10 	vmov	s16, r0
 8004b2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b34:	4b9e      	ldr	r3, [pc, #632]	; (8004db0 <_printf_float+0x2d8>)
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	f7fb fff7 	bl	8000b2c <__aeabi_dcmpun>
 8004b3e:	bb88      	cbnz	r0, 8004ba4 <_printf_float+0xcc>
 8004b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b44:	4b9a      	ldr	r3, [pc, #616]	; (8004db0 <_printf_float+0x2d8>)
 8004b46:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4a:	f7fb ffd1 	bl	8000af0 <__aeabi_dcmple>
 8004b4e:	bb48      	cbnz	r0, 8004ba4 <_printf_float+0xcc>
 8004b50:	2200      	movs	r2, #0
 8004b52:	2300      	movs	r3, #0
 8004b54:	4640      	mov	r0, r8
 8004b56:	4649      	mov	r1, r9
 8004b58:	f7fb ffc0 	bl	8000adc <__aeabi_dcmplt>
 8004b5c:	b110      	cbz	r0, 8004b64 <_printf_float+0x8c>
 8004b5e:	232d      	movs	r3, #45	; 0x2d
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	4a93      	ldr	r2, [pc, #588]	; (8004db4 <_printf_float+0x2dc>)
 8004b66:	4b94      	ldr	r3, [pc, #592]	; (8004db8 <_printf_float+0x2e0>)
 8004b68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b6c:	bf94      	ite	ls
 8004b6e:	4690      	movls	r8, r2
 8004b70:	4698      	movhi	r8, r3
 8004b72:	2303      	movs	r3, #3
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	9b05      	ldr	r3, [sp, #20]
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	9700      	str	r7, [sp, #0]
 8004b84:	4633      	mov	r3, r6
 8004b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f9da 	bl	8004f44 <_printf_common>
 8004b90:	3001      	adds	r0, #1
 8004b92:	f040 8090 	bne.w	8004cb6 <_printf_float+0x1de>
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	b00d      	add	sp, #52	; 0x34
 8004b9c:	ecbd 8b02 	vpop	{d8}
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4649      	mov	r1, r9
 8004bac:	f7fb ffbe 	bl	8000b2c <__aeabi_dcmpun>
 8004bb0:	b140      	cbz	r0, 8004bc4 <_printf_float+0xec>
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bfbc      	itt	lt
 8004bb8:	232d      	movlt	r3, #45	; 0x2d
 8004bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bbe:	4a7f      	ldr	r2, [pc, #508]	; (8004dbc <_printf_float+0x2e4>)
 8004bc0:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <_printf_float+0x2e8>)
 8004bc2:	e7d1      	b.n	8004b68 <_printf_float+0x90>
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bca:	9206      	str	r2, [sp, #24]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	d13f      	bne.n	8004c50 <_printf_float+0x178>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	9b05      	ldr	r3, [sp, #20]
 8004bd6:	6861      	ldr	r1, [r4, #4]
 8004bd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	ab0a      	add	r3, sp, #40	; 0x28
 8004be2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004be6:	ab09      	add	r3, sp, #36	; 0x24
 8004be8:	ec49 8b10 	vmov	d0, r8, r9
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6022      	str	r2, [r4, #0]
 8004bf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f7ff fece 	bl	8004996 <__cvt>
 8004bfa:	9b06      	ldr	r3, [sp, #24]
 8004bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bfe:	2b47      	cmp	r3, #71	; 0x47
 8004c00:	4680      	mov	r8, r0
 8004c02:	d108      	bne.n	8004c16 <_printf_float+0x13e>
 8004c04:	1cc8      	adds	r0, r1, #3
 8004c06:	db02      	blt.n	8004c0e <_printf_float+0x136>
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	4299      	cmp	r1, r3
 8004c0c:	dd41      	ble.n	8004c92 <_printf_float+0x1ba>
 8004c0e:	f1ab 0302 	sub.w	r3, fp, #2
 8004c12:	fa5f fb83 	uxtb.w	fp, r3
 8004c16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c1a:	d820      	bhi.n	8004c5e <_printf_float+0x186>
 8004c1c:	3901      	subs	r1, #1
 8004c1e:	465a      	mov	r2, fp
 8004c20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c24:	9109      	str	r1, [sp, #36]	; 0x24
 8004c26:	f7ff ff18 	bl	8004a5a <__exponent>
 8004c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c2c:	1813      	adds	r3, r2, r0
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	4681      	mov	r9, r0
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	dc02      	bgt.n	8004c3c <_printf_float+0x164>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	07d2      	lsls	r2, r2, #31
 8004c3a:	d501      	bpl.n	8004c40 <_printf_float+0x168>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d09c      	beq.n	8004b82 <_printf_float+0xaa>
 8004c48:	232d      	movs	r3, #45	; 0x2d
 8004c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c4e:	e798      	b.n	8004b82 <_printf_float+0xaa>
 8004c50:	9a06      	ldr	r2, [sp, #24]
 8004c52:	2a47      	cmp	r2, #71	; 0x47
 8004c54:	d1be      	bne.n	8004bd4 <_printf_float+0xfc>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1bc      	bne.n	8004bd4 <_printf_float+0xfc>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7b9      	b.n	8004bd2 <_printf_float+0xfa>
 8004c5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c62:	d118      	bne.n	8004c96 <_printf_float+0x1be>
 8004c64:	2900      	cmp	r1, #0
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	dd0b      	ble.n	8004c82 <_printf_float+0x1aa>
 8004c6a:	6121      	str	r1, [r4, #16]
 8004c6c:	b913      	cbnz	r3, 8004c74 <_printf_float+0x19c>
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	07d0      	lsls	r0, r2, #31
 8004c72:	d502      	bpl.n	8004c7a <_printf_float+0x1a2>
 8004c74:	3301      	adds	r3, #1
 8004c76:	440b      	add	r3, r1
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	e7de      	b.n	8004c40 <_printf_float+0x168>
 8004c82:	b913      	cbnz	r3, 8004c8a <_printf_float+0x1b2>
 8004c84:	6822      	ldr	r2, [r4, #0]
 8004c86:	07d2      	lsls	r2, r2, #31
 8004c88:	d501      	bpl.n	8004c8e <_printf_float+0x1b6>
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	e7f4      	b.n	8004c78 <_printf_float+0x1a0>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7f2      	b.n	8004c78 <_printf_float+0x1a0>
 8004c92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	db05      	blt.n	8004ca8 <_printf_float+0x1d0>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	6121      	str	r1, [r4, #16]
 8004ca0:	07d8      	lsls	r0, r3, #31
 8004ca2:	d5ea      	bpl.n	8004c7a <_printf_float+0x1a2>
 8004ca4:	1c4b      	adds	r3, r1, #1
 8004ca6:	e7e7      	b.n	8004c78 <_printf_float+0x1a0>
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bfd4      	ite	le
 8004cac:	f1c1 0202 	rsble	r2, r1, #2
 8004cb0:	2201      	movgt	r2, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	e7e0      	b.n	8004c78 <_printf_float+0x1a0>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	055a      	lsls	r2, r3, #21
 8004cba:	d407      	bmi.n	8004ccc <_printf_float+0x1f4>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d12c      	bne.n	8004d24 <_printf_float+0x24c>
 8004cca:	e764      	b.n	8004b96 <_printf_float+0xbe>
 8004ccc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cd0:	f240 80e0 	bls.w	8004e94 <_printf_float+0x3bc>
 8004cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f7fb fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d034      	beq.n	8004d4e <_printf_float+0x276>
 8004ce4:	4a37      	ldr	r2, [pc, #220]	; (8004dc4 <_printf_float+0x2ec>)
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f af51 	beq.w	8004b96 <_printf_float+0xbe>
 8004cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	db02      	blt.n	8004d02 <_printf_float+0x22a>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	07d8      	lsls	r0, r3, #31
 8004d00:	d510      	bpl.n	8004d24 <_printf_float+0x24c>
 8004d02:	ee18 3a10 	vmov	r3, s16
 8004d06:	4652      	mov	r2, sl
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f af41 	beq.w	8004b96 <_printf_float+0xbe>
 8004d14:	f04f 0800 	mov.w	r8, #0
 8004d18:	f104 091a 	add.w	r9, r4, #26
 8004d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	4543      	cmp	r3, r8
 8004d22:	dc09      	bgt.n	8004d38 <_printf_float+0x260>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	079b      	lsls	r3, r3, #30
 8004d28:	f100 8107 	bmi.w	8004f3a <_printf_float+0x462>
 8004d2c:	68e0      	ldr	r0, [r4, #12]
 8004d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d30:	4298      	cmp	r0, r3
 8004d32:	bfb8      	it	lt
 8004d34:	4618      	movlt	r0, r3
 8004d36:	e730      	b.n	8004b9a <_printf_float+0xc2>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	464a      	mov	r2, r9
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af27 	beq.w	8004b96 <_printf_float+0xbe>
 8004d48:	f108 0801 	add.w	r8, r8, #1
 8004d4c:	e7e6      	b.n	8004d1c <_printf_float+0x244>
 8004d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dc39      	bgt.n	8004dc8 <_printf_float+0x2f0>
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <_printf_float+0x2ec>)
 8004d56:	2301      	movs	r3, #1
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b8      	blx	r7
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f43f af19 	beq.w	8004b96 <_printf_float+0xbe>
 8004d64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d102      	bne.n	8004d72 <_printf_float+0x29a>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d5d8      	bpl.n	8004d24 <_printf_float+0x24c>
 8004d72:	ee18 3a10 	vmov	r3, s16
 8004d76:	4652      	mov	r2, sl
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af09 	beq.w	8004b96 <_printf_float+0xbe>
 8004d84:	f04f 0900 	mov.w	r9, #0
 8004d88:	f104 0a1a 	add.w	sl, r4, #26
 8004d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8e:	425b      	negs	r3, r3
 8004d90:	454b      	cmp	r3, r9
 8004d92:	dc01      	bgt.n	8004d98 <_printf_float+0x2c0>
 8004d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d96:	e792      	b.n	8004cbe <_printf_float+0x1e6>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f aef7 	beq.w	8004b96 <_printf_float+0xbe>
 8004da8:	f109 0901 	add.w	r9, r9, #1
 8004dac:	e7ee      	b.n	8004d8c <_printf_float+0x2b4>
 8004dae:	bf00      	nop
 8004db0:	7fefffff 	.word	0x7fefffff
 8004db4:	08007734 	.word	0x08007734
 8004db8:	08007738 	.word	0x08007738
 8004dbc:	0800773c 	.word	0x0800773c
 8004dc0:	08007740 	.word	0x08007740
 8004dc4:	08007744 	.word	0x08007744
 8004dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bfa8      	it	ge
 8004dd0:	461a      	movge	r2, r3
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	4691      	mov	r9, r2
 8004dd6:	dc37      	bgt.n	8004e48 <_printf_float+0x370>
 8004dd8:	f04f 0b00 	mov.w	fp, #0
 8004ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de0:	f104 021a 	add.w	r2, r4, #26
 8004de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	eba3 0309 	sub.w	r3, r3, r9
 8004dec:	455b      	cmp	r3, fp
 8004dee:	dc33      	bgt.n	8004e58 <_printf_float+0x380>
 8004df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df4:	429a      	cmp	r2, r3
 8004df6:	db3b      	blt.n	8004e70 <_printf_float+0x398>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	07da      	lsls	r2, r3, #31
 8004dfc:	d438      	bmi.n	8004e70 <_printf_float+0x398>
 8004dfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e02:	eba2 0903 	sub.w	r9, r2, r3
 8004e06:	9b05      	ldr	r3, [sp, #20]
 8004e08:	1ad2      	subs	r2, r2, r3
 8004e0a:	4591      	cmp	r9, r2
 8004e0c:	bfa8      	it	ge
 8004e0e:	4691      	movge	r9, r2
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	dc35      	bgt.n	8004e82 <_printf_float+0x3aa>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e1e:	f104 0a1a 	add.w	sl, r4, #26
 8004e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	eba3 0309 	sub.w	r3, r3, r9
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	f77f af79 	ble.w	8004d24 <_printf_float+0x24c>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4652      	mov	r2, sl
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f aeaa 	beq.w	8004b96 <_printf_float+0xbe>
 8004e42:	f108 0801 	add.w	r8, r8, #1
 8004e46:	e7ec      	b.n	8004e22 <_printf_float+0x34a>
 8004e48:	4613      	mov	r3, r2
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	d1c0      	bne.n	8004dd8 <_printf_float+0x300>
 8004e56:	e69e      	b.n	8004b96 <_printf_float+0xbe>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	9205      	str	r2, [sp, #20]
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f ae97 	beq.w	8004b96 <_printf_float+0xbe>
 8004e68:	9a05      	ldr	r2, [sp, #20]
 8004e6a:	f10b 0b01 	add.w	fp, fp, #1
 8004e6e:	e7b9      	b.n	8004de4 <_printf_float+0x30c>
 8004e70:	ee18 3a10 	vmov	r3, s16
 8004e74:	4652      	mov	r2, sl
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1be      	bne.n	8004dfe <_printf_float+0x326>
 8004e80:	e689      	b.n	8004b96 <_printf_float+0xbe>
 8004e82:	9a05      	ldr	r2, [sp, #20]
 8004e84:	464b      	mov	r3, r9
 8004e86:	4442      	add	r2, r8
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d1c1      	bne.n	8004e16 <_printf_float+0x33e>
 8004e92:	e680      	b.n	8004b96 <_printf_float+0xbe>
 8004e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e96:	2a01      	cmp	r2, #1
 8004e98:	dc01      	bgt.n	8004e9e <_printf_float+0x3c6>
 8004e9a:	07db      	lsls	r3, r3, #31
 8004e9c:	d53a      	bpl.n	8004f14 <_printf_float+0x43c>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae74 	beq.w	8004b96 <_printf_float+0xbe>
 8004eae:	ee18 3a10 	vmov	r3, s16
 8004eb2:	4652      	mov	r2, sl
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	47b8      	blx	r7
 8004eba:	3001      	adds	r0, #1
 8004ebc:	f43f ae6b 	beq.w	8004b96 <_printf_float+0xbe>
 8004ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ecc:	f7fb fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed0:	b9d8      	cbnz	r0, 8004f0a <_printf_float+0x432>
 8004ed2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ed6:	f108 0201 	add.w	r2, r8, #1
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d10e      	bne.n	8004f02 <_printf_float+0x42a>
 8004ee4:	e657      	b.n	8004b96 <_printf_float+0xbe>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4652      	mov	r2, sl
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f ae50 	beq.w	8004b96 <_printf_float+0xbe>
 8004ef6:	f108 0801 	add.w	r8, r8, #1
 8004efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4543      	cmp	r3, r8
 8004f00:	dcf1      	bgt.n	8004ee6 <_printf_float+0x40e>
 8004f02:	464b      	mov	r3, r9
 8004f04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f08:	e6da      	b.n	8004cc0 <_printf_float+0x1e8>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	f104 0a1a 	add.w	sl, r4, #26
 8004f12:	e7f2      	b.n	8004efa <_printf_float+0x422>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4642      	mov	r2, r8
 8004f18:	e7df      	b.n	8004eda <_printf_float+0x402>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	464a      	mov	r2, r9
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f ae36 	beq.w	8004b96 <_printf_float+0xbe>
 8004f2a:	f108 0801 	add.w	r8, r8, #1
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f32:	1a5b      	subs	r3, r3, r1
 8004f34:	4543      	cmp	r3, r8
 8004f36:	dcf0      	bgt.n	8004f1a <_printf_float+0x442>
 8004f38:	e6f8      	b.n	8004d2c <_printf_float+0x254>
 8004f3a:	f04f 0800 	mov.w	r8, #0
 8004f3e:	f104 0919 	add.w	r9, r4, #25
 8004f42:	e7f4      	b.n	8004f2e <_printf_float+0x456>

08004f44 <_printf_common>:
 8004f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	4616      	mov	r6, r2
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	688a      	ldr	r2, [r1, #8]
 8004f4e:	690b      	ldr	r3, [r1, #16]
 8004f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f54:	4293      	cmp	r3, r2
 8004f56:	bfb8      	it	lt
 8004f58:	4613      	movlt	r3, r2
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f60:	4607      	mov	r7, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	b10a      	cbz	r2, 8004f6a <_printf_common+0x26>
 8004f66:	3301      	adds	r3, #1
 8004f68:	6033      	str	r3, [r6, #0]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	0699      	lsls	r1, r3, #26
 8004f6e:	bf42      	ittt	mi
 8004f70:	6833      	ldrmi	r3, [r6, #0]
 8004f72:	3302      	addmi	r3, #2
 8004f74:	6033      	strmi	r3, [r6, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f015 0506 	ands.w	r5, r5, #6
 8004f7c:	d106      	bne.n	8004f8c <_printf_common+0x48>
 8004f7e:	f104 0a19 	add.w	sl, r4, #25
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	6832      	ldr	r2, [r6, #0]
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	42ab      	cmp	r3, r5
 8004f8a:	dc26      	bgt.n	8004fda <_printf_common+0x96>
 8004f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f90:	1e13      	subs	r3, r2, #0
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	bf18      	it	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	0692      	lsls	r2, r2, #26
 8004f9a:	d42b      	bmi.n	8004ff4 <_printf_common+0xb0>
 8004f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d01e      	beq.n	8004fe8 <_printf_common+0xa4>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	bf02      	ittt	eq
 8004fb6:	68e5      	ldreq	r5, [r4, #12]
 8004fb8:	6833      	ldreq	r3, [r6, #0]
 8004fba:	1aed      	subeq	r5, r5, r3
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	bf0c      	ite	eq
 8004fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc4:	2500      	movne	r5, #0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bfc4      	itt	gt
 8004fca:	1a9b      	subgt	r3, r3, r2
 8004fcc:	18ed      	addgt	r5, r5, r3
 8004fce:	2600      	movs	r6, #0
 8004fd0:	341a      	adds	r4, #26
 8004fd2:	42b5      	cmp	r5, r6
 8004fd4:	d11a      	bne.n	800500c <_printf_common+0xc8>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e008      	b.n	8004fec <_printf_common+0xa8>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4652      	mov	r2, sl
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	47c0      	blx	r8
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d103      	bne.n	8004ff0 <_printf_common+0xac>
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7c6      	b.n	8004f82 <_printf_common+0x3e>
 8004ff4:	18e1      	adds	r1, r4, r3
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	2030      	movs	r0, #48	; 0x30
 8004ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ffe:	4422      	add	r2, r4
 8005000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005008:	3302      	adds	r3, #2
 800500a:	e7c7      	b.n	8004f9c <_printf_common+0x58>
 800500c:	2301      	movs	r3, #1
 800500e:	4622      	mov	r2, r4
 8005010:	4649      	mov	r1, r9
 8005012:	4638      	mov	r0, r7
 8005014:	47c0      	blx	r8
 8005016:	3001      	adds	r0, #1
 8005018:	d0e6      	beq.n	8004fe8 <_printf_common+0xa4>
 800501a:	3601      	adds	r6, #1
 800501c:	e7d9      	b.n	8004fd2 <_printf_common+0x8e>
	...

08005020 <_printf_i>:
 8005020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	7e0f      	ldrb	r7, [r1, #24]
 8005026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005028:	2f78      	cmp	r7, #120	; 0x78
 800502a:	4691      	mov	r9, r2
 800502c:	4680      	mov	r8, r0
 800502e:	460c      	mov	r4, r1
 8005030:	469a      	mov	sl, r3
 8005032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005036:	d807      	bhi.n	8005048 <_printf_i+0x28>
 8005038:	2f62      	cmp	r7, #98	; 0x62
 800503a:	d80a      	bhi.n	8005052 <_printf_i+0x32>
 800503c:	2f00      	cmp	r7, #0
 800503e:	f000 80d4 	beq.w	80051ea <_printf_i+0x1ca>
 8005042:	2f58      	cmp	r7, #88	; 0x58
 8005044:	f000 80c0 	beq.w	80051c8 <_printf_i+0x1a8>
 8005048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800504c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005050:	e03a      	b.n	80050c8 <_printf_i+0xa8>
 8005052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005056:	2b15      	cmp	r3, #21
 8005058:	d8f6      	bhi.n	8005048 <_printf_i+0x28>
 800505a:	a101      	add	r1, pc, #4	; (adr r1, 8005060 <_printf_i+0x40>)
 800505c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005060:	080050b9 	.word	0x080050b9
 8005064:	080050cd 	.word	0x080050cd
 8005068:	08005049 	.word	0x08005049
 800506c:	08005049 	.word	0x08005049
 8005070:	08005049 	.word	0x08005049
 8005074:	08005049 	.word	0x08005049
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005049 	.word	0x08005049
 8005080:	08005049 	.word	0x08005049
 8005084:	08005049 	.word	0x08005049
 8005088:	08005049 	.word	0x08005049
 800508c:	080051d1 	.word	0x080051d1
 8005090:	080050f9 	.word	0x080050f9
 8005094:	0800518b 	.word	0x0800518b
 8005098:	08005049 	.word	0x08005049
 800509c:	08005049 	.word	0x08005049
 80050a0:	080051f3 	.word	0x080051f3
 80050a4:	08005049 	.word	0x08005049
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	08005049 	.word	0x08005049
 80050b0:	08005049 	.word	0x08005049
 80050b4:	08005193 	.word	0x08005193
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	1d1a      	adds	r2, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	602a      	str	r2, [r5, #0]
 80050c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c8:	2301      	movs	r3, #1
 80050ca:	e09f      	b.n	800520c <_printf_i+0x1ec>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	0607      	lsls	r7, r0, #24
 80050d2:	f103 0104 	add.w	r1, r3, #4
 80050d6:	6029      	str	r1, [r5, #0]
 80050d8:	d501      	bpl.n	80050de <_printf_i+0xbe>
 80050da:	681e      	ldr	r6, [r3, #0]
 80050dc:	e003      	b.n	80050e6 <_printf_i+0xc6>
 80050de:	0646      	lsls	r6, r0, #25
 80050e0:	d5fb      	bpl.n	80050da <_printf_i+0xba>
 80050e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	da03      	bge.n	80050f2 <_printf_i+0xd2>
 80050ea:	232d      	movs	r3, #45	; 0x2d
 80050ec:	4276      	negs	r6, r6
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f2:	485a      	ldr	r0, [pc, #360]	; (800525c <_printf_i+0x23c>)
 80050f4:	230a      	movs	r3, #10
 80050f6:	e012      	b.n	800511e <_printf_i+0xfe>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	1d19      	adds	r1, r3, #4
 80050fe:	6029      	str	r1, [r5, #0]
 8005100:	0605      	lsls	r5, r0, #24
 8005102:	d501      	bpl.n	8005108 <_printf_i+0xe8>
 8005104:	681e      	ldr	r6, [r3, #0]
 8005106:	e002      	b.n	800510e <_printf_i+0xee>
 8005108:	0641      	lsls	r1, r0, #25
 800510a:	d5fb      	bpl.n	8005104 <_printf_i+0xe4>
 800510c:	881e      	ldrh	r6, [r3, #0]
 800510e:	4853      	ldr	r0, [pc, #332]	; (800525c <_printf_i+0x23c>)
 8005110:	2f6f      	cmp	r7, #111	; 0x6f
 8005112:	bf0c      	ite	eq
 8005114:	2308      	moveq	r3, #8
 8005116:	230a      	movne	r3, #10
 8005118:	2100      	movs	r1, #0
 800511a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511e:	6865      	ldr	r5, [r4, #4]
 8005120:	60a5      	str	r5, [r4, #8]
 8005122:	2d00      	cmp	r5, #0
 8005124:	bfa2      	ittt	ge
 8005126:	6821      	ldrge	r1, [r4, #0]
 8005128:	f021 0104 	bicge.w	r1, r1, #4
 800512c:	6021      	strge	r1, [r4, #0]
 800512e:	b90e      	cbnz	r6, 8005134 <_printf_i+0x114>
 8005130:	2d00      	cmp	r5, #0
 8005132:	d04b      	beq.n	80051cc <_printf_i+0x1ac>
 8005134:	4615      	mov	r5, r2
 8005136:	fbb6 f1f3 	udiv	r1, r6, r3
 800513a:	fb03 6711 	mls	r7, r3, r1, r6
 800513e:	5dc7      	ldrb	r7, [r0, r7]
 8005140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005144:	4637      	mov	r7, r6
 8005146:	42bb      	cmp	r3, r7
 8005148:	460e      	mov	r6, r1
 800514a:	d9f4      	bls.n	8005136 <_printf_i+0x116>
 800514c:	2b08      	cmp	r3, #8
 800514e:	d10b      	bne.n	8005168 <_printf_i+0x148>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07de      	lsls	r6, r3, #31
 8005154:	d508      	bpl.n	8005168 <_printf_i+0x148>
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	6861      	ldr	r1, [r4, #4]
 800515a:	4299      	cmp	r1, r3
 800515c:	bfde      	ittt	le
 800515e:	2330      	movle	r3, #48	; 0x30
 8005160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005168:	1b52      	subs	r2, r2, r5
 800516a:	6122      	str	r2, [r4, #16]
 800516c:	f8cd a000 	str.w	sl, [sp]
 8005170:	464b      	mov	r3, r9
 8005172:	aa03      	add	r2, sp, #12
 8005174:	4621      	mov	r1, r4
 8005176:	4640      	mov	r0, r8
 8005178:	f7ff fee4 	bl	8004f44 <_printf_common>
 800517c:	3001      	adds	r0, #1
 800517e:	d14a      	bne.n	8005216 <_printf_i+0x1f6>
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	b004      	add	sp, #16
 8005186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f043 0320 	orr.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	4833      	ldr	r0, [pc, #204]	; (8005260 <_printf_i+0x240>)
 8005194:	2778      	movs	r7, #120	; 0x78
 8005196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	6829      	ldr	r1, [r5, #0]
 800519e:	061f      	lsls	r7, r3, #24
 80051a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80051a4:	d402      	bmi.n	80051ac <_printf_i+0x18c>
 80051a6:	065f      	lsls	r7, r3, #25
 80051a8:	bf48      	it	mi
 80051aa:	b2b6      	uxthmi	r6, r6
 80051ac:	07df      	lsls	r7, r3, #31
 80051ae:	bf48      	it	mi
 80051b0:	f043 0320 	orrmi.w	r3, r3, #32
 80051b4:	6029      	str	r1, [r5, #0]
 80051b6:	bf48      	it	mi
 80051b8:	6023      	strmi	r3, [r4, #0]
 80051ba:	b91e      	cbnz	r6, 80051c4 <_printf_i+0x1a4>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	f023 0320 	bic.w	r3, r3, #32
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	2310      	movs	r3, #16
 80051c6:	e7a7      	b.n	8005118 <_printf_i+0xf8>
 80051c8:	4824      	ldr	r0, [pc, #144]	; (800525c <_printf_i+0x23c>)
 80051ca:	e7e4      	b.n	8005196 <_printf_i+0x176>
 80051cc:	4615      	mov	r5, r2
 80051ce:	e7bd      	b.n	800514c <_printf_i+0x12c>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6826      	ldr	r6, [r4, #0]
 80051d4:	6961      	ldr	r1, [r4, #20]
 80051d6:	1d18      	adds	r0, r3, #4
 80051d8:	6028      	str	r0, [r5, #0]
 80051da:	0635      	lsls	r5, r6, #24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0x1c4>
 80051e0:	6019      	str	r1, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0x1ca>
 80051e4:	0670      	lsls	r0, r6, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0x1c0>
 80051e8:	8019      	strh	r1, [r3, #0]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	4615      	mov	r5, r2
 80051f0:	e7bc      	b.n	800516c <_printf_i+0x14c>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	602a      	str	r2, [r5, #0]
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fa ffe6 	bl	80001d0 <memchr>
 8005204:	b108      	cbz	r0, 800520a <_printf_i+0x1ea>
 8005206:	1b40      	subs	r0, r0, r5
 8005208:	6060      	str	r0, [r4, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	e7aa      	b.n	800516c <_printf_i+0x14c>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	462a      	mov	r2, r5
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d0ad      	beq.n	8005180 <_printf_i+0x160>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	079b      	lsls	r3, r3, #30
 8005228:	d413      	bmi.n	8005252 <_printf_i+0x232>
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	4298      	cmp	r0, r3
 8005230:	bfb8      	it	lt
 8005232:	4618      	movlt	r0, r3
 8005234:	e7a6      	b.n	8005184 <_printf_i+0x164>
 8005236:	2301      	movs	r3, #1
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d09d      	beq.n	8005180 <_printf_i+0x160>
 8005244:	3501      	adds	r5, #1
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	1a5b      	subs	r3, r3, r1
 800524c:	42ab      	cmp	r3, r5
 800524e:	dcf2      	bgt.n	8005236 <_printf_i+0x216>
 8005250:	e7eb      	b.n	800522a <_printf_i+0x20a>
 8005252:	2500      	movs	r5, #0
 8005254:	f104 0619 	add.w	r6, r4, #25
 8005258:	e7f5      	b.n	8005246 <_printf_i+0x226>
 800525a:	bf00      	nop
 800525c:	08007746 	.word	0x08007746
 8005260:	08007757 	.word	0x08007757

08005264 <std>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	4604      	mov	r4, r0
 800526a:	e9c0 3300 	strd	r3, r3, [r0]
 800526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005272:	6083      	str	r3, [r0, #8]
 8005274:	8181      	strh	r1, [r0, #12]
 8005276:	6643      	str	r3, [r0, #100]	; 0x64
 8005278:	81c2      	strh	r2, [r0, #14]
 800527a:	6183      	str	r3, [r0, #24]
 800527c:	4619      	mov	r1, r3
 800527e:	2208      	movs	r2, #8
 8005280:	305c      	adds	r0, #92	; 0x5c
 8005282:	f000 f914 	bl	80054ae <memset>
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <std+0x58>)
 8005288:	6263      	str	r3, [r4, #36]	; 0x24
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <std+0x5c>)
 800528c:	62a3      	str	r3, [r4, #40]	; 0x28
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <std+0x60>)
 8005290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <std+0x64>)
 8005294:	6323      	str	r3, [r4, #48]	; 0x30
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <std+0x68>)
 8005298:	6224      	str	r4, [r4, #32]
 800529a:	429c      	cmp	r4, r3
 800529c:	d006      	beq.n	80052ac <std+0x48>
 800529e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052a2:	4294      	cmp	r4, r2
 80052a4:	d002      	beq.n	80052ac <std+0x48>
 80052a6:	33d0      	adds	r3, #208	; 0xd0
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d105      	bne.n	80052b8 <std+0x54>
 80052ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b4:	f000 b978 	b.w	80055a8 <__retarget_lock_init_recursive>
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	bf00      	nop
 80052bc:	08005429 	.word	0x08005429
 80052c0:	0800544b 	.word	0x0800544b
 80052c4:	08005483 	.word	0x08005483
 80052c8:	080054a7 	.word	0x080054a7
 80052cc:	200003b8 	.word	0x200003b8

080052d0 <stdio_exit_handler>:
 80052d0:	4a02      	ldr	r2, [pc, #8]	; (80052dc <stdio_exit_handler+0xc>)
 80052d2:	4903      	ldr	r1, [pc, #12]	; (80052e0 <stdio_exit_handler+0x10>)
 80052d4:	4803      	ldr	r0, [pc, #12]	; (80052e4 <stdio_exit_handler+0x14>)
 80052d6:	f000 b869 	b.w	80053ac <_fwalk_sglue>
 80052da:	bf00      	nop
 80052dc:	2000008c 	.word	0x2000008c
 80052e0:	08006f59 	.word	0x08006f59
 80052e4:	20000098 	.word	0x20000098

080052e8 <cleanup_stdio>:
 80052e8:	6841      	ldr	r1, [r0, #4]
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <cleanup_stdio+0x34>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	b510      	push	{r4, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	d001      	beq.n	80052f8 <cleanup_stdio+0x10>
 80052f4:	f001 fe30 	bl	8006f58 <_fflush_r>
 80052f8:	68a1      	ldr	r1, [r4, #8]
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <cleanup_stdio+0x38>)
 80052fc:	4299      	cmp	r1, r3
 80052fe:	d002      	beq.n	8005306 <cleanup_stdio+0x1e>
 8005300:	4620      	mov	r0, r4
 8005302:	f001 fe29 	bl	8006f58 <_fflush_r>
 8005306:	68e1      	ldr	r1, [r4, #12]
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <cleanup_stdio+0x3c>)
 800530a:	4299      	cmp	r1, r3
 800530c:	d004      	beq.n	8005318 <cleanup_stdio+0x30>
 800530e:	4620      	mov	r0, r4
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f001 be20 	b.w	8006f58 <_fflush_r>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	200003b8 	.word	0x200003b8
 8005320:	20000420 	.word	0x20000420
 8005324:	20000488 	.word	0x20000488

08005328 <global_stdio_init.part.0>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <global_stdio_init.part.0+0x30>)
 800532c:	4c0b      	ldr	r4, [pc, #44]	; (800535c <global_stdio_init.part.0+0x34>)
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <global_stdio_init.part.0+0x38>)
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	2200      	movs	r2, #0
 8005336:	2104      	movs	r1, #4
 8005338:	f7ff ff94 	bl	8005264 <std>
 800533c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005340:	2201      	movs	r2, #1
 8005342:	2109      	movs	r1, #9
 8005344:	f7ff ff8e 	bl	8005264 <std>
 8005348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800534c:	2202      	movs	r2, #2
 800534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005352:	2112      	movs	r1, #18
 8005354:	f7ff bf86 	b.w	8005264 <std>
 8005358:	200004f0 	.word	0x200004f0
 800535c:	200003b8 	.word	0x200003b8
 8005360:	080052d1 	.word	0x080052d1

08005364 <__sfp_lock_acquire>:
 8005364:	4801      	ldr	r0, [pc, #4]	; (800536c <__sfp_lock_acquire+0x8>)
 8005366:	f000 b920 	b.w	80055aa <__retarget_lock_acquire_recursive>
 800536a:	bf00      	nop
 800536c:	200004f9 	.word	0x200004f9

08005370 <__sfp_lock_release>:
 8005370:	4801      	ldr	r0, [pc, #4]	; (8005378 <__sfp_lock_release+0x8>)
 8005372:	f000 b91b 	b.w	80055ac <__retarget_lock_release_recursive>
 8005376:	bf00      	nop
 8005378:	200004f9 	.word	0x200004f9

0800537c <__sinit>:
 800537c:	b510      	push	{r4, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	f7ff fff0 	bl	8005364 <__sfp_lock_acquire>
 8005384:	6a23      	ldr	r3, [r4, #32]
 8005386:	b11b      	cbz	r3, 8005390 <__sinit+0x14>
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f7ff bff0 	b.w	8005370 <__sfp_lock_release>
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <__sinit+0x28>)
 8005392:	6223      	str	r3, [r4, #32]
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <__sinit+0x2c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f5      	bne.n	8005388 <__sinit+0xc>
 800539c:	f7ff ffc4 	bl	8005328 <global_stdio_init.part.0>
 80053a0:	e7f2      	b.n	8005388 <__sinit+0xc>
 80053a2:	bf00      	nop
 80053a4:	080052e9 	.word	0x080052e9
 80053a8:	200004f0 	.word	0x200004f0

080053ac <_fwalk_sglue>:
 80053ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b0:	4607      	mov	r7, r0
 80053b2:	4688      	mov	r8, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	2600      	movs	r6, #0
 80053b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053bc:	f1b9 0901 	subs.w	r9, r9, #1
 80053c0:	d505      	bpl.n	80053ce <_fwalk_sglue+0x22>
 80053c2:	6824      	ldr	r4, [r4, #0]
 80053c4:	2c00      	cmp	r4, #0
 80053c6:	d1f7      	bne.n	80053b8 <_fwalk_sglue+0xc>
 80053c8:	4630      	mov	r0, r6
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d907      	bls.n	80053e4 <_fwalk_sglue+0x38>
 80053d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053d8:	3301      	adds	r3, #1
 80053da:	d003      	beq.n	80053e4 <_fwalk_sglue+0x38>
 80053dc:	4629      	mov	r1, r5
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	4306      	orrs	r6, r0
 80053e4:	3568      	adds	r5, #104	; 0x68
 80053e6:	e7e9      	b.n	80053bc <_fwalk_sglue+0x10>

080053e8 <siprintf>:
 80053e8:	b40e      	push	{r1, r2, r3}
 80053ea:	b500      	push	{lr}
 80053ec:	b09c      	sub	sp, #112	; 0x70
 80053ee:	ab1d      	add	r3, sp, #116	; 0x74
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9006      	str	r0, [sp, #24]
 80053f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f8:	4809      	ldr	r0, [pc, #36]	; (8005420 <siprintf+0x38>)
 80053fa:	9107      	str	r1, [sp, #28]
 80053fc:	9104      	str	r1, [sp, #16]
 80053fe:	4909      	ldr	r1, [pc, #36]	; (8005424 <siprintf+0x3c>)
 8005400:	f853 2b04 	ldr.w	r2, [r3], #4
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	a902      	add	r1, sp, #8
 800540c:	f001 fc20 	bl	8006c50 <_svfiprintf_r>
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	b01c      	add	sp, #112	; 0x70
 8005418:	f85d eb04 	ldr.w	lr, [sp], #4
 800541c:	b003      	add	sp, #12
 800541e:	4770      	bx	lr
 8005420:	200000e4 	.word	0x200000e4
 8005424:	ffff0208 	.word	0xffff0208

08005428 <__sread>:
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	f000 f86c 	bl	800550c <_read_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	bfab      	itete	ge
 8005438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800543a:	89a3      	ldrhlt	r3, [r4, #12]
 800543c:	181b      	addge	r3, r3, r0
 800543e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005442:	bfac      	ite	ge
 8005444:	6563      	strge	r3, [r4, #84]	; 0x54
 8005446:	81a3      	strhlt	r3, [r4, #12]
 8005448:	bd10      	pop	{r4, pc}

0800544a <__swrite>:
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	461f      	mov	r7, r3
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	05db      	lsls	r3, r3, #23
 8005454:	4605      	mov	r5, r0
 8005456:	460c      	mov	r4, r1
 8005458:	4616      	mov	r6, r2
 800545a:	d505      	bpl.n	8005468 <__swrite+0x1e>
 800545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005460:	2302      	movs	r3, #2
 8005462:	2200      	movs	r2, #0
 8005464:	f000 f840 	bl	80054e8 <_lseek_r>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800546e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	f000 b857 	b.w	8005530 <_write_r>

08005482 <__sseek>:
 8005482:	b510      	push	{r4, lr}
 8005484:	460c      	mov	r4, r1
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 f82d 	bl	80054e8 <_lseek_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	bf15      	itete	ne
 8005494:	6560      	strne	r0, [r4, #84]	; 0x54
 8005496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800549a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800549e:	81a3      	strheq	r3, [r4, #12]
 80054a0:	bf18      	it	ne
 80054a2:	81a3      	strhne	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__sclose>:
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 b80d 	b.w	80054c8 <_close_r>

080054ae <memset>:
 80054ae:	4402      	add	r2, r0
 80054b0:	4603      	mov	r3, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d100      	bne.n	80054b8 <memset+0xa>
 80054b6:	4770      	bx	lr
 80054b8:	f803 1b01 	strb.w	r1, [r3], #1
 80054bc:	e7f9      	b.n	80054b2 <memset+0x4>
	...

080054c0 <_localeconv_r>:
 80054c0:	4800      	ldr	r0, [pc, #0]	; (80054c4 <_localeconv_r+0x4>)
 80054c2:	4770      	bx	lr
 80054c4:	200001d8 	.word	0x200001d8

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_close_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fb ff6b 	bl	80013ae <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200004f4 	.word	0x200004f4

080054e8 <_lseek_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_lseek_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fb ff80 	bl	80013fc <_lseek>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_lseek_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_lseek_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200004f4 	.word	0x200004f4

0800550c <_read_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_read_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fb ff0e 	bl	800133c <_read>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_read_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_read_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200004f4 	.word	0x200004f4

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_write_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb ff19 	bl	8001376 <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200004f4 	.word	0x200004f4

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	200000e4 	.word	0x200000e4

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	; (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <__libc_init_array+0x44>)
 8005574:	f002 f894 	bl	80076a0 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	08007aa4 	.word	0x08007aa4
 800559c:	08007aa4 	.word	0x08007aa4
 80055a0:	08007aa4 	.word	0x08007aa4
 80055a4:	08007aa8 	.word	0x08007aa8

080055a8 <__retarget_lock_init_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__retarget_lock_acquire_recursive>:
 80055aa:	4770      	bx	lr

080055ac <__retarget_lock_release_recursive>:
 80055ac:	4770      	bx	lr

080055ae <quorem>:
 80055ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b2:	6903      	ldr	r3, [r0, #16]
 80055b4:	690c      	ldr	r4, [r1, #16]
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	4607      	mov	r7, r0
 80055ba:	db7e      	blt.n	80056ba <quorem+0x10c>
 80055bc:	3c01      	subs	r4, #1
 80055be:	f101 0814 	add.w	r8, r1, #20
 80055c2:	f100 0514 	add.w	r5, r0, #20
 80055c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d4:	3301      	adds	r3, #1
 80055d6:	429a      	cmp	r2, r3
 80055d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80055e4:	d331      	bcc.n	800564a <quorem+0x9c>
 80055e6:	f04f 0e00 	mov.w	lr, #0
 80055ea:	4640      	mov	r0, r8
 80055ec:	46ac      	mov	ip, r5
 80055ee:	46f2      	mov	sl, lr
 80055f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80055f4:	b293      	uxth	r3, r2
 80055f6:	fb06 e303 	mla	r3, r6, r3, lr
 80055fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055fe:	0c1a      	lsrs	r2, r3, #16
 8005600:	b29b      	uxth	r3, r3
 8005602:	ebaa 0303 	sub.w	r3, sl, r3
 8005606:	f8dc a000 	ldr.w	sl, [ip]
 800560a:	fa13 f38a 	uxtah	r3, r3, sl
 800560e:	fb06 220e 	mla	r2, r6, lr, r2
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	9b00      	ldr	r3, [sp, #0]
 8005616:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800561a:	b292      	uxth	r2, r2
 800561c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005624:	f8bd 3000 	ldrh.w	r3, [sp]
 8005628:	4581      	cmp	r9, r0
 800562a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800562e:	f84c 3b04 	str.w	r3, [ip], #4
 8005632:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005636:	d2db      	bcs.n	80055f0 <quorem+0x42>
 8005638:	f855 300b 	ldr.w	r3, [r5, fp]
 800563c:	b92b      	cbnz	r3, 800564a <quorem+0x9c>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	3b04      	subs	r3, #4
 8005642:	429d      	cmp	r5, r3
 8005644:	461a      	mov	r2, r3
 8005646:	d32c      	bcc.n	80056a2 <quorem+0xf4>
 8005648:	613c      	str	r4, [r7, #16]
 800564a:	4638      	mov	r0, r7
 800564c:	f001 f9a6 	bl	800699c <__mcmp>
 8005650:	2800      	cmp	r0, #0
 8005652:	db22      	blt.n	800569a <quorem+0xec>
 8005654:	3601      	adds	r6, #1
 8005656:	4629      	mov	r1, r5
 8005658:	2000      	movs	r0, #0
 800565a:	f858 2b04 	ldr.w	r2, [r8], #4
 800565e:	f8d1 c000 	ldr.w	ip, [r1]
 8005662:	b293      	uxth	r3, r2
 8005664:	1ac3      	subs	r3, r0, r3
 8005666:	0c12      	lsrs	r2, r2, #16
 8005668:	fa13 f38c 	uxtah	r3, r3, ip
 800566c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800567a:	45c1      	cmp	r9, r8
 800567c:	f841 3b04 	str.w	r3, [r1], #4
 8005680:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005684:	d2e9      	bcs.n	800565a <quorem+0xac>
 8005686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800568a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800568e:	b922      	cbnz	r2, 800569a <quorem+0xec>
 8005690:	3b04      	subs	r3, #4
 8005692:	429d      	cmp	r5, r3
 8005694:	461a      	mov	r2, r3
 8005696:	d30a      	bcc.n	80056ae <quorem+0x100>
 8005698:	613c      	str	r4, [r7, #16]
 800569a:	4630      	mov	r0, r6
 800569c:	b003      	add	sp, #12
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	3b04      	subs	r3, #4
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d1ce      	bne.n	8005648 <quorem+0x9a>
 80056aa:	3c01      	subs	r4, #1
 80056ac:	e7c9      	b.n	8005642 <quorem+0x94>
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	3b04      	subs	r3, #4
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d1f0      	bne.n	8005698 <quorem+0xea>
 80056b6:	3c01      	subs	r4, #1
 80056b8:	e7eb      	b.n	8005692 <quorem+0xe4>
 80056ba:	2000      	movs	r0, #0
 80056bc:	e7ee      	b.n	800569c <quorem+0xee>
	...

080056c0 <_dtoa_r>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	ed2d 8b04 	vpush	{d8-d9}
 80056c8:	69c5      	ldr	r5, [r0, #28]
 80056ca:	b093      	sub	sp, #76	; 0x4c
 80056cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056d0:	ec57 6b10 	vmov	r6, r7, d0
 80056d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056d8:	9107      	str	r1, [sp, #28]
 80056da:	4604      	mov	r4, r0
 80056dc:	920a      	str	r2, [sp, #40]	; 0x28
 80056de:	930d      	str	r3, [sp, #52]	; 0x34
 80056e0:	b975      	cbnz	r5, 8005700 <_dtoa_r+0x40>
 80056e2:	2010      	movs	r0, #16
 80056e4:	f000 fe2a 	bl	800633c <malloc>
 80056e8:	4602      	mov	r2, r0
 80056ea:	61e0      	str	r0, [r4, #28]
 80056ec:	b920      	cbnz	r0, 80056f8 <_dtoa_r+0x38>
 80056ee:	4bae      	ldr	r3, [pc, #696]	; (80059a8 <_dtoa_r+0x2e8>)
 80056f0:	21ef      	movs	r1, #239	; 0xef
 80056f2:	48ae      	ldr	r0, [pc, #696]	; (80059ac <_dtoa_r+0x2ec>)
 80056f4:	f001 fc90 	bl	8007018 <__assert_func>
 80056f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056fc:	6005      	str	r5, [r0, #0]
 80056fe:	60c5      	str	r5, [r0, #12]
 8005700:	69e3      	ldr	r3, [r4, #28]
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	b151      	cbz	r1, 800571c <_dtoa_r+0x5c>
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	604a      	str	r2, [r1, #4]
 800570a:	2301      	movs	r3, #1
 800570c:	4093      	lsls	r3, r2
 800570e:	608b      	str	r3, [r1, #8]
 8005710:	4620      	mov	r0, r4
 8005712:	f000 ff07 	bl	8006524 <_Bfree>
 8005716:	69e3      	ldr	r3, [r4, #28]
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	1e3b      	subs	r3, r7, #0
 800571e:	bfbb      	ittet	lt
 8005720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005724:	9303      	strlt	r3, [sp, #12]
 8005726:	2300      	movge	r3, #0
 8005728:	2201      	movlt	r2, #1
 800572a:	bfac      	ite	ge
 800572c:	f8c8 3000 	strge.w	r3, [r8]
 8005730:	f8c8 2000 	strlt.w	r2, [r8]
 8005734:	4b9e      	ldr	r3, [pc, #632]	; (80059b0 <_dtoa_r+0x2f0>)
 8005736:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800573a:	ea33 0308 	bics.w	r3, r3, r8
 800573e:	d11b      	bne.n	8005778 <_dtoa_r+0xb8>
 8005740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005742:	f242 730f 	movw	r3, #9999	; 0x270f
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800574c:	4333      	orrs	r3, r6
 800574e:	f000 8593 	beq.w	8006278 <_dtoa_r+0xbb8>
 8005752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005754:	b963      	cbnz	r3, 8005770 <_dtoa_r+0xb0>
 8005756:	4b97      	ldr	r3, [pc, #604]	; (80059b4 <_dtoa_r+0x2f4>)
 8005758:	e027      	b.n	80057aa <_dtoa_r+0xea>
 800575a:	4b97      	ldr	r3, [pc, #604]	; (80059b8 <_dtoa_r+0x2f8>)
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	9800      	ldr	r0, [sp, #0]
 8005766:	b013      	add	sp, #76	; 0x4c
 8005768:	ecbd 8b04 	vpop	{d8-d9}
 800576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005770:	4b90      	ldr	r3, [pc, #576]	; (80059b4 <_dtoa_r+0x2f4>)
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	3303      	adds	r3, #3
 8005776:	e7f3      	b.n	8005760 <_dtoa_r+0xa0>
 8005778:	ed9d 7b02 	vldr	d7, [sp, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	ec51 0b17 	vmov	r0, r1, d7
 8005782:	eeb0 8a47 	vmov.f32	s16, s14
 8005786:	eef0 8a67 	vmov.f32	s17, s15
 800578a:	2300      	movs	r3, #0
 800578c:	f7fb f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005790:	4681      	mov	r9, r0
 8005792:	b160      	cbz	r0, 80057ae <_dtoa_r+0xee>
 8005794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005796:	2301      	movs	r3, #1
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8568 	beq.w	8006272 <_dtoa_r+0xbb2>
 80057a2:	4b86      	ldr	r3, [pc, #536]	; (80059bc <_dtoa_r+0x2fc>)
 80057a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	e7da      	b.n	8005764 <_dtoa_r+0xa4>
 80057ae:	aa10      	add	r2, sp, #64	; 0x40
 80057b0:	a911      	add	r1, sp, #68	; 0x44
 80057b2:	4620      	mov	r0, r4
 80057b4:	eeb0 0a48 	vmov.f32	s0, s16
 80057b8:	eef0 0a68 	vmov.f32	s1, s17
 80057bc:	f001 f994 	bl	8006ae8 <__d2b>
 80057c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057c4:	4682      	mov	sl, r0
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	d07f      	beq.n	80058ca <_dtoa_r+0x20a>
 80057ca:	ee18 3a90 	vmov	r3, s17
 80057ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80057d6:	ec51 0b18 	vmov	r0, r1, d8
 80057da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057e6:	4619      	mov	r1, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	4b75      	ldr	r3, [pc, #468]	; (80059c0 <_dtoa_r+0x300>)
 80057ec:	f7fa fd4c 	bl	8000288 <__aeabi_dsub>
 80057f0:	a367      	add	r3, pc, #412	; (adr r3, 8005990 <_dtoa_r+0x2d0>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa feff 	bl	80005f8 <__aeabi_dmul>
 80057fa:	a367      	add	r3, pc, #412	; (adr r3, 8005998 <_dtoa_r+0x2d8>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fd44 	bl	800028c <__adddf3>
 8005804:	4606      	mov	r6, r0
 8005806:	4628      	mov	r0, r5
 8005808:	460f      	mov	r7, r1
 800580a:	f7fa fe8b 	bl	8000524 <__aeabi_i2d>
 800580e:	a364      	add	r3, pc, #400	; (adr r3, 80059a0 <_dtoa_r+0x2e0>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f7fa fef0 	bl	80005f8 <__aeabi_dmul>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4630      	mov	r0, r6
 800581e:	4639      	mov	r1, r7
 8005820:	f7fa fd34 	bl	800028c <__adddf3>
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	f7fb f996 	bl	8000b58 <__aeabi_d2iz>
 800582c:	2200      	movs	r2, #0
 800582e:	4683      	mov	fp, r0
 8005830:	2300      	movs	r3, #0
 8005832:	4630      	mov	r0, r6
 8005834:	4639      	mov	r1, r7
 8005836:	f7fb f951 	bl	8000adc <__aeabi_dcmplt>
 800583a:	b148      	cbz	r0, 8005850 <_dtoa_r+0x190>
 800583c:	4658      	mov	r0, fp
 800583e:	f7fa fe71 	bl	8000524 <__aeabi_i2d>
 8005842:	4632      	mov	r2, r6
 8005844:	463b      	mov	r3, r7
 8005846:	f7fb f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800584a:	b908      	cbnz	r0, 8005850 <_dtoa_r+0x190>
 800584c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005850:	f1bb 0f16 	cmp.w	fp, #22
 8005854:	d857      	bhi.n	8005906 <_dtoa_r+0x246>
 8005856:	4b5b      	ldr	r3, [pc, #364]	; (80059c4 <_dtoa_r+0x304>)
 8005858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	ec51 0b18 	vmov	r0, r1, d8
 8005864:	f7fb f93a 	bl	8000adc <__aeabi_dcmplt>
 8005868:	2800      	cmp	r0, #0
 800586a:	d04e      	beq.n	800590a <_dtoa_r+0x24a>
 800586c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005870:	2300      	movs	r3, #0
 8005872:	930c      	str	r3, [sp, #48]	; 0x30
 8005874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005876:	1b5b      	subs	r3, r3, r5
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	bf45      	ittet	mi
 800587c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005880:	9305      	strmi	r3, [sp, #20]
 8005882:	2300      	movpl	r3, #0
 8005884:	2300      	movmi	r3, #0
 8005886:	9206      	str	r2, [sp, #24]
 8005888:	bf54      	ite	pl
 800588a:	9305      	strpl	r3, [sp, #20]
 800588c:	9306      	strmi	r3, [sp, #24]
 800588e:	f1bb 0f00 	cmp.w	fp, #0
 8005892:	db3c      	blt.n	800590e <_dtoa_r+0x24e>
 8005894:	9b06      	ldr	r3, [sp, #24]
 8005896:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800589a:	445b      	add	r3, fp
 800589c:	9306      	str	r3, [sp, #24]
 800589e:	2300      	movs	r3, #0
 80058a0:	9308      	str	r3, [sp, #32]
 80058a2:	9b07      	ldr	r3, [sp, #28]
 80058a4:	2b09      	cmp	r3, #9
 80058a6:	d868      	bhi.n	800597a <_dtoa_r+0x2ba>
 80058a8:	2b05      	cmp	r3, #5
 80058aa:	bfc4      	itt	gt
 80058ac:	3b04      	subgt	r3, #4
 80058ae:	9307      	strgt	r3, [sp, #28]
 80058b0:	9b07      	ldr	r3, [sp, #28]
 80058b2:	f1a3 0302 	sub.w	r3, r3, #2
 80058b6:	bfcc      	ite	gt
 80058b8:	2500      	movgt	r5, #0
 80058ba:	2501      	movle	r5, #1
 80058bc:	2b03      	cmp	r3, #3
 80058be:	f200 8085 	bhi.w	80059cc <_dtoa_r+0x30c>
 80058c2:	e8df f003 	tbb	[pc, r3]
 80058c6:	3b2e      	.short	0x3b2e
 80058c8:	5839      	.short	0x5839
 80058ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058ce:	441d      	add	r5, r3
 80058d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	bfc1      	itttt	gt
 80058d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80058e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80058e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058e8:	bfd6      	itet	le
 80058ea:	f1c3 0320 	rsble	r3, r3, #32
 80058ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80058f2:	fa06 f003 	lslle.w	r0, r6, r3
 80058f6:	f7fa fe05 	bl	8000504 <__aeabi_ui2d>
 80058fa:	2201      	movs	r2, #1
 80058fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005900:	3d01      	subs	r5, #1
 8005902:	920e      	str	r2, [sp, #56]	; 0x38
 8005904:	e76f      	b.n	80057e6 <_dtoa_r+0x126>
 8005906:	2301      	movs	r3, #1
 8005908:	e7b3      	b.n	8005872 <_dtoa_r+0x1b2>
 800590a:	900c      	str	r0, [sp, #48]	; 0x30
 800590c:	e7b2      	b.n	8005874 <_dtoa_r+0x1b4>
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	eba3 030b 	sub.w	r3, r3, fp
 8005914:	9305      	str	r3, [sp, #20]
 8005916:	f1cb 0300 	rsb	r3, fp, #0
 800591a:	9308      	str	r3, [sp, #32]
 800591c:	2300      	movs	r3, #0
 800591e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005920:	e7bf      	b.n	80058a2 <_dtoa_r+0x1e2>
 8005922:	2300      	movs	r3, #0
 8005924:	9309      	str	r3, [sp, #36]	; 0x24
 8005926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	dc52      	bgt.n	80059d2 <_dtoa_r+0x312>
 800592c:	2301      	movs	r3, #1
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	9304      	str	r3, [sp, #16]
 8005932:	461a      	mov	r2, r3
 8005934:	920a      	str	r2, [sp, #40]	; 0x28
 8005936:	e00b      	b.n	8005950 <_dtoa_r+0x290>
 8005938:	2301      	movs	r3, #1
 800593a:	e7f3      	b.n	8005924 <_dtoa_r+0x264>
 800593c:	2300      	movs	r3, #0
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	445b      	add	r3, fp
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	3301      	adds	r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	bfb8      	it	lt
 800594e:	2301      	movlt	r3, #1
 8005950:	69e0      	ldr	r0, [r4, #28]
 8005952:	2100      	movs	r1, #0
 8005954:	2204      	movs	r2, #4
 8005956:	f102 0614 	add.w	r6, r2, #20
 800595a:	429e      	cmp	r6, r3
 800595c:	d93d      	bls.n	80059da <_dtoa_r+0x31a>
 800595e:	6041      	str	r1, [r0, #4]
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fd9f 	bl	80064a4 <_Balloc>
 8005966:	9000      	str	r0, [sp, #0]
 8005968:	2800      	cmp	r0, #0
 800596a:	d139      	bne.n	80059e0 <_dtoa_r+0x320>
 800596c:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <_dtoa_r+0x308>)
 800596e:	4602      	mov	r2, r0
 8005970:	f240 11af 	movw	r1, #431	; 0x1af
 8005974:	e6bd      	b.n	80056f2 <_dtoa_r+0x32>
 8005976:	2301      	movs	r3, #1
 8005978:	e7e1      	b.n	800593e <_dtoa_r+0x27e>
 800597a:	2501      	movs	r5, #1
 800597c:	2300      	movs	r3, #0
 800597e:	9307      	str	r3, [sp, #28]
 8005980:	9509      	str	r5, [sp, #36]	; 0x24
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	2312      	movs	r3, #18
 800598e:	e7d1      	b.n	8005934 <_dtoa_r+0x274>
 8005990:	636f4361 	.word	0x636f4361
 8005994:	3fd287a7 	.word	0x3fd287a7
 8005998:	8b60c8b3 	.word	0x8b60c8b3
 800599c:	3fc68a28 	.word	0x3fc68a28
 80059a0:	509f79fb 	.word	0x509f79fb
 80059a4:	3fd34413 	.word	0x3fd34413
 80059a8:	08007775 	.word	0x08007775
 80059ac:	0800778c 	.word	0x0800778c
 80059b0:	7ff00000 	.word	0x7ff00000
 80059b4:	08007771 	.word	0x08007771
 80059b8:	08007768 	.word	0x08007768
 80059bc:	08007745 	.word	0x08007745
 80059c0:	3ff80000 	.word	0x3ff80000
 80059c4:	08007878 	.word	0x08007878
 80059c8:	080077e4 	.word	0x080077e4
 80059cc:	2301      	movs	r3, #1
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	e7d7      	b.n	8005982 <_dtoa_r+0x2c2>
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	e7ba      	b.n	8005950 <_dtoa_r+0x290>
 80059da:	3101      	adds	r1, #1
 80059dc:	0052      	lsls	r2, r2, #1
 80059de:	e7ba      	b.n	8005956 <_dtoa_r+0x296>
 80059e0:	69e3      	ldr	r3, [r4, #28]
 80059e2:	9a00      	ldr	r2, [sp, #0]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	2b0e      	cmp	r3, #14
 80059ea:	f200 80a8 	bhi.w	8005b3e <_dtoa_r+0x47e>
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	f000 80a5 	beq.w	8005b3e <_dtoa_r+0x47e>
 80059f4:	f1bb 0f00 	cmp.w	fp, #0
 80059f8:	dd38      	ble.n	8005a6c <_dtoa_r+0x3ac>
 80059fa:	4bc0      	ldr	r3, [pc, #768]	; (8005cfc <_dtoa_r+0x63c>)
 80059fc:	f00b 020f 	and.w	r2, fp, #15
 8005a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005a08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005a10:	d019      	beq.n	8005a46 <_dtoa_r+0x386>
 8005a12:	4bbb      	ldr	r3, [pc, #748]	; (8005d00 <_dtoa_r+0x640>)
 8005a14:	ec51 0b18 	vmov	r0, r1, d8
 8005a18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a1c:	f7fa ff16 	bl	800084c <__aeabi_ddiv>
 8005a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a24:	f008 080f 	and.w	r8, r8, #15
 8005a28:	2503      	movs	r5, #3
 8005a2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005d00 <_dtoa_r+0x640>
 8005a2e:	f1b8 0f00 	cmp.w	r8, #0
 8005a32:	d10a      	bne.n	8005a4a <_dtoa_r+0x38a>
 8005a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a38:	4632      	mov	r2, r6
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	f7fa ff06 	bl	800084c <__aeabi_ddiv>
 8005a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a44:	e02b      	b.n	8005a9e <_dtoa_r+0x3de>
 8005a46:	2502      	movs	r5, #2
 8005a48:	e7ef      	b.n	8005a2a <_dtoa_r+0x36a>
 8005a4a:	f018 0f01 	tst.w	r8, #1
 8005a4e:	d008      	beq.n	8005a62 <_dtoa_r+0x3a2>
 8005a50:	4630      	mov	r0, r6
 8005a52:	4639      	mov	r1, r7
 8005a54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a58:	f7fa fdce 	bl	80005f8 <__aeabi_dmul>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a66:	f109 0908 	add.w	r9, r9, #8
 8005a6a:	e7e0      	b.n	8005a2e <_dtoa_r+0x36e>
 8005a6c:	f000 809f 	beq.w	8005bae <_dtoa_r+0x4ee>
 8005a70:	f1cb 0600 	rsb	r6, fp, #0
 8005a74:	4ba1      	ldr	r3, [pc, #644]	; (8005cfc <_dtoa_r+0x63c>)
 8005a76:	4fa2      	ldr	r7, [pc, #648]	; (8005d00 <_dtoa_r+0x640>)
 8005a78:	f006 020f 	and.w	r2, r6, #15
 8005a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	ec51 0b18 	vmov	r0, r1, d8
 8005a88:	f7fa fdb6 	bl	80005f8 <__aeabi_dmul>
 8005a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a90:	1136      	asrs	r6, r6, #4
 8005a92:	2300      	movs	r3, #0
 8005a94:	2502      	movs	r5, #2
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d17e      	bne.n	8005b98 <_dtoa_r+0x4d8>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1d0      	bne.n	8005a40 <_dtoa_r+0x380>
 8005a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aa0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8084 	beq.w	8005bb2 <_dtoa_r+0x4f2>
 8005aaa:	4b96      	ldr	r3, [pc, #600]	; (8005d04 <_dtoa_r+0x644>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fb f813 	bl	8000adc <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d07b      	beq.n	8005bb2 <_dtoa_r+0x4f2>
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d078      	beq.n	8005bb2 <_dtoa_r+0x4f2>
 8005ac0:	9b01      	ldr	r3, [sp, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	dd39      	ble.n	8005b3a <_dtoa_r+0x47a>
 8005ac6:	4b90      	ldr	r3, [pc, #576]	; (8005d08 <_dtoa_r+0x648>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4640      	mov	r0, r8
 8005acc:	4649      	mov	r1, r9
 8005ace:	f7fa fd93 	bl	80005f8 <__aeabi_dmul>
 8005ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad6:	9e01      	ldr	r6, [sp, #4]
 8005ad8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005adc:	3501      	adds	r5, #1
 8005ade:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7fa fd1e 	bl	8000524 <__aeabi_i2d>
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	4b86      	ldr	r3, [pc, #536]	; (8005d0c <_dtoa_r+0x64c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fbca 	bl	800028c <__adddf3>
 8005af8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d158      	bne.n	8005bb8 <_dtoa_r+0x4f8>
 8005b06:	4b82      	ldr	r3, [pc, #520]	; (8005d10 <_dtoa_r+0x650>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	f7fa fbbb 	bl	8000288 <__aeabi_dsub>
 8005b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b16:	4680      	mov	r8, r0
 8005b18:	4689      	mov	r9, r1
 8005b1a:	f7fa fffd 	bl	8000b18 <__aeabi_dcmpgt>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f040 8296 	bne.w	8006050 <_dtoa_r+0x990>
 8005b24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b28:	4640      	mov	r0, r8
 8005b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa ffd4 	bl	8000adc <__aeabi_dcmplt>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f040 8289 	bne.w	800604c <_dtoa_r+0x98c>
 8005b3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f2c0 814e 	blt.w	8005de2 <_dtoa_r+0x722>
 8005b46:	f1bb 0f0e 	cmp.w	fp, #14
 8005b4a:	f300 814a 	bgt.w	8005de2 <_dtoa_r+0x722>
 8005b4e:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <_dtoa_r+0x63c>)
 8005b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f280 80dc 	bge.w	8005d18 <_dtoa_r+0x658>
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f300 80d8 	bgt.w	8005d18 <_dtoa_r+0x658>
 8005b68:	f040 826f 	bne.w	800604a <_dtoa_r+0x98a>
 8005b6c:	4b68      	ldr	r3, [pc, #416]	; (8005d10 <_dtoa_r+0x650>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4640      	mov	r0, r8
 8005b72:	4649      	mov	r1, r9
 8005b74:	f7fa fd40 	bl	80005f8 <__aeabi_dmul>
 8005b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b7c:	f7fa ffc2 	bl	8000b04 <__aeabi_dcmpge>
 8005b80:	9e04      	ldr	r6, [sp, #16]
 8005b82:	4637      	mov	r7, r6
 8005b84:	2800      	cmp	r0, #0
 8005b86:	f040 8245 	bne.w	8006014 <_dtoa_r+0x954>
 8005b8a:	9d00      	ldr	r5, [sp, #0]
 8005b8c:	2331      	movs	r3, #49	; 0x31
 8005b8e:	f805 3b01 	strb.w	r3, [r5], #1
 8005b92:	f10b 0b01 	add.w	fp, fp, #1
 8005b96:	e241      	b.n	800601c <_dtoa_r+0x95c>
 8005b98:	07f2      	lsls	r2, r6, #31
 8005b9a:	d505      	bpl.n	8005ba8 <_dtoa_r+0x4e8>
 8005b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba0:	f7fa fd2a 	bl	80005f8 <__aeabi_dmul>
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	1076      	asrs	r6, r6, #1
 8005baa:	3708      	adds	r7, #8
 8005bac:	e773      	b.n	8005a96 <_dtoa_r+0x3d6>
 8005bae:	2502      	movs	r5, #2
 8005bb0:	e775      	b.n	8005a9e <_dtoa_r+0x3de>
 8005bb2:	9e04      	ldr	r6, [sp, #16]
 8005bb4:	465f      	mov	r7, fp
 8005bb6:	e792      	b.n	8005ade <_dtoa_r+0x41e>
 8005bb8:	9900      	ldr	r1, [sp, #0]
 8005bba:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <_dtoa_r+0x63c>)
 8005bbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bc0:	4431      	add	r1, r6
 8005bc2:	9102      	str	r1, [sp, #8]
 8005bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bc6:	eeb0 9a47 	vmov.f32	s18, s14
 8005bca:	eef0 9a67 	vmov.f32	s19, s15
 8005bce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bd6:	2900      	cmp	r1, #0
 8005bd8:	d044      	beq.n	8005c64 <_dtoa_r+0x5a4>
 8005bda:	494e      	ldr	r1, [pc, #312]	; (8005d14 <_dtoa_r+0x654>)
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f7fa fe35 	bl	800084c <__aeabi_ddiv>
 8005be2:	ec53 2b19 	vmov	r2, r3, d9
 8005be6:	f7fa fb4f 	bl	8000288 <__aeabi_dsub>
 8005bea:	9d00      	ldr	r5, [sp, #0]
 8005bec:	ec41 0b19 	vmov	d9, r0, r1
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f7fa ffb0 	bl	8000b58 <__aeabi_d2iz>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	f7fa fc93 	bl	8000524 <__aeabi_i2d>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa fb3f 	bl	8000288 <__aeabi_dsub>
 8005c0a:	3630      	adds	r6, #48	; 0x30
 8005c0c:	f805 6b01 	strb.w	r6, [r5], #1
 8005c10:	ec53 2b19 	vmov	r2, r3, d9
 8005c14:	4680      	mov	r8, r0
 8005c16:	4689      	mov	r9, r1
 8005c18:	f7fa ff60 	bl	8000adc <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d164      	bne.n	8005cea <_dtoa_r+0x62a>
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	4937      	ldr	r1, [pc, #220]	; (8005d04 <_dtoa_r+0x644>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7fa fb2e 	bl	8000288 <__aeabi_dsub>
 8005c2c:	ec53 2b19 	vmov	r2, r3, d9
 8005c30:	f7fa ff54 	bl	8000adc <__aeabi_dcmplt>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f040 80b6 	bne.w	8005da6 <_dtoa_r+0x6e6>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	429d      	cmp	r5, r3
 8005c3e:	f43f af7c 	beq.w	8005b3a <_dtoa_r+0x47a>
 8005c42:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <_dtoa_r+0x648>)
 8005c44:	ec51 0b19 	vmov	r0, r1, d9
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <_dtoa_r+0x648>)
 8005c50:	ec41 0b19 	vmov	d9, r0, r1
 8005c54:	2200      	movs	r2, #0
 8005c56:	4640      	mov	r0, r8
 8005c58:	4649      	mov	r1, r9
 8005c5a:	f7fa fccd 	bl	80005f8 <__aeabi_dmul>
 8005c5e:	4680      	mov	r8, r0
 8005c60:	4689      	mov	r9, r1
 8005c62:	e7c5      	b.n	8005bf0 <_dtoa_r+0x530>
 8005c64:	ec51 0b17 	vmov	r0, r1, d7
 8005c68:	f7fa fcc6 	bl	80005f8 <__aeabi_dmul>
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	9d00      	ldr	r5, [sp, #0]
 8005c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c72:	ec41 0b19 	vmov	d9, r0, r1
 8005c76:	4649      	mov	r1, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	f7fa ff6d 	bl	8000b58 <__aeabi_d2iz>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	f7fa fc50 	bl	8000524 <__aeabi_i2d>
 8005c84:	3630      	adds	r6, #48	; 0x30
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	f805 6b01 	strb.w	r6, [r5], #1
 8005c96:	9b02      	ldr	r3, [sp, #8]
 8005c98:	429d      	cmp	r5, r3
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	d124      	bne.n	8005cee <_dtoa_r+0x62e>
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <_dtoa_r+0x654>)
 8005ca6:	ec51 0b19 	vmov	r0, r1, d9
 8005caa:	f7fa faef 	bl	800028c <__adddf3>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	f7fa ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d173      	bne.n	8005da6 <_dtoa_r+0x6e6>
 8005cbe:	ec53 2b19 	vmov	r2, r3, d9
 8005cc2:	4914      	ldr	r1, [pc, #80]	; (8005d14 <_dtoa_r+0x654>)
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f7fa fadf 	bl	8000288 <__aeabi_dsub>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	f7fa ff03 	bl	8000adc <__aeabi_dcmplt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f43f af2f 	beq.w	8005b3a <_dtoa_r+0x47a>
 8005cdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005cde:	1e6b      	subs	r3, r5, #1
 8005ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ce6:	2b30      	cmp	r3, #48	; 0x30
 8005ce8:	d0f8      	beq.n	8005cdc <_dtoa_r+0x61c>
 8005cea:	46bb      	mov	fp, r7
 8005cec:	e04a      	b.n	8005d84 <_dtoa_r+0x6c4>
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <_dtoa_r+0x648>)
 8005cf0:	f7fa fc82 	bl	80005f8 <__aeabi_dmul>
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	4689      	mov	r9, r1
 8005cf8:	e7bd      	b.n	8005c76 <_dtoa_r+0x5b6>
 8005cfa:	bf00      	nop
 8005cfc:	08007878 	.word	0x08007878
 8005d00:	08007850 	.word	0x08007850
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	40240000 	.word	0x40240000
 8005d0c:	401c0000 	.word	0x401c0000
 8005d10:	40140000 	.word	0x40140000
 8005d14:	3fe00000 	.word	0x3fe00000
 8005d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d1c:	9d00      	ldr	r5, [sp, #0]
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	4630      	mov	r0, r6
 8005d24:	4639      	mov	r1, r7
 8005d26:	f7fa fd91 	bl	800084c <__aeabi_ddiv>
 8005d2a:	f7fa ff15 	bl	8000b58 <__aeabi_d2iz>
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	f7fa fbf8 	bl	8000524 <__aeabi_i2d>
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	f7fa fc5e 	bl	80005f8 <__aeabi_dmul>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4630      	mov	r0, r6
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa faa0 	bl	8000288 <__aeabi_dsub>
 8005d48:	9e01      	ldr	r6, [sp, #4]
 8005d4a:	9f04      	ldr	r7, [sp, #16]
 8005d4c:	3630      	adds	r6, #48	; 0x30
 8005d4e:	f805 6b01 	strb.w	r6, [r5], #1
 8005d52:	9e00      	ldr	r6, [sp, #0]
 8005d54:	1bae      	subs	r6, r5, r6
 8005d56:	42b7      	cmp	r7, r6
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	d134      	bne.n	8005dc8 <_dtoa_r+0x708>
 8005d5e:	f7fa fa95 	bl	800028c <__adddf3>
 8005d62:	4642      	mov	r2, r8
 8005d64:	464b      	mov	r3, r9
 8005d66:	4606      	mov	r6, r0
 8005d68:	460f      	mov	r7, r1
 8005d6a:	f7fa fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8005d6e:	b9c8      	cbnz	r0, 8005da4 <_dtoa_r+0x6e4>
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7c:	b110      	cbz	r0, 8005d84 <_dtoa_r+0x6c4>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	07db      	lsls	r3, r3, #31
 8005d82:	d40f      	bmi.n	8005da4 <_dtoa_r+0x6e4>
 8005d84:	4651      	mov	r1, sl
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 fbcc 	bl	8006524 <_Bfree>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d90:	702b      	strb	r3, [r5, #0]
 8005d92:	f10b 0301 	add.w	r3, fp, #1
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f43f ace2 	beq.w	8005764 <_dtoa_r+0xa4>
 8005da0:	601d      	str	r5, [r3, #0]
 8005da2:	e4df      	b.n	8005764 <_dtoa_r+0xa4>
 8005da4:	465f      	mov	r7, fp
 8005da6:	462b      	mov	r3, r5
 8005da8:	461d      	mov	r5, r3
 8005daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dae:	2a39      	cmp	r2, #57	; 0x39
 8005db0:	d106      	bne.n	8005dc0 <_dtoa_r+0x700>
 8005db2:	9a00      	ldr	r2, [sp, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1f7      	bne.n	8005da8 <_dtoa_r+0x6e8>
 8005db8:	9900      	ldr	r1, [sp, #0]
 8005dba:	2230      	movs	r2, #48	; 0x30
 8005dbc:	3701      	adds	r7, #1
 8005dbe:	700a      	strb	r2, [r1, #0]
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e790      	b.n	8005cea <_dtoa_r+0x62a>
 8005dc8:	4ba3      	ldr	r3, [pc, #652]	; (8006058 <_dtoa_r+0x998>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f7fa fc14 	bl	80005f8 <__aeabi_dmul>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	f7fa fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d09e      	beq.n	8005d1e <_dtoa_r+0x65e>
 8005de0:	e7d0      	b.n	8005d84 <_dtoa_r+0x6c4>
 8005de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	f000 80ca 	beq.w	8005f7e <_dtoa_r+0x8be>
 8005dea:	9a07      	ldr	r2, [sp, #28]
 8005dec:	2a01      	cmp	r2, #1
 8005dee:	f300 80ad 	bgt.w	8005f4c <_dtoa_r+0x88c>
 8005df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	f000 80a5 	beq.w	8005f44 <_dtoa_r+0x884>
 8005dfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dfe:	9e08      	ldr	r6, [sp, #32]
 8005e00:	9d05      	ldr	r5, [sp, #20]
 8005e02:	9a05      	ldr	r2, [sp, #20]
 8005e04:	441a      	add	r2, r3
 8005e06:	9205      	str	r2, [sp, #20]
 8005e08:	9a06      	ldr	r2, [sp, #24]
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	441a      	add	r2, r3
 8005e0e:	4620      	mov	r0, r4
 8005e10:	9206      	str	r2, [sp, #24]
 8005e12:	f000 fc3d 	bl	8006690 <__i2b>
 8005e16:	4607      	mov	r7, r0
 8005e18:	b165      	cbz	r5, 8005e34 <_dtoa_r+0x774>
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dd09      	ble.n	8005e34 <_dtoa_r+0x774>
 8005e20:	42ab      	cmp	r3, r5
 8005e22:	9a05      	ldr	r2, [sp, #20]
 8005e24:	bfa8      	it	ge
 8005e26:	462b      	movge	r3, r5
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	9205      	str	r2, [sp, #20]
 8005e2c:	9a06      	ldr	r2, [sp, #24]
 8005e2e:	1aed      	subs	r5, r5, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	9306      	str	r3, [sp, #24]
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	b1f3      	cbz	r3, 8005e76 <_dtoa_r+0x7b6>
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80a3 	beq.w	8005f86 <_dtoa_r+0x8c6>
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	dd10      	ble.n	8005e66 <_dtoa_r+0x7a6>
 8005e44:	4639      	mov	r1, r7
 8005e46:	4632      	mov	r2, r6
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fce1 	bl	8006810 <__pow5mult>
 8005e4e:	4652      	mov	r2, sl
 8005e50:	4601      	mov	r1, r0
 8005e52:	4607      	mov	r7, r0
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fc31 	bl	80066bc <__multiply>
 8005e5a:	4651      	mov	r1, sl
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fb60 	bl	8006524 <_Bfree>
 8005e64:	46c2      	mov	sl, r8
 8005e66:	9b08      	ldr	r3, [sp, #32]
 8005e68:	1b9a      	subs	r2, r3, r6
 8005e6a:	d004      	beq.n	8005e76 <_dtoa_r+0x7b6>
 8005e6c:	4651      	mov	r1, sl
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 fcce 	bl	8006810 <__pow5mult>
 8005e74:	4682      	mov	sl, r0
 8005e76:	2101      	movs	r1, #1
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fc09 	bl	8006690 <__i2b>
 8005e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	4606      	mov	r6, r0
 8005e84:	f340 8081 	ble.w	8005f8a <_dtoa_r+0x8ca>
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fcbf 	bl	8006810 <__pow5mult>
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	4606      	mov	r6, r0
 8005e98:	dd7a      	ble.n	8005f90 <_dtoa_r+0x8d0>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	6933      	ldr	r3, [r6, #16]
 8005ea0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ea4:	6918      	ldr	r0, [r3, #16]
 8005ea6:	f000 fba5 	bl	80065f4 <__hi0bits>
 8005eaa:	f1c0 0020 	rsb	r0, r0, #32
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	4418      	add	r0, r3
 8005eb2:	f010 001f 	ands.w	r0, r0, #31
 8005eb6:	f000 8094 	beq.w	8005fe2 <_dtoa_r+0x922>
 8005eba:	f1c0 0320 	rsb	r3, r0, #32
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	f340 8085 	ble.w	8005fce <_dtoa_r+0x90e>
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	f1c0 001c 	rsb	r0, r0, #28
 8005eca:	4403      	add	r3, r0
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	4403      	add	r3, r0
 8005ed2:	4405      	add	r5, r0
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	9b05      	ldr	r3, [sp, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dd05      	ble.n	8005ee8 <_dtoa_r+0x828>
 8005edc:	4651      	mov	r1, sl
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fcef 	bl	80068c4 <__lshift>
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dd05      	ble.n	8005efa <_dtoa_r+0x83a>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 fce6 	bl	80068c4 <__lshift>
 8005ef8:	4606      	mov	r6, r0
 8005efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d072      	beq.n	8005fe6 <_dtoa_r+0x926>
 8005f00:	4631      	mov	r1, r6
 8005f02:	4650      	mov	r0, sl
 8005f04:	f000 fd4a 	bl	800699c <__mcmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	da6c      	bge.n	8005fe6 <_dtoa_r+0x926>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4651      	mov	r1, sl
 8005f10:	220a      	movs	r2, #10
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fb28 	bl	8006568 <__multadd>
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f1e:	4682      	mov	sl, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 81b0 	beq.w	8006286 <_dtoa_r+0xbc6>
 8005f26:	2300      	movs	r3, #0
 8005f28:	4639      	mov	r1, r7
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f000 fb1b 	bl	8006568 <__multadd>
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	4607      	mov	r7, r0
 8005f38:	f300 8096 	bgt.w	8006068 <_dtoa_r+0x9a8>
 8005f3c:	9b07      	ldr	r3, [sp, #28]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	dc59      	bgt.n	8005ff6 <_dtoa_r+0x936>
 8005f42:	e091      	b.n	8006068 <_dtoa_r+0x9a8>
 8005f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f4a:	e758      	b.n	8005dfe <_dtoa_r+0x73e>
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	1e5e      	subs	r6, r3, #1
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	42b3      	cmp	r3, r6
 8005f54:	bfbf      	itttt	lt
 8005f56:	9b08      	ldrlt	r3, [sp, #32]
 8005f58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f5a:	9608      	strlt	r6, [sp, #32]
 8005f5c:	1af3      	sublt	r3, r6, r3
 8005f5e:	bfb4      	ite	lt
 8005f60:	18d2      	addlt	r2, r2, r3
 8005f62:	1b9e      	subge	r6, r3, r6
 8005f64:	9b04      	ldr	r3, [sp, #16]
 8005f66:	bfbc      	itt	lt
 8005f68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f6a:	2600      	movlt	r6, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb7      	itett	lt
 8005f70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f78:	1a9d      	sublt	r5, r3, r2
 8005f7a:	2300      	movlt	r3, #0
 8005f7c:	e741      	b.n	8005e02 <_dtoa_r+0x742>
 8005f7e:	9e08      	ldr	r6, [sp, #32]
 8005f80:	9d05      	ldr	r5, [sp, #20]
 8005f82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f84:	e748      	b.n	8005e18 <_dtoa_r+0x758>
 8005f86:	9a08      	ldr	r2, [sp, #32]
 8005f88:	e770      	b.n	8005e6c <_dtoa_r+0x7ac>
 8005f8a:	9b07      	ldr	r3, [sp, #28]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	dc19      	bgt.n	8005fc4 <_dtoa_r+0x904>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	b9bb      	cbnz	r3, 8005fc4 <_dtoa_r+0x904>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f9a:	b99b      	cbnz	r3, 8005fc4 <_dtoa_r+0x904>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	0d1b      	lsrs	r3, r3, #20
 8005fa4:	051b      	lsls	r3, r3, #20
 8005fa6:	b183      	cbz	r3, 8005fca <_dtoa_r+0x90a>
 8005fa8:	9b05      	ldr	r3, [sp, #20]
 8005faa:	3301      	adds	r3, #1
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	9b06      	ldr	r3, [sp, #24]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	f04f 0801 	mov.w	r8, #1
 8005fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f af6f 	bne.w	8005e9e <_dtoa_r+0x7de>
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	e774      	b.n	8005eae <_dtoa_r+0x7ee>
 8005fc4:	f04f 0800 	mov.w	r8, #0
 8005fc8:	e7f6      	b.n	8005fb8 <_dtoa_r+0x8f8>
 8005fca:	4698      	mov	r8, r3
 8005fcc:	e7f4      	b.n	8005fb8 <_dtoa_r+0x8f8>
 8005fce:	d082      	beq.n	8005ed6 <_dtoa_r+0x816>
 8005fd0:	9a05      	ldr	r2, [sp, #20]
 8005fd2:	331c      	adds	r3, #28
 8005fd4:	441a      	add	r2, r3
 8005fd6:	9205      	str	r2, [sp, #20]
 8005fd8:	9a06      	ldr	r2, [sp, #24]
 8005fda:	441a      	add	r2, r3
 8005fdc:	441d      	add	r5, r3
 8005fde:	9206      	str	r2, [sp, #24]
 8005fe0:	e779      	b.n	8005ed6 <_dtoa_r+0x816>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	e7f4      	b.n	8005fd0 <_dtoa_r+0x910>
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc37      	bgt.n	800605c <_dtoa_r+0x99c>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	dd34      	ble.n	800605c <_dtoa_r+0x99c>
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	b963      	cbnz	r3, 8006014 <_dtoa_r+0x954>
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	2205      	movs	r2, #5
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 fab2 	bl	8006568 <__multadd>
 8006004:	4601      	mov	r1, r0
 8006006:	4606      	mov	r6, r0
 8006008:	4650      	mov	r0, sl
 800600a:	f000 fcc7 	bl	800699c <__mcmp>
 800600e:	2800      	cmp	r0, #0
 8006010:	f73f adbb 	bgt.w	8005b8a <_dtoa_r+0x4ca>
 8006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006016:	9d00      	ldr	r5, [sp, #0]
 8006018:	ea6f 0b03 	mvn.w	fp, r3
 800601c:	f04f 0800 	mov.w	r8, #0
 8006020:	4631      	mov	r1, r6
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fa7e 	bl	8006524 <_Bfree>
 8006028:	2f00      	cmp	r7, #0
 800602a:	f43f aeab 	beq.w	8005d84 <_dtoa_r+0x6c4>
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	d005      	beq.n	8006040 <_dtoa_r+0x980>
 8006034:	45b8      	cmp	r8, r7
 8006036:	d003      	beq.n	8006040 <_dtoa_r+0x980>
 8006038:	4641      	mov	r1, r8
 800603a:	4620      	mov	r0, r4
 800603c:	f000 fa72 	bl	8006524 <_Bfree>
 8006040:	4639      	mov	r1, r7
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fa6e 	bl	8006524 <_Bfree>
 8006048:	e69c      	b.n	8005d84 <_dtoa_r+0x6c4>
 800604a:	2600      	movs	r6, #0
 800604c:	4637      	mov	r7, r6
 800604e:	e7e1      	b.n	8006014 <_dtoa_r+0x954>
 8006050:	46bb      	mov	fp, r7
 8006052:	4637      	mov	r7, r6
 8006054:	e599      	b.n	8005b8a <_dtoa_r+0x4ca>
 8006056:	bf00      	nop
 8006058:	40240000 	.word	0x40240000
 800605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80c8 	beq.w	80061f4 <_dtoa_r+0xb34>
 8006064:	9b04      	ldr	r3, [sp, #16]
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	2d00      	cmp	r5, #0
 800606a:	dd05      	ble.n	8006078 <_dtoa_r+0x9b8>
 800606c:	4639      	mov	r1, r7
 800606e:	462a      	mov	r2, r5
 8006070:	4620      	mov	r0, r4
 8006072:	f000 fc27 	bl	80068c4 <__lshift>
 8006076:	4607      	mov	r7, r0
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	d05b      	beq.n	8006136 <_dtoa_r+0xa76>
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fa0f 	bl	80064a4 <_Balloc>
 8006086:	4605      	mov	r5, r0
 8006088:	b928      	cbnz	r0, 8006096 <_dtoa_r+0x9d6>
 800608a:	4b83      	ldr	r3, [pc, #524]	; (8006298 <_dtoa_r+0xbd8>)
 800608c:	4602      	mov	r2, r0
 800608e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006092:	f7ff bb2e 	b.w	80056f2 <_dtoa_r+0x32>
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	3202      	adds	r2, #2
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	f107 010c 	add.w	r1, r7, #12
 80060a0:	300c      	adds	r0, #12
 80060a2:	f000 ffab 	bl	8006ffc <memcpy>
 80060a6:	2201      	movs	r2, #1
 80060a8:	4629      	mov	r1, r5
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fc0a 	bl	80068c4 <__lshift>
 80060b0:	9b00      	ldr	r3, [sp, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ba:	4413      	add	r3, r2
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	9b02      	ldr	r3, [sp, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	46b8      	mov	r8, r7
 80060c6:	9306      	str	r3, [sp, #24]
 80060c8:	4607      	mov	r7, r0
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	4631      	mov	r1, r6
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4650      	mov	r0, sl
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f7ff fa6b 	bl	80055ae <quorem>
 80060d8:	4641      	mov	r1, r8
 80060da:	9002      	str	r0, [sp, #8]
 80060dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060e0:	4650      	mov	r0, sl
 80060e2:	f000 fc5b 	bl	800699c <__mcmp>
 80060e6:	463a      	mov	r2, r7
 80060e8:	9005      	str	r0, [sp, #20]
 80060ea:	4631      	mov	r1, r6
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fc71 	bl	80069d4 <__mdiff>
 80060f2:	68c2      	ldr	r2, [r0, #12]
 80060f4:	4605      	mov	r5, r0
 80060f6:	bb02      	cbnz	r2, 800613a <_dtoa_r+0xa7a>
 80060f8:	4601      	mov	r1, r0
 80060fa:	4650      	mov	r0, sl
 80060fc:	f000 fc4e 	bl	800699c <__mcmp>
 8006100:	4602      	mov	r2, r0
 8006102:	4629      	mov	r1, r5
 8006104:	4620      	mov	r0, r4
 8006106:	9209      	str	r2, [sp, #36]	; 0x24
 8006108:	f000 fa0c 	bl	8006524 <_Bfree>
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006110:	9d04      	ldr	r5, [sp, #16]
 8006112:	ea43 0102 	orr.w	r1, r3, r2
 8006116:	9b06      	ldr	r3, [sp, #24]
 8006118:	4319      	orrs	r1, r3
 800611a:	d110      	bne.n	800613e <_dtoa_r+0xa7e>
 800611c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006120:	d029      	beq.n	8006176 <_dtoa_r+0xab6>
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	dd02      	ble.n	800612e <_dtoa_r+0xa6e>
 8006128:	9b02      	ldr	r3, [sp, #8]
 800612a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	f883 9000 	strb.w	r9, [r3]
 8006134:	e774      	b.n	8006020 <_dtoa_r+0x960>
 8006136:	4638      	mov	r0, r7
 8006138:	e7ba      	b.n	80060b0 <_dtoa_r+0x9f0>
 800613a:	2201      	movs	r2, #1
 800613c:	e7e1      	b.n	8006102 <_dtoa_r+0xa42>
 800613e:	9b05      	ldr	r3, [sp, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	db04      	blt.n	800614e <_dtoa_r+0xa8e>
 8006144:	9907      	ldr	r1, [sp, #28]
 8006146:	430b      	orrs	r3, r1
 8006148:	9906      	ldr	r1, [sp, #24]
 800614a:	430b      	orrs	r3, r1
 800614c:	d120      	bne.n	8006190 <_dtoa_r+0xad0>
 800614e:	2a00      	cmp	r2, #0
 8006150:	dded      	ble.n	800612e <_dtoa_r+0xa6e>
 8006152:	4651      	mov	r1, sl
 8006154:	2201      	movs	r2, #1
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fbb4 	bl	80068c4 <__lshift>
 800615c:	4631      	mov	r1, r6
 800615e:	4682      	mov	sl, r0
 8006160:	f000 fc1c 	bl	800699c <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	dc03      	bgt.n	8006170 <_dtoa_r+0xab0>
 8006168:	d1e1      	bne.n	800612e <_dtoa_r+0xa6e>
 800616a:	f019 0f01 	tst.w	r9, #1
 800616e:	d0de      	beq.n	800612e <_dtoa_r+0xa6e>
 8006170:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006174:	d1d8      	bne.n	8006128 <_dtoa_r+0xa68>
 8006176:	9a01      	ldr	r2, [sp, #4]
 8006178:	2339      	movs	r3, #57	; 0x39
 800617a:	7013      	strb	r3, [r2, #0]
 800617c:	462b      	mov	r3, r5
 800617e:	461d      	mov	r5, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006186:	2a39      	cmp	r2, #57	; 0x39
 8006188:	d06c      	beq.n	8006264 <_dtoa_r+0xba4>
 800618a:	3201      	adds	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e747      	b.n	8006020 <_dtoa_r+0x960>
 8006190:	2a00      	cmp	r2, #0
 8006192:	dd07      	ble.n	80061a4 <_dtoa_r+0xae4>
 8006194:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006198:	d0ed      	beq.n	8006176 <_dtoa_r+0xab6>
 800619a:	9a01      	ldr	r2, [sp, #4]
 800619c:	f109 0301 	add.w	r3, r9, #1
 80061a0:	7013      	strb	r3, [r2, #0]
 80061a2:	e73d      	b.n	8006020 <_dtoa_r+0x960>
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	9a08      	ldr	r2, [sp, #32]
 80061a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d043      	beq.n	8006238 <_dtoa_r+0xb78>
 80061b0:	4651      	mov	r1, sl
 80061b2:	2300      	movs	r3, #0
 80061b4:	220a      	movs	r2, #10
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f9d6 	bl	8006568 <__multadd>
 80061bc:	45b8      	cmp	r8, r7
 80061be:	4682      	mov	sl, r0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	f04f 020a 	mov.w	r2, #10
 80061c8:	4641      	mov	r1, r8
 80061ca:	4620      	mov	r0, r4
 80061cc:	d107      	bne.n	80061de <_dtoa_r+0xb1e>
 80061ce:	f000 f9cb 	bl	8006568 <__multadd>
 80061d2:	4680      	mov	r8, r0
 80061d4:	4607      	mov	r7, r0
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	3301      	adds	r3, #1
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	e775      	b.n	80060ca <_dtoa_r+0xa0a>
 80061de:	f000 f9c3 	bl	8006568 <__multadd>
 80061e2:	4639      	mov	r1, r7
 80061e4:	4680      	mov	r8, r0
 80061e6:	2300      	movs	r3, #0
 80061e8:	220a      	movs	r2, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f9bc 	bl	8006568 <__multadd>
 80061f0:	4607      	mov	r7, r0
 80061f2:	e7f0      	b.n	80061d6 <_dtoa_r+0xb16>
 80061f4:	9b04      	ldr	r3, [sp, #16]
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	9d00      	ldr	r5, [sp, #0]
 80061fa:	4631      	mov	r1, r6
 80061fc:	4650      	mov	r0, sl
 80061fe:	f7ff f9d6 	bl	80055ae <quorem>
 8006202:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006206:	9b00      	ldr	r3, [sp, #0]
 8006208:	f805 9b01 	strb.w	r9, [r5], #1
 800620c:	1aea      	subs	r2, r5, r3
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	4293      	cmp	r3, r2
 8006212:	dd07      	ble.n	8006224 <_dtoa_r+0xb64>
 8006214:	4651      	mov	r1, sl
 8006216:	2300      	movs	r3, #0
 8006218:	220a      	movs	r2, #10
 800621a:	4620      	mov	r0, r4
 800621c:	f000 f9a4 	bl	8006568 <__multadd>
 8006220:	4682      	mov	sl, r0
 8006222:	e7ea      	b.n	80061fa <_dtoa_r+0xb3a>
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	bfc8      	it	gt
 800622a:	461d      	movgt	r5, r3
 800622c:	9b00      	ldr	r3, [sp, #0]
 800622e:	bfd8      	it	le
 8006230:	2501      	movle	r5, #1
 8006232:	441d      	add	r5, r3
 8006234:	f04f 0800 	mov.w	r8, #0
 8006238:	4651      	mov	r1, sl
 800623a:	2201      	movs	r2, #1
 800623c:	4620      	mov	r0, r4
 800623e:	f000 fb41 	bl	80068c4 <__lshift>
 8006242:	4631      	mov	r1, r6
 8006244:	4682      	mov	sl, r0
 8006246:	f000 fba9 	bl	800699c <__mcmp>
 800624a:	2800      	cmp	r0, #0
 800624c:	dc96      	bgt.n	800617c <_dtoa_r+0xabc>
 800624e:	d102      	bne.n	8006256 <_dtoa_r+0xb96>
 8006250:	f019 0f01 	tst.w	r9, #1
 8006254:	d192      	bne.n	800617c <_dtoa_r+0xabc>
 8006256:	462b      	mov	r3, r5
 8006258:	461d      	mov	r5, r3
 800625a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800625e:	2a30      	cmp	r2, #48	; 0x30
 8006260:	d0fa      	beq.n	8006258 <_dtoa_r+0xb98>
 8006262:	e6dd      	b.n	8006020 <_dtoa_r+0x960>
 8006264:	9a00      	ldr	r2, [sp, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d189      	bne.n	800617e <_dtoa_r+0xabe>
 800626a:	f10b 0b01 	add.w	fp, fp, #1
 800626e:	2331      	movs	r3, #49	; 0x31
 8006270:	e796      	b.n	80061a0 <_dtoa_r+0xae0>
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <_dtoa_r+0xbdc>)
 8006274:	f7ff ba99 	b.w	80057aa <_dtoa_r+0xea>
 8006278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800627a:	2b00      	cmp	r3, #0
 800627c:	f47f aa6d 	bne.w	800575a <_dtoa_r+0x9a>
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <_dtoa_r+0xbe0>)
 8006282:	f7ff ba92 	b.w	80057aa <_dtoa_r+0xea>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	dcb5      	bgt.n	80061f8 <_dtoa_r+0xb38>
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	2b02      	cmp	r3, #2
 8006290:	f73f aeb1 	bgt.w	8005ff6 <_dtoa_r+0x936>
 8006294:	e7b0      	b.n	80061f8 <_dtoa_r+0xb38>
 8006296:	bf00      	nop
 8006298:	080077e4 	.word	0x080077e4
 800629c:	08007744 	.word	0x08007744
 80062a0:	08007768 	.word	0x08007768

080062a4 <_free_r>:
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d044      	beq.n	8006334 <_free_r+0x90>
 80062aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ae:	9001      	str	r0, [sp, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f1a1 0404 	sub.w	r4, r1, #4
 80062b6:	bfb8      	it	lt
 80062b8:	18e4      	addlt	r4, r4, r3
 80062ba:	f000 f8e7 	bl	800648c <__malloc_lock>
 80062be:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <_free_r+0x94>)
 80062c0:	9801      	ldr	r0, [sp, #4]
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	b933      	cbnz	r3, 80062d4 <_free_r+0x30>
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	b003      	add	sp, #12
 80062cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d0:	f000 b8e2 	b.w	8006498 <__malloc_unlock>
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d908      	bls.n	80062ea <_free_r+0x46>
 80062d8:	6825      	ldr	r5, [r4, #0]
 80062da:	1961      	adds	r1, r4, r5
 80062dc:	428b      	cmp	r3, r1
 80062de:	bf01      	itttt	eq
 80062e0:	6819      	ldreq	r1, [r3, #0]
 80062e2:	685b      	ldreq	r3, [r3, #4]
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	e7ed      	b.n	80062c6 <_free_r+0x22>
 80062ea:	461a      	mov	r2, r3
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	b10b      	cbz	r3, 80062f4 <_free_r+0x50>
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d9fa      	bls.n	80062ea <_free_r+0x46>
 80062f4:	6811      	ldr	r1, [r2, #0]
 80062f6:	1855      	adds	r5, r2, r1
 80062f8:	42a5      	cmp	r5, r4
 80062fa:	d10b      	bne.n	8006314 <_free_r+0x70>
 80062fc:	6824      	ldr	r4, [r4, #0]
 80062fe:	4421      	add	r1, r4
 8006300:	1854      	adds	r4, r2, r1
 8006302:	42a3      	cmp	r3, r4
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	d1e0      	bne.n	80062ca <_free_r+0x26>
 8006308:	681c      	ldr	r4, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	6053      	str	r3, [r2, #4]
 800630e:	440c      	add	r4, r1
 8006310:	6014      	str	r4, [r2, #0]
 8006312:	e7da      	b.n	80062ca <_free_r+0x26>
 8006314:	d902      	bls.n	800631c <_free_r+0x78>
 8006316:	230c      	movs	r3, #12
 8006318:	6003      	str	r3, [r0, #0]
 800631a:	e7d6      	b.n	80062ca <_free_r+0x26>
 800631c:	6825      	ldr	r5, [r4, #0]
 800631e:	1961      	adds	r1, r4, r5
 8006320:	428b      	cmp	r3, r1
 8006322:	bf04      	itt	eq
 8006324:	6819      	ldreq	r1, [r3, #0]
 8006326:	685b      	ldreq	r3, [r3, #4]
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	bf04      	itt	eq
 800632c:	1949      	addeq	r1, r1, r5
 800632e:	6021      	streq	r1, [r4, #0]
 8006330:	6054      	str	r4, [r2, #4]
 8006332:	e7ca      	b.n	80062ca <_free_r+0x26>
 8006334:	b003      	add	sp, #12
 8006336:	bd30      	pop	{r4, r5, pc}
 8006338:	200004fc 	.word	0x200004fc

0800633c <malloc>:
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <malloc+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f000 b823 	b.w	800638c <_malloc_r>
 8006346:	bf00      	nop
 8006348:	200000e4 	.word	0x200000e4

0800634c <sbrk_aligned>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4e0e      	ldr	r6, [pc, #56]	; (8006388 <sbrk_aligned+0x3c>)
 8006350:	460c      	mov	r4, r1
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	4605      	mov	r5, r0
 8006356:	b911      	cbnz	r1, 800635e <sbrk_aligned+0x12>
 8006358:	f000 fe40 	bl	8006fdc <_sbrk_r>
 800635c:	6030      	str	r0, [r6, #0]
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fe3b 	bl	8006fdc <_sbrk_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d00a      	beq.n	8006380 <sbrk_aligned+0x34>
 800636a:	1cc4      	adds	r4, r0, #3
 800636c:	f024 0403 	bic.w	r4, r4, #3
 8006370:	42a0      	cmp	r0, r4
 8006372:	d007      	beq.n	8006384 <sbrk_aligned+0x38>
 8006374:	1a21      	subs	r1, r4, r0
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fe30 	bl	8006fdc <_sbrk_r>
 800637c:	3001      	adds	r0, #1
 800637e:	d101      	bne.n	8006384 <sbrk_aligned+0x38>
 8006380:	f04f 34ff 	mov.w	r4, #4294967295
 8006384:	4620      	mov	r0, r4
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	20000500 	.word	0x20000500

0800638c <_malloc_r>:
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	1ccd      	adds	r5, r1, #3
 8006392:	f025 0503 	bic.w	r5, r5, #3
 8006396:	3508      	adds	r5, #8
 8006398:	2d0c      	cmp	r5, #12
 800639a:	bf38      	it	cc
 800639c:	250c      	movcc	r5, #12
 800639e:	2d00      	cmp	r5, #0
 80063a0:	4607      	mov	r7, r0
 80063a2:	db01      	blt.n	80063a8 <_malloc_r+0x1c>
 80063a4:	42a9      	cmp	r1, r5
 80063a6:	d905      	bls.n	80063b4 <_malloc_r+0x28>
 80063a8:	230c      	movs	r3, #12
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	2600      	movs	r6, #0
 80063ae:	4630      	mov	r0, r6
 80063b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006488 <_malloc_r+0xfc>
 80063b8:	f000 f868 	bl	800648c <__malloc_lock>
 80063bc:	f8d8 3000 	ldr.w	r3, [r8]
 80063c0:	461c      	mov	r4, r3
 80063c2:	bb5c      	cbnz	r4, 800641c <_malloc_r+0x90>
 80063c4:	4629      	mov	r1, r5
 80063c6:	4638      	mov	r0, r7
 80063c8:	f7ff ffc0 	bl	800634c <sbrk_aligned>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	4604      	mov	r4, r0
 80063d0:	d155      	bne.n	800647e <_malloc_r+0xf2>
 80063d2:	f8d8 4000 	ldr.w	r4, [r8]
 80063d6:	4626      	mov	r6, r4
 80063d8:	2e00      	cmp	r6, #0
 80063da:	d145      	bne.n	8006468 <_malloc_r+0xdc>
 80063dc:	2c00      	cmp	r4, #0
 80063de:	d048      	beq.n	8006472 <_malloc_r+0xe6>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	4631      	mov	r1, r6
 80063e4:	4638      	mov	r0, r7
 80063e6:	eb04 0903 	add.w	r9, r4, r3
 80063ea:	f000 fdf7 	bl	8006fdc <_sbrk_r>
 80063ee:	4581      	cmp	r9, r0
 80063f0:	d13f      	bne.n	8006472 <_malloc_r+0xe6>
 80063f2:	6821      	ldr	r1, [r4, #0]
 80063f4:	1a6d      	subs	r5, r5, r1
 80063f6:	4629      	mov	r1, r5
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff ffa7 	bl	800634c <sbrk_aligned>
 80063fe:	3001      	adds	r0, #1
 8006400:	d037      	beq.n	8006472 <_malloc_r+0xe6>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	442b      	add	r3, r5
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f8d8 3000 	ldr.w	r3, [r8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d038      	beq.n	8006482 <_malloc_r+0xf6>
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	42a2      	cmp	r2, r4
 8006414:	d12b      	bne.n	800646e <_malloc_r+0xe2>
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	e00f      	b.n	800643c <_malloc_r+0xb0>
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	1b52      	subs	r2, r2, r5
 8006420:	d41f      	bmi.n	8006462 <_malloc_r+0xd6>
 8006422:	2a0b      	cmp	r2, #11
 8006424:	d917      	bls.n	8006456 <_malloc_r+0xca>
 8006426:	1961      	adds	r1, r4, r5
 8006428:	42a3      	cmp	r3, r4
 800642a:	6025      	str	r5, [r4, #0]
 800642c:	bf18      	it	ne
 800642e:	6059      	strne	r1, [r3, #4]
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	bf08      	it	eq
 8006434:	f8c8 1000 	streq.w	r1, [r8]
 8006438:	5162      	str	r2, [r4, r5]
 800643a:	604b      	str	r3, [r1, #4]
 800643c:	4638      	mov	r0, r7
 800643e:	f104 060b 	add.w	r6, r4, #11
 8006442:	f000 f829 	bl	8006498 <__malloc_unlock>
 8006446:	f026 0607 	bic.w	r6, r6, #7
 800644a:	1d23      	adds	r3, r4, #4
 800644c:	1af2      	subs	r2, r6, r3
 800644e:	d0ae      	beq.n	80063ae <_malloc_r+0x22>
 8006450:	1b9b      	subs	r3, r3, r6
 8006452:	50a3      	str	r3, [r4, r2]
 8006454:	e7ab      	b.n	80063ae <_malloc_r+0x22>
 8006456:	42a3      	cmp	r3, r4
 8006458:	6862      	ldr	r2, [r4, #4]
 800645a:	d1dd      	bne.n	8006418 <_malloc_r+0x8c>
 800645c:	f8c8 2000 	str.w	r2, [r8]
 8006460:	e7ec      	b.n	800643c <_malloc_r+0xb0>
 8006462:	4623      	mov	r3, r4
 8006464:	6864      	ldr	r4, [r4, #4]
 8006466:	e7ac      	b.n	80063c2 <_malloc_r+0x36>
 8006468:	4634      	mov	r4, r6
 800646a:	6876      	ldr	r6, [r6, #4]
 800646c:	e7b4      	b.n	80063d8 <_malloc_r+0x4c>
 800646e:	4613      	mov	r3, r2
 8006470:	e7cc      	b.n	800640c <_malloc_r+0x80>
 8006472:	230c      	movs	r3, #12
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	4638      	mov	r0, r7
 8006478:	f000 f80e 	bl	8006498 <__malloc_unlock>
 800647c:	e797      	b.n	80063ae <_malloc_r+0x22>
 800647e:	6025      	str	r5, [r4, #0]
 8006480:	e7dc      	b.n	800643c <_malloc_r+0xb0>
 8006482:	605b      	str	r3, [r3, #4]
 8006484:	deff      	udf	#255	; 0xff
 8006486:	bf00      	nop
 8006488:	200004fc 	.word	0x200004fc

0800648c <__malloc_lock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_lock+0x8>)
 800648e:	f7ff b88c 	b.w	80055aa <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	200004f8 	.word	0x200004f8

08006498 <__malloc_unlock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_unlock+0x8>)
 800649a:	f7ff b887 	b.w	80055ac <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	200004f8 	.word	0x200004f8

080064a4 <_Balloc>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	69c6      	ldr	r6, [r0, #28]
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	b976      	cbnz	r6, 80064cc <_Balloc+0x28>
 80064ae:	2010      	movs	r0, #16
 80064b0:	f7ff ff44 	bl	800633c <malloc>
 80064b4:	4602      	mov	r2, r0
 80064b6:	61e0      	str	r0, [r4, #28]
 80064b8:	b920      	cbnz	r0, 80064c4 <_Balloc+0x20>
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <_Balloc+0x78>)
 80064bc:	4818      	ldr	r0, [pc, #96]	; (8006520 <_Balloc+0x7c>)
 80064be:	216b      	movs	r1, #107	; 0x6b
 80064c0:	f000 fdaa 	bl	8007018 <__assert_func>
 80064c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c8:	6006      	str	r6, [r0, #0]
 80064ca:	60c6      	str	r6, [r0, #12]
 80064cc:	69e6      	ldr	r6, [r4, #28]
 80064ce:	68f3      	ldr	r3, [r6, #12]
 80064d0:	b183      	cbz	r3, 80064f4 <_Balloc+0x50>
 80064d2:	69e3      	ldr	r3, [r4, #28]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064da:	b9b8      	cbnz	r0, 800650c <_Balloc+0x68>
 80064dc:	2101      	movs	r1, #1
 80064de:	fa01 f605 	lsl.w	r6, r1, r5
 80064e2:	1d72      	adds	r2, r6, #5
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 fdb4 	bl	8007054 <_calloc_r>
 80064ec:	b160      	cbz	r0, 8006508 <_Balloc+0x64>
 80064ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064f2:	e00e      	b.n	8006512 <_Balloc+0x6e>
 80064f4:	2221      	movs	r2, #33	; 0x21
 80064f6:	2104      	movs	r1, #4
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fdab 	bl	8007054 <_calloc_r>
 80064fe:	69e3      	ldr	r3, [r4, #28]
 8006500:	60f0      	str	r0, [r6, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e4      	bne.n	80064d2 <_Balloc+0x2e>
 8006508:	2000      	movs	r0, #0
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	6802      	ldr	r2, [r0, #0]
 800650e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006512:	2300      	movs	r3, #0
 8006514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006518:	e7f7      	b.n	800650a <_Balloc+0x66>
 800651a:	bf00      	nop
 800651c:	08007775 	.word	0x08007775
 8006520:	080077f5 	.word	0x080077f5

08006524 <_Bfree>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	69c6      	ldr	r6, [r0, #28]
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b976      	cbnz	r6, 800654c <_Bfree+0x28>
 800652e:	2010      	movs	r0, #16
 8006530:	f7ff ff04 	bl	800633c <malloc>
 8006534:	4602      	mov	r2, r0
 8006536:	61e8      	str	r0, [r5, #28]
 8006538:	b920      	cbnz	r0, 8006544 <_Bfree+0x20>
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <_Bfree+0x3c>)
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <_Bfree+0x40>)
 800653e:	218f      	movs	r1, #143	; 0x8f
 8006540:	f000 fd6a 	bl	8007018 <__assert_func>
 8006544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006548:	6006      	str	r6, [r0, #0]
 800654a:	60c6      	str	r6, [r0, #12]
 800654c:	b13c      	cbz	r4, 800655e <_Bfree+0x3a>
 800654e:	69eb      	ldr	r3, [r5, #28]
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006558:	6021      	str	r1, [r4, #0]
 800655a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	08007775 	.word	0x08007775
 8006564:	080077f5 	.word	0x080077f5

08006568 <__multadd>:
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	690d      	ldr	r5, [r1, #16]
 800656e:	4607      	mov	r7, r0
 8006570:	460c      	mov	r4, r1
 8006572:	461e      	mov	r6, r3
 8006574:	f101 0c14 	add.w	ip, r1, #20
 8006578:	2000      	movs	r0, #0
 800657a:	f8dc 3000 	ldr.w	r3, [ip]
 800657e:	b299      	uxth	r1, r3
 8006580:	fb02 6101 	mla	r1, r2, r1, r6
 8006584:	0c1e      	lsrs	r6, r3, #16
 8006586:	0c0b      	lsrs	r3, r1, #16
 8006588:	fb02 3306 	mla	r3, r2, r6, r3
 800658c:	b289      	uxth	r1, r1
 800658e:	3001      	adds	r0, #1
 8006590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006594:	4285      	cmp	r5, r0
 8006596:	f84c 1b04 	str.w	r1, [ip], #4
 800659a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800659e:	dcec      	bgt.n	800657a <__multadd+0x12>
 80065a0:	b30e      	cbz	r6, 80065e6 <__multadd+0x7e>
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	42ab      	cmp	r3, r5
 80065a6:	dc19      	bgt.n	80065dc <__multadd+0x74>
 80065a8:	6861      	ldr	r1, [r4, #4]
 80065aa:	4638      	mov	r0, r7
 80065ac:	3101      	adds	r1, #1
 80065ae:	f7ff ff79 	bl	80064a4 <_Balloc>
 80065b2:	4680      	mov	r8, r0
 80065b4:	b928      	cbnz	r0, 80065c2 <__multadd+0x5a>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <__multadd+0x84>)
 80065ba:	480d      	ldr	r0, [pc, #52]	; (80065f0 <__multadd+0x88>)
 80065bc:	21ba      	movs	r1, #186	; 0xba
 80065be:	f000 fd2b 	bl	8007018 <__assert_func>
 80065c2:	6922      	ldr	r2, [r4, #16]
 80065c4:	3202      	adds	r2, #2
 80065c6:	f104 010c 	add.w	r1, r4, #12
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	300c      	adds	r0, #12
 80065ce:	f000 fd15 	bl	8006ffc <memcpy>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7ff ffa5 	bl	8006524 <_Bfree>
 80065da:	4644      	mov	r4, r8
 80065dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065e0:	3501      	adds	r5, #1
 80065e2:	615e      	str	r6, [r3, #20]
 80065e4:	6125      	str	r5, [r4, #16]
 80065e6:	4620      	mov	r0, r4
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ec:	080077e4 	.word	0x080077e4
 80065f0:	080077f5 	.word	0x080077f5

080065f4 <__hi0bits>:
 80065f4:	0c03      	lsrs	r3, r0, #16
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	b9d3      	cbnz	r3, 8006630 <__hi0bits+0x3c>
 80065fa:	0400      	lsls	r0, r0, #16
 80065fc:	2310      	movs	r3, #16
 80065fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006602:	bf04      	itt	eq
 8006604:	0200      	lsleq	r0, r0, #8
 8006606:	3308      	addeq	r3, #8
 8006608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800660c:	bf04      	itt	eq
 800660e:	0100      	lsleq	r0, r0, #4
 8006610:	3304      	addeq	r3, #4
 8006612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006616:	bf04      	itt	eq
 8006618:	0080      	lsleq	r0, r0, #2
 800661a:	3302      	addeq	r3, #2
 800661c:	2800      	cmp	r0, #0
 800661e:	db05      	blt.n	800662c <__hi0bits+0x38>
 8006620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006624:	f103 0301 	add.w	r3, r3, #1
 8006628:	bf08      	it	eq
 800662a:	2320      	moveq	r3, #32
 800662c:	4618      	mov	r0, r3
 800662e:	4770      	bx	lr
 8006630:	2300      	movs	r3, #0
 8006632:	e7e4      	b.n	80065fe <__hi0bits+0xa>

08006634 <__lo0bits>:
 8006634:	6803      	ldr	r3, [r0, #0]
 8006636:	f013 0207 	ands.w	r2, r3, #7
 800663a:	d00c      	beq.n	8006656 <__lo0bits+0x22>
 800663c:	07d9      	lsls	r1, r3, #31
 800663e:	d422      	bmi.n	8006686 <__lo0bits+0x52>
 8006640:	079a      	lsls	r2, r3, #30
 8006642:	bf49      	itett	mi
 8006644:	085b      	lsrmi	r3, r3, #1
 8006646:	089b      	lsrpl	r3, r3, #2
 8006648:	6003      	strmi	r3, [r0, #0]
 800664a:	2201      	movmi	r2, #1
 800664c:	bf5c      	itt	pl
 800664e:	6003      	strpl	r3, [r0, #0]
 8006650:	2202      	movpl	r2, #2
 8006652:	4610      	mov	r0, r2
 8006654:	4770      	bx	lr
 8006656:	b299      	uxth	r1, r3
 8006658:	b909      	cbnz	r1, 800665e <__lo0bits+0x2a>
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	2210      	movs	r2, #16
 800665e:	b2d9      	uxtb	r1, r3
 8006660:	b909      	cbnz	r1, 8006666 <__lo0bits+0x32>
 8006662:	3208      	adds	r2, #8
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	0719      	lsls	r1, r3, #28
 8006668:	bf04      	itt	eq
 800666a:	091b      	lsreq	r3, r3, #4
 800666c:	3204      	addeq	r2, #4
 800666e:	0799      	lsls	r1, r3, #30
 8006670:	bf04      	itt	eq
 8006672:	089b      	lsreq	r3, r3, #2
 8006674:	3202      	addeq	r2, #2
 8006676:	07d9      	lsls	r1, r3, #31
 8006678:	d403      	bmi.n	8006682 <__lo0bits+0x4e>
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	f102 0201 	add.w	r2, r2, #1
 8006680:	d003      	beq.n	800668a <__lo0bits+0x56>
 8006682:	6003      	str	r3, [r0, #0]
 8006684:	e7e5      	b.n	8006652 <__lo0bits+0x1e>
 8006686:	2200      	movs	r2, #0
 8006688:	e7e3      	b.n	8006652 <__lo0bits+0x1e>
 800668a:	2220      	movs	r2, #32
 800668c:	e7e1      	b.n	8006652 <__lo0bits+0x1e>
	...

08006690 <__i2b>:
 8006690:	b510      	push	{r4, lr}
 8006692:	460c      	mov	r4, r1
 8006694:	2101      	movs	r1, #1
 8006696:	f7ff ff05 	bl	80064a4 <_Balloc>
 800669a:	4602      	mov	r2, r0
 800669c:	b928      	cbnz	r0, 80066aa <__i2b+0x1a>
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <__i2b+0x24>)
 80066a0:	4805      	ldr	r0, [pc, #20]	; (80066b8 <__i2b+0x28>)
 80066a2:	f240 1145 	movw	r1, #325	; 0x145
 80066a6:	f000 fcb7 	bl	8007018 <__assert_func>
 80066aa:	2301      	movs	r3, #1
 80066ac:	6144      	str	r4, [r0, #20]
 80066ae:	6103      	str	r3, [r0, #16]
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	080077e4 	.word	0x080077e4
 80066b8:	080077f5 	.word	0x080077f5

080066bc <__multiply>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4691      	mov	r9, r2
 80066c2:	690a      	ldr	r2, [r1, #16]
 80066c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	bfb8      	it	lt
 80066cc:	460b      	movlt	r3, r1
 80066ce:	460c      	mov	r4, r1
 80066d0:	bfbc      	itt	lt
 80066d2:	464c      	movlt	r4, r9
 80066d4:	4699      	movlt	r9, r3
 80066d6:	6927      	ldr	r7, [r4, #16]
 80066d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	6861      	ldr	r1, [r4, #4]
 80066e0:	eb07 060a 	add.w	r6, r7, sl
 80066e4:	42b3      	cmp	r3, r6
 80066e6:	b085      	sub	sp, #20
 80066e8:	bfb8      	it	lt
 80066ea:	3101      	addlt	r1, #1
 80066ec:	f7ff feda 	bl	80064a4 <_Balloc>
 80066f0:	b930      	cbnz	r0, 8006700 <__multiply+0x44>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b44      	ldr	r3, [pc, #272]	; (8006808 <__multiply+0x14c>)
 80066f6:	4845      	ldr	r0, [pc, #276]	; (800680c <__multiply+0x150>)
 80066f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066fc:	f000 fc8c 	bl	8007018 <__assert_func>
 8006700:	f100 0514 	add.w	r5, r0, #20
 8006704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006708:	462b      	mov	r3, r5
 800670a:	2200      	movs	r2, #0
 800670c:	4543      	cmp	r3, r8
 800670e:	d321      	bcc.n	8006754 <__multiply+0x98>
 8006710:	f104 0314 	add.w	r3, r4, #20
 8006714:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006718:	f109 0314 	add.w	r3, r9, #20
 800671c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006720:	9202      	str	r2, [sp, #8]
 8006722:	1b3a      	subs	r2, r7, r4
 8006724:	3a15      	subs	r2, #21
 8006726:	f022 0203 	bic.w	r2, r2, #3
 800672a:	3204      	adds	r2, #4
 800672c:	f104 0115 	add.w	r1, r4, #21
 8006730:	428f      	cmp	r7, r1
 8006732:	bf38      	it	cc
 8006734:	2204      	movcc	r2, #4
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9a02      	ldr	r2, [sp, #8]
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d80c      	bhi.n	800675a <__multiply+0x9e>
 8006740:	2e00      	cmp	r6, #0
 8006742:	dd03      	ble.n	800674c <__multiply+0x90>
 8006744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05b      	beq.n	8006804 <__multiply+0x148>
 800674c:	6106      	str	r6, [r0, #16]
 800674e:	b005      	add	sp, #20
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	f843 2b04 	str.w	r2, [r3], #4
 8006758:	e7d8      	b.n	800670c <__multiply+0x50>
 800675a:	f8b3 a000 	ldrh.w	sl, [r3]
 800675e:	f1ba 0f00 	cmp.w	sl, #0
 8006762:	d024      	beq.n	80067ae <__multiply+0xf2>
 8006764:	f104 0e14 	add.w	lr, r4, #20
 8006768:	46a9      	mov	r9, r5
 800676a:	f04f 0c00 	mov.w	ip, #0
 800676e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006772:	f8d9 1000 	ldr.w	r1, [r9]
 8006776:	fa1f fb82 	uxth.w	fp, r2
 800677a:	b289      	uxth	r1, r1
 800677c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006780:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006784:	f8d9 2000 	ldr.w	r2, [r9]
 8006788:	4461      	add	r1, ip
 800678a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800678e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006796:	b289      	uxth	r1, r1
 8006798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800679c:	4577      	cmp	r7, lr
 800679e:	f849 1b04 	str.w	r1, [r9], #4
 80067a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067a6:	d8e2      	bhi.n	800676e <__multiply+0xb2>
 80067a8:	9a01      	ldr	r2, [sp, #4]
 80067aa:	f845 c002 	str.w	ip, [r5, r2]
 80067ae:	9a03      	ldr	r2, [sp, #12]
 80067b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067b4:	3304      	adds	r3, #4
 80067b6:	f1b9 0f00 	cmp.w	r9, #0
 80067ba:	d021      	beq.n	8006800 <__multiply+0x144>
 80067bc:	6829      	ldr	r1, [r5, #0]
 80067be:	f104 0c14 	add.w	ip, r4, #20
 80067c2:	46ae      	mov	lr, r5
 80067c4:	f04f 0a00 	mov.w	sl, #0
 80067c8:	f8bc b000 	ldrh.w	fp, [ip]
 80067cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067d0:	fb09 220b 	mla	r2, r9, fp, r2
 80067d4:	4452      	add	r2, sl
 80067d6:	b289      	uxth	r1, r1
 80067d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067dc:	f84e 1b04 	str.w	r1, [lr], #4
 80067e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067e8:	f8be 1000 	ldrh.w	r1, [lr]
 80067ec:	fb09 110a 	mla	r1, r9, sl, r1
 80067f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067f4:	4567      	cmp	r7, ip
 80067f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067fa:	d8e5      	bhi.n	80067c8 <__multiply+0x10c>
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	50a9      	str	r1, [r5, r2]
 8006800:	3504      	adds	r5, #4
 8006802:	e799      	b.n	8006738 <__multiply+0x7c>
 8006804:	3e01      	subs	r6, #1
 8006806:	e79b      	b.n	8006740 <__multiply+0x84>
 8006808:	080077e4 	.word	0x080077e4
 800680c:	080077f5 	.word	0x080077f5

08006810 <__pow5mult>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	4615      	mov	r5, r2
 8006816:	f012 0203 	ands.w	r2, r2, #3
 800681a:	4606      	mov	r6, r0
 800681c:	460f      	mov	r7, r1
 800681e:	d007      	beq.n	8006830 <__pow5mult+0x20>
 8006820:	4c25      	ldr	r4, [pc, #148]	; (80068b8 <__pow5mult+0xa8>)
 8006822:	3a01      	subs	r2, #1
 8006824:	2300      	movs	r3, #0
 8006826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682a:	f7ff fe9d 	bl	8006568 <__multadd>
 800682e:	4607      	mov	r7, r0
 8006830:	10ad      	asrs	r5, r5, #2
 8006832:	d03d      	beq.n	80068b0 <__pow5mult+0xa0>
 8006834:	69f4      	ldr	r4, [r6, #28]
 8006836:	b97c      	cbnz	r4, 8006858 <__pow5mult+0x48>
 8006838:	2010      	movs	r0, #16
 800683a:	f7ff fd7f 	bl	800633c <malloc>
 800683e:	4602      	mov	r2, r0
 8006840:	61f0      	str	r0, [r6, #28]
 8006842:	b928      	cbnz	r0, 8006850 <__pow5mult+0x40>
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <__pow5mult+0xac>)
 8006846:	481e      	ldr	r0, [pc, #120]	; (80068c0 <__pow5mult+0xb0>)
 8006848:	f240 11b3 	movw	r1, #435	; 0x1b3
 800684c:	f000 fbe4 	bl	8007018 <__assert_func>
 8006850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006854:	6004      	str	r4, [r0, #0]
 8006856:	60c4      	str	r4, [r0, #12]
 8006858:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800685c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006860:	b94c      	cbnz	r4, 8006876 <__pow5mult+0x66>
 8006862:	f240 2171 	movw	r1, #625	; 0x271
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ff12 	bl	8006690 <__i2b>
 800686c:	2300      	movs	r3, #0
 800686e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006872:	4604      	mov	r4, r0
 8006874:	6003      	str	r3, [r0, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	07eb      	lsls	r3, r5, #31
 800687c:	d50a      	bpl.n	8006894 <__pow5mult+0x84>
 800687e:	4639      	mov	r1, r7
 8006880:	4622      	mov	r2, r4
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff ff1a 	bl	80066bc <__multiply>
 8006888:	4639      	mov	r1, r7
 800688a:	4680      	mov	r8, r0
 800688c:	4630      	mov	r0, r6
 800688e:	f7ff fe49 	bl	8006524 <_Bfree>
 8006892:	4647      	mov	r7, r8
 8006894:	106d      	asrs	r5, r5, #1
 8006896:	d00b      	beq.n	80068b0 <__pow5mult+0xa0>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	b938      	cbnz	r0, 80068ac <__pow5mult+0x9c>
 800689c:	4622      	mov	r2, r4
 800689e:	4621      	mov	r1, r4
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff ff0b 	bl	80066bc <__multiply>
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	f8c0 9000 	str.w	r9, [r0]
 80068ac:	4604      	mov	r4, r0
 80068ae:	e7e4      	b.n	800687a <__pow5mult+0x6a>
 80068b0:	4638      	mov	r0, r7
 80068b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b6:	bf00      	nop
 80068b8:	08007940 	.word	0x08007940
 80068bc:	08007775 	.word	0x08007775
 80068c0:	080077f5 	.word	0x080077f5

080068c4 <__lshift>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	6849      	ldr	r1, [r1, #4]
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	4607      	mov	r7, r0
 80068d6:	4691      	mov	r9, r2
 80068d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068dc:	f108 0601 	add.w	r6, r8, #1
 80068e0:	42b3      	cmp	r3, r6
 80068e2:	db0b      	blt.n	80068fc <__lshift+0x38>
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff fddd 	bl	80064a4 <_Balloc>
 80068ea:	4605      	mov	r5, r0
 80068ec:	b948      	cbnz	r0, 8006902 <__lshift+0x3e>
 80068ee:	4602      	mov	r2, r0
 80068f0:	4b28      	ldr	r3, [pc, #160]	; (8006994 <__lshift+0xd0>)
 80068f2:	4829      	ldr	r0, [pc, #164]	; (8006998 <__lshift+0xd4>)
 80068f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068f8:	f000 fb8e 	bl	8007018 <__assert_func>
 80068fc:	3101      	adds	r1, #1
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	e7ee      	b.n	80068e0 <__lshift+0x1c>
 8006902:	2300      	movs	r3, #0
 8006904:	f100 0114 	add.w	r1, r0, #20
 8006908:	f100 0210 	add.w	r2, r0, #16
 800690c:	4618      	mov	r0, r3
 800690e:	4553      	cmp	r3, sl
 8006910:	db33      	blt.n	800697a <__lshift+0xb6>
 8006912:	6920      	ldr	r0, [r4, #16]
 8006914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006918:	f104 0314 	add.w	r3, r4, #20
 800691c:	f019 091f 	ands.w	r9, r9, #31
 8006920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006928:	d02b      	beq.n	8006982 <__lshift+0xbe>
 800692a:	f1c9 0e20 	rsb	lr, r9, #32
 800692e:	468a      	mov	sl, r1
 8006930:	2200      	movs	r2, #0
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	fa00 f009 	lsl.w	r0, r0, r9
 8006938:	4310      	orrs	r0, r2
 800693a:	f84a 0b04 	str.w	r0, [sl], #4
 800693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006942:	459c      	cmp	ip, r3
 8006944:	fa22 f20e 	lsr.w	r2, r2, lr
 8006948:	d8f3      	bhi.n	8006932 <__lshift+0x6e>
 800694a:	ebac 0304 	sub.w	r3, ip, r4
 800694e:	3b15      	subs	r3, #21
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	3304      	adds	r3, #4
 8006956:	f104 0015 	add.w	r0, r4, #21
 800695a:	4584      	cmp	ip, r0
 800695c:	bf38      	it	cc
 800695e:	2304      	movcc	r3, #4
 8006960:	50ca      	str	r2, [r1, r3]
 8006962:	b10a      	cbz	r2, 8006968 <__lshift+0xa4>
 8006964:	f108 0602 	add.w	r6, r8, #2
 8006968:	3e01      	subs	r6, #1
 800696a:	4638      	mov	r0, r7
 800696c:	612e      	str	r6, [r5, #16]
 800696e:	4621      	mov	r1, r4
 8006970:	f7ff fdd8 	bl	8006524 <_Bfree>
 8006974:	4628      	mov	r0, r5
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	f842 0f04 	str.w	r0, [r2, #4]!
 800697e:	3301      	adds	r3, #1
 8006980:	e7c5      	b.n	800690e <__lshift+0x4a>
 8006982:	3904      	subs	r1, #4
 8006984:	f853 2b04 	ldr.w	r2, [r3], #4
 8006988:	f841 2f04 	str.w	r2, [r1, #4]!
 800698c:	459c      	cmp	ip, r3
 800698e:	d8f9      	bhi.n	8006984 <__lshift+0xc0>
 8006990:	e7ea      	b.n	8006968 <__lshift+0xa4>
 8006992:	bf00      	nop
 8006994:	080077e4 	.word	0x080077e4
 8006998:	080077f5 	.word	0x080077f5

0800699c <__mcmp>:
 800699c:	b530      	push	{r4, r5, lr}
 800699e:	6902      	ldr	r2, [r0, #16]
 80069a0:	690c      	ldr	r4, [r1, #16]
 80069a2:	1b12      	subs	r2, r2, r4
 80069a4:	d10e      	bne.n	80069c4 <__mcmp+0x28>
 80069a6:	f100 0314 	add.w	r3, r0, #20
 80069aa:	3114      	adds	r1, #20
 80069ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069bc:	42a5      	cmp	r5, r4
 80069be:	d003      	beq.n	80069c8 <__mcmp+0x2c>
 80069c0:	d305      	bcc.n	80069ce <__mcmp+0x32>
 80069c2:	2201      	movs	r2, #1
 80069c4:	4610      	mov	r0, r2
 80069c6:	bd30      	pop	{r4, r5, pc}
 80069c8:	4283      	cmp	r3, r0
 80069ca:	d3f3      	bcc.n	80069b4 <__mcmp+0x18>
 80069cc:	e7fa      	b.n	80069c4 <__mcmp+0x28>
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	e7f7      	b.n	80069c4 <__mcmp+0x28>

080069d4 <__mdiff>:
 80069d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	460c      	mov	r4, r1
 80069da:	4606      	mov	r6, r0
 80069dc:	4611      	mov	r1, r2
 80069de:	4620      	mov	r0, r4
 80069e0:	4690      	mov	r8, r2
 80069e2:	f7ff ffdb 	bl	800699c <__mcmp>
 80069e6:	1e05      	subs	r5, r0, #0
 80069e8:	d110      	bne.n	8006a0c <__mdiff+0x38>
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fd59 	bl	80064a4 <_Balloc>
 80069f2:	b930      	cbnz	r0, 8006a02 <__mdiff+0x2e>
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <__mdiff+0x10c>)
 80069f6:	4602      	mov	r2, r0
 80069f8:	f240 2137 	movw	r1, #567	; 0x237
 80069fc:	4839      	ldr	r0, [pc, #228]	; (8006ae4 <__mdiff+0x110>)
 80069fe:	f000 fb0b 	bl	8007018 <__assert_func>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	bfa4      	itt	ge
 8006a0e:	4643      	movge	r3, r8
 8006a10:	46a0      	movge	r8, r4
 8006a12:	4630      	mov	r0, r6
 8006a14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a18:	bfa6      	itte	ge
 8006a1a:	461c      	movge	r4, r3
 8006a1c:	2500      	movge	r5, #0
 8006a1e:	2501      	movlt	r5, #1
 8006a20:	f7ff fd40 	bl	80064a4 <_Balloc>
 8006a24:	b920      	cbnz	r0, 8006a30 <__mdiff+0x5c>
 8006a26:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <__mdiff+0x10c>)
 8006a28:	4602      	mov	r2, r0
 8006a2a:	f240 2145 	movw	r1, #581	; 0x245
 8006a2e:	e7e5      	b.n	80069fc <__mdiff+0x28>
 8006a30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a34:	6926      	ldr	r6, [r4, #16]
 8006a36:	60c5      	str	r5, [r0, #12]
 8006a38:	f104 0914 	add.w	r9, r4, #20
 8006a3c:	f108 0514 	add.w	r5, r8, #20
 8006a40:	f100 0e14 	add.w	lr, r0, #20
 8006a44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a4c:	f108 0210 	add.w	r2, r8, #16
 8006a50:	46f2      	mov	sl, lr
 8006a52:	2100      	movs	r1, #0
 8006a54:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a5c:	fa11 f88b 	uxtah	r8, r1, fp
 8006a60:	b299      	uxth	r1, r3
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	eba8 0801 	sub.w	r8, r8, r1
 8006a68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a70:	fa1f f888 	uxth.w	r8, r8
 8006a74:	1419      	asrs	r1, r3, #16
 8006a76:	454e      	cmp	r6, r9
 8006a78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a7c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a80:	d8e8      	bhi.n	8006a54 <__mdiff+0x80>
 8006a82:	1b33      	subs	r3, r6, r4
 8006a84:	3b15      	subs	r3, #21
 8006a86:	f023 0303 	bic.w	r3, r3, #3
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	3415      	adds	r4, #21
 8006a8e:	42a6      	cmp	r6, r4
 8006a90:	bf38      	it	cc
 8006a92:	2304      	movcc	r3, #4
 8006a94:	441d      	add	r5, r3
 8006a96:	4473      	add	r3, lr
 8006a98:	469e      	mov	lr, r3
 8006a9a:	462e      	mov	r6, r5
 8006a9c:	4566      	cmp	r6, ip
 8006a9e:	d30e      	bcc.n	8006abe <__mdiff+0xea>
 8006aa0:	f10c 0203 	add.w	r2, ip, #3
 8006aa4:	1b52      	subs	r2, r2, r5
 8006aa6:	f022 0203 	bic.w	r2, r2, #3
 8006aaa:	3d03      	subs	r5, #3
 8006aac:	45ac      	cmp	ip, r5
 8006aae:	bf38      	it	cc
 8006ab0:	2200      	movcc	r2, #0
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006ab8:	b17a      	cbz	r2, 8006ada <__mdiff+0x106>
 8006aba:	6107      	str	r7, [r0, #16]
 8006abc:	e7a4      	b.n	8006a08 <__mdiff+0x34>
 8006abe:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ac2:	fa11 f288 	uxtah	r2, r1, r8
 8006ac6:	1414      	asrs	r4, r2, #16
 8006ac8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006acc:	b292      	uxth	r2, r2
 8006ace:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ad2:	f84e 2b04 	str.w	r2, [lr], #4
 8006ad6:	1421      	asrs	r1, r4, #16
 8006ad8:	e7e0      	b.n	8006a9c <__mdiff+0xc8>
 8006ada:	3f01      	subs	r7, #1
 8006adc:	e7ea      	b.n	8006ab4 <__mdiff+0xe0>
 8006ade:	bf00      	nop
 8006ae0:	080077e4 	.word	0x080077e4
 8006ae4:	080077f5 	.word	0x080077f5

08006ae8 <__d2b>:
 8006ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006aec:	460f      	mov	r7, r1
 8006aee:	2101      	movs	r1, #1
 8006af0:	ec59 8b10 	vmov	r8, r9, d0
 8006af4:	4616      	mov	r6, r2
 8006af6:	f7ff fcd5 	bl	80064a4 <_Balloc>
 8006afa:	4604      	mov	r4, r0
 8006afc:	b930      	cbnz	r0, 8006b0c <__d2b+0x24>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <__d2b+0xac>)
 8006b02:	4825      	ldr	r0, [pc, #148]	; (8006b98 <__d2b+0xb0>)
 8006b04:	f240 310f 	movw	r1, #783	; 0x30f
 8006b08:	f000 fa86 	bl	8007018 <__assert_func>
 8006b0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b14:	bb2d      	cbnz	r5, 8006b62 <__d2b+0x7a>
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	f1b8 0300 	subs.w	r3, r8, #0
 8006b1c:	d026      	beq.n	8006b6c <__d2b+0x84>
 8006b1e:	4668      	mov	r0, sp
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	f7ff fd87 	bl	8006634 <__lo0bits>
 8006b26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b2a:	b1e8      	cbz	r0, 8006b68 <__d2b+0x80>
 8006b2c:	f1c0 0320 	rsb	r3, r0, #32
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	430b      	orrs	r3, r1
 8006b36:	40c2      	lsrs	r2, r0
 8006b38:	6163      	str	r3, [r4, #20]
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	61a3      	str	r3, [r4, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf14      	ite	ne
 8006b44:	2202      	movne	r2, #2
 8006b46:	2201      	moveq	r2, #1
 8006b48:	6122      	str	r2, [r4, #16]
 8006b4a:	b1bd      	cbz	r5, 8006b7c <__d2b+0x94>
 8006b4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b50:	4405      	add	r5, r0
 8006b52:	603d      	str	r5, [r7, #0]
 8006b54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b58:	6030      	str	r0, [r6, #0]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	b003      	add	sp, #12
 8006b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b66:	e7d6      	b.n	8006b16 <__d2b+0x2e>
 8006b68:	6161      	str	r1, [r4, #20]
 8006b6a:	e7e7      	b.n	8006b3c <__d2b+0x54>
 8006b6c:	a801      	add	r0, sp, #4
 8006b6e:	f7ff fd61 	bl	8006634 <__lo0bits>
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	6163      	str	r3, [r4, #20]
 8006b76:	3020      	adds	r0, #32
 8006b78:	2201      	movs	r2, #1
 8006b7a:	e7e5      	b.n	8006b48 <__d2b+0x60>
 8006b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b84:	6038      	str	r0, [r7, #0]
 8006b86:	6918      	ldr	r0, [r3, #16]
 8006b88:	f7ff fd34 	bl	80065f4 <__hi0bits>
 8006b8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b90:	e7e2      	b.n	8006b58 <__d2b+0x70>
 8006b92:	bf00      	nop
 8006b94:	080077e4 	.word	0x080077e4
 8006b98:	080077f5 	.word	0x080077f5

08006b9c <__ssputs_r>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	688e      	ldr	r6, [r1, #8]
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	42be      	cmp	r6, r7
 8006ba6:	680b      	ldr	r3, [r1, #0]
 8006ba8:	4682      	mov	sl, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4690      	mov	r8, r2
 8006bae:	d82c      	bhi.n	8006c0a <__ssputs_r+0x6e>
 8006bb0:	898a      	ldrh	r2, [r1, #12]
 8006bb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bb6:	d026      	beq.n	8006c06 <__ssputs_r+0x6a>
 8006bb8:	6965      	ldr	r5, [r4, #20]
 8006bba:	6909      	ldr	r1, [r1, #16]
 8006bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc0:	eba3 0901 	sub.w	r9, r3, r1
 8006bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc8:	1c7b      	adds	r3, r7, #1
 8006bca:	444b      	add	r3, r9
 8006bcc:	106d      	asrs	r5, r5, #1
 8006bce:	429d      	cmp	r5, r3
 8006bd0:	bf38      	it	cc
 8006bd2:	461d      	movcc	r5, r3
 8006bd4:	0553      	lsls	r3, r2, #21
 8006bd6:	d527      	bpl.n	8006c28 <__ssputs_r+0x8c>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7ff fbd7 	bl	800638c <_malloc_r>
 8006bde:	4606      	mov	r6, r0
 8006be0:	b360      	cbz	r0, 8006c3c <__ssputs_r+0xa0>
 8006be2:	6921      	ldr	r1, [r4, #16]
 8006be4:	464a      	mov	r2, r9
 8006be6:	f000 fa09 	bl	8006ffc <memcpy>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	6126      	str	r6, [r4, #16]
 8006bf8:	6165      	str	r5, [r4, #20]
 8006bfa:	444e      	add	r6, r9
 8006bfc:	eba5 0509 	sub.w	r5, r5, r9
 8006c00:	6026      	str	r6, [r4, #0]
 8006c02:	60a5      	str	r5, [r4, #8]
 8006c04:	463e      	mov	r6, r7
 8006c06:	42be      	cmp	r6, r7
 8006c08:	d900      	bls.n	8006c0c <__ssputs_r+0x70>
 8006c0a:	463e      	mov	r6, r7
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4641      	mov	r1, r8
 8006c12:	f000 f9c9 	bl	8006fa8 <memmove>
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	1b9b      	subs	r3, r3, r6
 8006c1a:	60a3      	str	r3, [r4, #8]
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	4433      	add	r3, r6
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	2000      	movs	r0, #0
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	462a      	mov	r2, r5
 8006c2a:	f000 fa3b 	bl	80070a4 <_realloc_r>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d1e0      	bne.n	8006bf6 <__ssputs_r+0x5a>
 8006c34:	6921      	ldr	r1, [r4, #16]
 8006c36:	4650      	mov	r0, sl
 8006c38:	f7ff fb34 	bl	80062a4 <_free_r>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	f8ca 3000 	str.w	r3, [sl]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	e7e9      	b.n	8006c24 <__ssputs_r+0x88>

08006c50 <_svfiprintf_r>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	4698      	mov	r8, r3
 8006c56:	898b      	ldrh	r3, [r1, #12]
 8006c58:	061b      	lsls	r3, r3, #24
 8006c5a:	b09d      	sub	sp, #116	; 0x74
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	d50e      	bpl.n	8006c82 <_svfiprintf_r+0x32>
 8006c64:	690b      	ldr	r3, [r1, #16]
 8006c66:	b963      	cbnz	r3, 8006c82 <_svfiprintf_r+0x32>
 8006c68:	2140      	movs	r1, #64	; 0x40
 8006c6a:	f7ff fb8f 	bl	800638c <_malloc_r>
 8006c6e:	6028      	str	r0, [r5, #0]
 8006c70:	6128      	str	r0, [r5, #16]
 8006c72:	b920      	cbnz	r0, 8006c7e <_svfiprintf_r+0x2e>
 8006c74:	230c      	movs	r3, #12
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	e0d0      	b.n	8006e20 <_svfiprintf_r+0x1d0>
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c90:	2330      	movs	r3, #48	; 0x30
 8006c92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e38 <_svfiprintf_r+0x1e8>
 8006c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x5c>
 8006ca8:	2a25      	cmp	r2, #37	; 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x50>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7a>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6f 	bl	8006b9c <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80a9 	beq.w	8006e16 <_svfiprintf_r+0x1c6>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80a1 	beq.w	8006e16 <_svfiprintf_r+0x1c6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cea:	931a      	str	r3, [sp, #104]	; 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	4850      	ldr	r0, [pc, #320]	; (8006e38 <_svfiprintf_r+0x1e8>)
 8006cf6:	f7f9 fa6b 	bl	80001d0 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xe6>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	; 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	; 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xf6>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4654      	mov	r4, sl
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	; 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94d      	bls.n	8006dcc <_svfiprintf_r+0x17c>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x110>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x110>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	46a2      	mov	sl, r4
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0x9c>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	; 0x2e
 8006d64:	d10c      	bne.n	8006d80 <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6a:	d134      	bne.n	8006dd6 <_svfiprintf_r+0x186>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	bfb8      	it	lt
 8006d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d7c:	3402      	adds	r4, #2
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e48 <_svfiprintf_r+0x1f8>
 8006d84:	7821      	ldrb	r1, [r4, #0]
 8006d86:	2203      	movs	r2, #3
 8006d88:	4650      	mov	r0, sl
 8006d8a:	f7f9 fa21 	bl	80001d0 <memchr>
 8006d8e:	b138      	cbz	r0, 8006da0 <_svfiprintf_r+0x150>
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	eba0 000a 	sub.w	r0, r0, sl
 8006d96:	2240      	movs	r2, #64	; 0x40
 8006d98:	4082      	lsls	r2, r0
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da4:	4825      	ldr	r0, [pc, #148]	; (8006e3c <_svfiprintf_r+0x1ec>)
 8006da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006daa:	2206      	movs	r2, #6
 8006dac:	f7f9 fa10 	bl	80001d0 <memchr>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d038      	beq.n	8006e26 <_svfiprintf_r+0x1d6>
 8006db4:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <_svfiprintf_r+0x1f0>)
 8006db6:	bb1b      	cbnz	r3, 8006e00 <_svfiprintf_r+0x1b0>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	3307      	adds	r3, #7
 8006dbc:	f023 0307 	bic.w	r3, r3, #7
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	9303      	str	r3, [sp, #12]
 8006dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc6:	4433      	add	r3, r6
 8006dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dca:	e768      	b.n	8006c9e <_svfiprintf_r+0x4e>
 8006dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e7a6      	b.n	8006d24 <_svfiprintf_r+0xd4>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	3401      	adds	r4, #1
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f04f 0c0a 	mov.w	ip, #10
 8006de2:	4620      	mov	r0, r4
 8006de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de8:	3a30      	subs	r2, #48	; 0x30
 8006dea:	2a09      	cmp	r2, #9
 8006dec:	d903      	bls.n	8006df6 <_svfiprintf_r+0x1a6>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0c6      	beq.n	8006d80 <_svfiprintf_r+0x130>
 8006df2:	9105      	str	r1, [sp, #20]
 8006df4:	e7c4      	b.n	8006d80 <_svfiprintf_r+0x130>
 8006df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e7f0      	b.n	8006de2 <_svfiprintf_r+0x192>
 8006e00:	ab03      	add	r3, sp, #12
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	462a      	mov	r2, r5
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <_svfiprintf_r+0x1f4>)
 8006e08:	a904      	add	r1, sp, #16
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f7fd fe64 	bl	8004ad8 <_printf_float>
 8006e10:	1c42      	adds	r2, r0, #1
 8006e12:	4606      	mov	r6, r0
 8006e14:	d1d6      	bne.n	8006dc4 <_svfiprintf_r+0x174>
 8006e16:	89ab      	ldrh	r3, [r5, #12]
 8006e18:	065b      	lsls	r3, r3, #25
 8006e1a:	f53f af2d 	bmi.w	8006c78 <_svfiprintf_r+0x28>
 8006e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e20:	b01d      	add	sp, #116	; 0x74
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	ab03      	add	r3, sp, #12
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <_svfiprintf_r+0x1f4>)
 8006e2e:	a904      	add	r1, sp, #16
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7fe f8f5 	bl	8005020 <_printf_i>
 8006e36:	e7eb      	b.n	8006e10 <_svfiprintf_r+0x1c0>
 8006e38:	0800794c 	.word	0x0800794c
 8006e3c:	08007956 	.word	0x08007956
 8006e40:	08004ad9 	.word	0x08004ad9
 8006e44:	08006b9d 	.word	0x08006b9d
 8006e48:	08007952 	.word	0x08007952

08006e4c <__sflush_r>:
 8006e4c:	898a      	ldrh	r2, [r1, #12]
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	4605      	mov	r5, r0
 8006e54:	0710      	lsls	r0, r2, #28
 8006e56:	460c      	mov	r4, r1
 8006e58:	d458      	bmi.n	8006f0c <__sflush_r+0xc0>
 8006e5a:	684b      	ldr	r3, [r1, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc05      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc02      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d0f9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e78:	682f      	ldr	r7, [r5, #0]
 8006e7a:	6a21      	ldr	r1, [r4, #32]
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	d032      	beq.n	8006ee6 <__sflush_r+0x9a>
 8006e80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	075a      	lsls	r2, r3, #29
 8006e86:	d505      	bpl.n	8006e94 <__sflush_r+0x48>
 8006e88:	6863      	ldr	r3, [r4, #4]
 8006e8a:	1ac0      	subs	r0, r0, r3
 8006e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e8e:	b10b      	cbz	r3, 8006e94 <__sflush_r+0x48>
 8006e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e92:	1ac0      	subs	r0, r0, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	4602      	mov	r2, r0
 8006e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e9a:	6a21      	ldr	r1, [r4, #32]
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b0      	blx	r6
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	d106      	bne.n	8006eb4 <__sflush_r+0x68>
 8006ea6:	6829      	ldr	r1, [r5, #0]
 8006ea8:	291d      	cmp	r1, #29
 8006eaa:	d82b      	bhi.n	8006f04 <__sflush_r+0xb8>
 8006eac:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <__sflush_r+0x108>)
 8006eae:	410a      	asrs	r2, r1
 8006eb0:	07d6      	lsls	r6, r2, #31
 8006eb2:	d427      	bmi.n	8006f04 <__sflush_r+0xb8>
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	6062      	str	r2, [r4, #4]
 8006eb8:	04d9      	lsls	r1, r3, #19
 8006eba:	6922      	ldr	r2, [r4, #16]
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	d504      	bpl.n	8006eca <__sflush_r+0x7e>
 8006ec0:	1c42      	adds	r2, r0, #1
 8006ec2:	d101      	bne.n	8006ec8 <__sflush_r+0x7c>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b903      	cbnz	r3, 8006eca <__sflush_r+0x7e>
 8006ec8:	6560      	str	r0, [r4, #84]	; 0x54
 8006eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ecc:	602f      	str	r7, [r5, #0]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d0c9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	d002      	beq.n	8006ee0 <__sflush_r+0x94>
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7ff f9e2 	bl	80062a4 <_free_r>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ee4:	e7c0      	b.n	8006e68 <__sflush_r+0x1c>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b0      	blx	r6
 8006eec:	1c41      	adds	r1, r0, #1
 8006eee:	d1c8      	bne.n	8006e82 <__sflush_r+0x36>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0c5      	beq.n	8006e82 <__sflush_r+0x36>
 8006ef6:	2b1d      	cmp	r3, #29
 8006ef8:	d001      	beq.n	8006efe <__sflush_r+0xb2>
 8006efa:	2b16      	cmp	r3, #22
 8006efc:	d101      	bne.n	8006f02 <__sflush_r+0xb6>
 8006efe:	602f      	str	r7, [r5, #0]
 8006f00:	e7b1      	b.n	8006e66 <__sflush_r+0x1a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e7ad      	b.n	8006e68 <__sflush_r+0x1c>
 8006f0c:	690f      	ldr	r7, [r1, #16]
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	d0a9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006f12:	0793      	lsls	r3, r2, #30
 8006f14:	680e      	ldr	r6, [r1, #0]
 8006f16:	bf08      	it	eq
 8006f18:	694b      	ldreq	r3, [r1, #20]
 8006f1a:	600f      	str	r7, [r1, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2300      	movne	r3, #0
 8006f20:	eba6 0807 	sub.w	r8, r6, r7
 8006f24:	608b      	str	r3, [r1, #8]
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	dd9c      	ble.n	8006e66 <__sflush_r+0x1a>
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f30:	4643      	mov	r3, r8
 8006f32:	463a      	mov	r2, r7
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b0      	blx	r6
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc06      	bgt.n	8006f4a <__sflush_r+0xfe>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	e78e      	b.n	8006e68 <__sflush_r+0x1c>
 8006f4a:	4407      	add	r7, r0
 8006f4c:	eba8 0800 	sub.w	r8, r8, r0
 8006f50:	e7e9      	b.n	8006f26 <__sflush_r+0xda>
 8006f52:	bf00      	nop
 8006f54:	dfbffffe 	.word	0xdfbffffe

08006f58 <_fflush_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b913      	cbnz	r3, 8006f68 <_fflush_r+0x10>
 8006f62:	2500      	movs	r5, #0
 8006f64:	4628      	mov	r0, r5
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	b118      	cbz	r0, 8006f72 <_fflush_r+0x1a>
 8006f6a:	6a03      	ldr	r3, [r0, #32]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <_fflush_r+0x1a>
 8006f6e:	f7fe fa05 	bl	800537c <__sinit>
 8006f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f3      	beq.n	8006f62 <_fflush_r+0xa>
 8006f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f7c:	07d0      	lsls	r0, r2, #31
 8006f7e:	d404      	bmi.n	8006f8a <_fflush_r+0x32>
 8006f80:	0599      	lsls	r1, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_fflush_r+0x32>
 8006f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f86:	f7fe fb10 	bl	80055aa <__retarget_lock_acquire_recursive>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	f7ff ff5d 	bl	8006e4c <__sflush_r>
 8006f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f94:	07da      	lsls	r2, r3, #31
 8006f96:	4605      	mov	r5, r0
 8006f98:	d4e4      	bmi.n	8006f64 <_fflush_r+0xc>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	059b      	lsls	r3, r3, #22
 8006f9e:	d4e1      	bmi.n	8006f64 <_fflush_r+0xc>
 8006fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa2:	f7fe fb03 	bl	80055ac <__retarget_lock_release_recursive>
 8006fa6:	e7dd      	b.n	8006f64 <_fflush_r+0xc>

08006fa8 <memmove>:
 8006fa8:	4288      	cmp	r0, r1
 8006faa:	b510      	push	{r4, lr}
 8006fac:	eb01 0402 	add.w	r4, r1, r2
 8006fb0:	d902      	bls.n	8006fb8 <memmove+0x10>
 8006fb2:	4284      	cmp	r4, r0
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	d807      	bhi.n	8006fc8 <memmove+0x20>
 8006fb8:	1e43      	subs	r3, r0, #1
 8006fba:	42a1      	cmp	r1, r4
 8006fbc:	d008      	beq.n	8006fd0 <memmove+0x28>
 8006fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fc6:	e7f8      	b.n	8006fba <memmove+0x12>
 8006fc8:	4402      	add	r2, r0
 8006fca:	4601      	mov	r1, r0
 8006fcc:	428a      	cmp	r2, r1
 8006fce:	d100      	bne.n	8006fd2 <memmove+0x2a>
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fda:	e7f7      	b.n	8006fcc <memmove+0x24>

08006fdc <_sbrk_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_sbrk_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa fa16 	bl	8001418 <_sbrk>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_sbrk_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_sbrk_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	200004f4 	.word	0x200004f4

08006ffc <memcpy>:
 8006ffc:	440a      	add	r2, r1
 8006ffe:	4291      	cmp	r1, r2
 8007000:	f100 33ff 	add.w	r3, r0, #4294967295
 8007004:	d100      	bne.n	8007008 <memcpy+0xc>
 8007006:	4770      	bx	lr
 8007008:	b510      	push	{r4, lr}
 800700a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800700e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007012:	4291      	cmp	r1, r2
 8007014:	d1f9      	bne.n	800700a <memcpy+0xe>
 8007016:	bd10      	pop	{r4, pc}

08007018 <__assert_func>:
 8007018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800701a:	4614      	mov	r4, r2
 800701c:	461a      	mov	r2, r3
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <__assert_func+0x2c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4605      	mov	r5, r0
 8007024:	68d8      	ldr	r0, [r3, #12]
 8007026:	b14c      	cbz	r4, 800703c <__assert_func+0x24>
 8007028:	4b07      	ldr	r3, [pc, #28]	; (8007048 <__assert_func+0x30>)
 800702a:	9100      	str	r1, [sp, #0]
 800702c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007030:	4906      	ldr	r1, [pc, #24]	; (800704c <__assert_func+0x34>)
 8007032:	462b      	mov	r3, r5
 8007034:	f000 f872 	bl	800711c <fiprintf>
 8007038:	f000 f882 	bl	8007140 <abort>
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <__assert_func+0x38>)
 800703e:	461c      	mov	r4, r3
 8007040:	e7f3      	b.n	800702a <__assert_func+0x12>
 8007042:	bf00      	nop
 8007044:	200000e4 	.word	0x200000e4
 8007048:	08007967 	.word	0x08007967
 800704c:	08007974 	.word	0x08007974
 8007050:	080079a2 	.word	0x080079a2

08007054 <_calloc_r>:
 8007054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007056:	fba1 2402 	umull	r2, r4, r1, r2
 800705a:	b94c      	cbnz	r4, 8007070 <_calloc_r+0x1c>
 800705c:	4611      	mov	r1, r2
 800705e:	9201      	str	r2, [sp, #4]
 8007060:	f7ff f994 	bl	800638c <_malloc_r>
 8007064:	9a01      	ldr	r2, [sp, #4]
 8007066:	4605      	mov	r5, r0
 8007068:	b930      	cbnz	r0, 8007078 <_calloc_r+0x24>
 800706a:	4628      	mov	r0, r5
 800706c:	b003      	add	sp, #12
 800706e:	bd30      	pop	{r4, r5, pc}
 8007070:	220c      	movs	r2, #12
 8007072:	6002      	str	r2, [r0, #0]
 8007074:	2500      	movs	r5, #0
 8007076:	e7f8      	b.n	800706a <_calloc_r+0x16>
 8007078:	4621      	mov	r1, r4
 800707a:	f7fe fa18 	bl	80054ae <memset>
 800707e:	e7f4      	b.n	800706a <_calloc_r+0x16>

08007080 <__ascii_mbtowc>:
 8007080:	b082      	sub	sp, #8
 8007082:	b901      	cbnz	r1, 8007086 <__ascii_mbtowc+0x6>
 8007084:	a901      	add	r1, sp, #4
 8007086:	b142      	cbz	r2, 800709a <__ascii_mbtowc+0x1a>
 8007088:	b14b      	cbz	r3, 800709e <__ascii_mbtowc+0x1e>
 800708a:	7813      	ldrb	r3, [r2, #0]
 800708c:	600b      	str	r3, [r1, #0]
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	1e10      	subs	r0, r2, #0
 8007092:	bf18      	it	ne
 8007094:	2001      	movne	r0, #1
 8007096:	b002      	add	sp, #8
 8007098:	4770      	bx	lr
 800709a:	4610      	mov	r0, r2
 800709c:	e7fb      	b.n	8007096 <__ascii_mbtowc+0x16>
 800709e:	f06f 0001 	mvn.w	r0, #1
 80070a2:	e7f8      	b.n	8007096 <__ascii_mbtowc+0x16>

080070a4 <_realloc_r>:
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	4680      	mov	r8, r0
 80070aa:	4614      	mov	r4, r2
 80070ac:	460e      	mov	r6, r1
 80070ae:	b921      	cbnz	r1, 80070ba <_realloc_r+0x16>
 80070b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	4611      	mov	r1, r2
 80070b6:	f7ff b969 	b.w	800638c <_malloc_r>
 80070ba:	b92a      	cbnz	r2, 80070c8 <_realloc_r+0x24>
 80070bc:	f7ff f8f2 	bl	80062a4 <_free_r>
 80070c0:	4625      	mov	r5, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	f000 f841 	bl	800714e <_malloc_usable_size_r>
 80070cc:	4284      	cmp	r4, r0
 80070ce:	4607      	mov	r7, r0
 80070d0:	d802      	bhi.n	80070d8 <_realloc_r+0x34>
 80070d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070d6:	d812      	bhi.n	80070fe <_realloc_r+0x5a>
 80070d8:	4621      	mov	r1, r4
 80070da:	4640      	mov	r0, r8
 80070dc:	f7ff f956 	bl	800638c <_malloc_r>
 80070e0:	4605      	mov	r5, r0
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d0ed      	beq.n	80070c2 <_realloc_r+0x1e>
 80070e6:	42bc      	cmp	r4, r7
 80070e8:	4622      	mov	r2, r4
 80070ea:	4631      	mov	r1, r6
 80070ec:	bf28      	it	cs
 80070ee:	463a      	movcs	r2, r7
 80070f0:	f7ff ff84 	bl	8006ffc <memcpy>
 80070f4:	4631      	mov	r1, r6
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff f8d4 	bl	80062a4 <_free_r>
 80070fc:	e7e1      	b.n	80070c2 <_realloc_r+0x1e>
 80070fe:	4635      	mov	r5, r6
 8007100:	e7df      	b.n	80070c2 <_realloc_r+0x1e>

08007102 <__ascii_wctomb>:
 8007102:	b149      	cbz	r1, 8007118 <__ascii_wctomb+0x16>
 8007104:	2aff      	cmp	r2, #255	; 0xff
 8007106:	bf85      	ittet	hi
 8007108:	238a      	movhi	r3, #138	; 0x8a
 800710a:	6003      	strhi	r3, [r0, #0]
 800710c:	700a      	strbls	r2, [r1, #0]
 800710e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007112:	bf98      	it	ls
 8007114:	2001      	movls	r0, #1
 8007116:	4770      	bx	lr
 8007118:	4608      	mov	r0, r1
 800711a:	4770      	bx	lr

0800711c <fiprintf>:
 800711c:	b40e      	push	{r1, r2, r3}
 800711e:	b503      	push	{r0, r1, lr}
 8007120:	4601      	mov	r1, r0
 8007122:	ab03      	add	r3, sp, #12
 8007124:	4805      	ldr	r0, [pc, #20]	; (800713c <fiprintf+0x20>)
 8007126:	f853 2b04 	ldr.w	r2, [r3], #4
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	f000 f83f 	bl	80071b0 <_vfiprintf_r>
 8007132:	b002      	add	sp, #8
 8007134:	f85d eb04 	ldr.w	lr, [sp], #4
 8007138:	b003      	add	sp, #12
 800713a:	4770      	bx	lr
 800713c:	200000e4 	.word	0x200000e4

08007140 <abort>:
 8007140:	b508      	push	{r3, lr}
 8007142:	2006      	movs	r0, #6
 8007144:	f000 fa0c 	bl	8007560 <raise>
 8007148:	2001      	movs	r0, #1
 800714a:	f7fa f8ed 	bl	8001328 <_exit>

0800714e <_malloc_usable_size_r>:
 800714e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007152:	1f18      	subs	r0, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfbc      	itt	lt
 8007158:	580b      	ldrlt	r3, [r1, r0]
 800715a:	18c0      	addlt	r0, r0, r3
 800715c:	4770      	bx	lr

0800715e <__sfputc_r>:
 800715e:	6893      	ldr	r3, [r2, #8]
 8007160:	3b01      	subs	r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	b410      	push	{r4}
 8007166:	6093      	str	r3, [r2, #8]
 8007168:	da08      	bge.n	800717c <__sfputc_r+0x1e>
 800716a:	6994      	ldr	r4, [r2, #24]
 800716c:	42a3      	cmp	r3, r4
 800716e:	db01      	blt.n	8007174 <__sfputc_r+0x16>
 8007170:	290a      	cmp	r1, #10
 8007172:	d103      	bne.n	800717c <__sfputc_r+0x1e>
 8007174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007178:	f000 b934 	b.w	80073e4 <__swbuf_r>
 800717c:	6813      	ldr	r3, [r2, #0]
 800717e:	1c58      	adds	r0, r3, #1
 8007180:	6010      	str	r0, [r2, #0]
 8007182:	7019      	strb	r1, [r3, #0]
 8007184:	4608      	mov	r0, r1
 8007186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800718a:	4770      	bx	lr

0800718c <__sfputs_r>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	4606      	mov	r6, r0
 8007190:	460f      	mov	r7, r1
 8007192:	4614      	mov	r4, r2
 8007194:	18d5      	adds	r5, r2, r3
 8007196:	42ac      	cmp	r4, r5
 8007198:	d101      	bne.n	800719e <__sfputs_r+0x12>
 800719a:	2000      	movs	r0, #0
 800719c:	e007      	b.n	80071ae <__sfputs_r+0x22>
 800719e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a2:	463a      	mov	r2, r7
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff ffda 	bl	800715e <__sfputc_r>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	d1f3      	bne.n	8007196 <__sfputs_r+0xa>
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071b0 <_vfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	460d      	mov	r5, r1
 80071b6:	b09d      	sub	sp, #116	; 0x74
 80071b8:	4614      	mov	r4, r2
 80071ba:	4698      	mov	r8, r3
 80071bc:	4606      	mov	r6, r0
 80071be:	b118      	cbz	r0, 80071c8 <_vfiprintf_r+0x18>
 80071c0:	6a03      	ldr	r3, [r0, #32]
 80071c2:	b90b      	cbnz	r3, 80071c8 <_vfiprintf_r+0x18>
 80071c4:	f7fe f8da 	bl	800537c <__sinit>
 80071c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ca:	07d9      	lsls	r1, r3, #31
 80071cc:	d405      	bmi.n	80071da <_vfiprintf_r+0x2a>
 80071ce:	89ab      	ldrh	r3, [r5, #12]
 80071d0:	059a      	lsls	r2, r3, #22
 80071d2:	d402      	bmi.n	80071da <_vfiprintf_r+0x2a>
 80071d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071d6:	f7fe f9e8 	bl	80055aa <__retarget_lock_acquire_recursive>
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	071b      	lsls	r3, r3, #28
 80071de:	d501      	bpl.n	80071e4 <_vfiprintf_r+0x34>
 80071e0:	692b      	ldr	r3, [r5, #16]
 80071e2:	b99b      	cbnz	r3, 800720c <_vfiprintf_r+0x5c>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f93a 	bl	8007460 <__swsetup_r>
 80071ec:	b170      	cbz	r0, 800720c <_vfiprintf_r+0x5c>
 80071ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f0:	07dc      	lsls	r4, r3, #31
 80071f2:	d504      	bpl.n	80071fe <_vfiprintf_r+0x4e>
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	b01d      	add	sp, #116	; 0x74
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	0598      	lsls	r0, r3, #22
 8007202:	d4f7      	bmi.n	80071f4 <_vfiprintf_r+0x44>
 8007204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007206:	f7fe f9d1 	bl	80055ac <__retarget_lock_release_recursive>
 800720a:	e7f3      	b.n	80071f4 <_vfiprintf_r+0x44>
 800720c:	2300      	movs	r3, #0
 800720e:	9309      	str	r3, [sp, #36]	; 0x24
 8007210:	2320      	movs	r3, #32
 8007212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007216:	f8cd 800c 	str.w	r8, [sp, #12]
 800721a:	2330      	movs	r3, #48	; 0x30
 800721c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073d0 <_vfiprintf_r+0x220>
 8007220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007224:	f04f 0901 	mov.w	r9, #1
 8007228:	4623      	mov	r3, r4
 800722a:	469a      	mov	sl, r3
 800722c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007230:	b10a      	cbz	r2, 8007236 <_vfiprintf_r+0x86>
 8007232:	2a25      	cmp	r2, #37	; 0x25
 8007234:	d1f9      	bne.n	800722a <_vfiprintf_r+0x7a>
 8007236:	ebba 0b04 	subs.w	fp, sl, r4
 800723a:	d00b      	beq.n	8007254 <_vfiprintf_r+0xa4>
 800723c:	465b      	mov	r3, fp
 800723e:	4622      	mov	r2, r4
 8007240:	4629      	mov	r1, r5
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ffa2 	bl	800718c <__sfputs_r>
 8007248:	3001      	adds	r0, #1
 800724a:	f000 80a9 	beq.w	80073a0 <_vfiprintf_r+0x1f0>
 800724e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007250:	445a      	add	r2, fp
 8007252:	9209      	str	r2, [sp, #36]	; 0x24
 8007254:	f89a 3000 	ldrb.w	r3, [sl]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80a1 	beq.w	80073a0 <_vfiprintf_r+0x1f0>
 800725e:	2300      	movs	r3, #0
 8007260:	f04f 32ff 	mov.w	r2, #4294967295
 8007264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007268:	f10a 0a01 	add.w	sl, sl, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007274:	931a      	str	r3, [sp, #104]	; 0x68
 8007276:	4654      	mov	r4, sl
 8007278:	2205      	movs	r2, #5
 800727a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727e:	4854      	ldr	r0, [pc, #336]	; (80073d0 <_vfiprintf_r+0x220>)
 8007280:	f7f8 ffa6 	bl	80001d0 <memchr>
 8007284:	9a04      	ldr	r2, [sp, #16]
 8007286:	b9d8      	cbnz	r0, 80072c0 <_vfiprintf_r+0x110>
 8007288:	06d1      	lsls	r1, r2, #27
 800728a:	bf44      	itt	mi
 800728c:	2320      	movmi	r3, #32
 800728e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007292:	0713      	lsls	r3, r2, #28
 8007294:	bf44      	itt	mi
 8007296:	232b      	movmi	r3, #43	; 0x2b
 8007298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729c:	f89a 3000 	ldrb.w	r3, [sl]
 80072a0:	2b2a      	cmp	r3, #42	; 0x2a
 80072a2:	d015      	beq.n	80072d0 <_vfiprintf_r+0x120>
 80072a4:	9a07      	ldr	r2, [sp, #28]
 80072a6:	4654      	mov	r4, sl
 80072a8:	2000      	movs	r0, #0
 80072aa:	f04f 0c0a 	mov.w	ip, #10
 80072ae:	4621      	mov	r1, r4
 80072b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b4:	3b30      	subs	r3, #48	; 0x30
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d94d      	bls.n	8007356 <_vfiprintf_r+0x1a6>
 80072ba:	b1b0      	cbz	r0, 80072ea <_vfiprintf_r+0x13a>
 80072bc:	9207      	str	r2, [sp, #28]
 80072be:	e014      	b.n	80072ea <_vfiprintf_r+0x13a>
 80072c0:	eba0 0308 	sub.w	r3, r0, r8
 80072c4:	fa09 f303 	lsl.w	r3, r9, r3
 80072c8:	4313      	orrs	r3, r2
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	46a2      	mov	sl, r4
 80072ce:	e7d2      	b.n	8007276 <_vfiprintf_r+0xc6>
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	1d19      	adds	r1, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	9103      	str	r1, [sp, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bfbb      	ittet	lt
 80072dc:	425b      	neglt	r3, r3
 80072de:	f042 0202 	orrlt.w	r2, r2, #2
 80072e2:	9307      	strge	r3, [sp, #28]
 80072e4:	9307      	strlt	r3, [sp, #28]
 80072e6:	bfb8      	it	lt
 80072e8:	9204      	strlt	r2, [sp, #16]
 80072ea:	7823      	ldrb	r3, [r4, #0]
 80072ec:	2b2e      	cmp	r3, #46	; 0x2e
 80072ee:	d10c      	bne.n	800730a <_vfiprintf_r+0x15a>
 80072f0:	7863      	ldrb	r3, [r4, #1]
 80072f2:	2b2a      	cmp	r3, #42	; 0x2a
 80072f4:	d134      	bne.n	8007360 <_vfiprintf_r+0x1b0>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	1d1a      	adds	r2, r3, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	9203      	str	r2, [sp, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	f04f 33ff 	movlt.w	r3, #4294967295
 8007306:	3402      	adds	r4, #2
 8007308:	9305      	str	r3, [sp, #20]
 800730a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073e0 <_vfiprintf_r+0x230>
 800730e:	7821      	ldrb	r1, [r4, #0]
 8007310:	2203      	movs	r2, #3
 8007312:	4650      	mov	r0, sl
 8007314:	f7f8 ff5c 	bl	80001d0 <memchr>
 8007318:	b138      	cbz	r0, 800732a <_vfiprintf_r+0x17a>
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	eba0 000a 	sub.w	r0, r0, sl
 8007320:	2240      	movs	r2, #64	; 0x40
 8007322:	4082      	lsls	r2, r0
 8007324:	4313      	orrs	r3, r2
 8007326:	3401      	adds	r4, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732e:	4829      	ldr	r0, [pc, #164]	; (80073d4 <_vfiprintf_r+0x224>)
 8007330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007334:	2206      	movs	r2, #6
 8007336:	f7f8 ff4b 	bl	80001d0 <memchr>
 800733a:	2800      	cmp	r0, #0
 800733c:	d03f      	beq.n	80073be <_vfiprintf_r+0x20e>
 800733e:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <_vfiprintf_r+0x228>)
 8007340:	bb1b      	cbnz	r3, 800738a <_vfiprintf_r+0x1da>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	3308      	adds	r3, #8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	443b      	add	r3, r7
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	e768      	b.n	8007228 <_vfiprintf_r+0x78>
 8007356:	fb0c 3202 	mla	r2, ip, r2, r3
 800735a:	460c      	mov	r4, r1
 800735c:	2001      	movs	r0, #1
 800735e:	e7a6      	b.n	80072ae <_vfiprintf_r+0xfe>
 8007360:	2300      	movs	r3, #0
 8007362:	3401      	adds	r4, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	4619      	mov	r1, r3
 8007368:	f04f 0c0a 	mov.w	ip, #10
 800736c:	4620      	mov	r0, r4
 800736e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007372:	3a30      	subs	r2, #48	; 0x30
 8007374:	2a09      	cmp	r2, #9
 8007376:	d903      	bls.n	8007380 <_vfiprintf_r+0x1d0>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0c6      	beq.n	800730a <_vfiprintf_r+0x15a>
 800737c:	9105      	str	r1, [sp, #20]
 800737e:	e7c4      	b.n	800730a <_vfiprintf_r+0x15a>
 8007380:	fb0c 2101 	mla	r1, ip, r1, r2
 8007384:	4604      	mov	r4, r0
 8007386:	2301      	movs	r3, #1
 8007388:	e7f0      	b.n	800736c <_vfiprintf_r+0x1bc>
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b12      	ldr	r3, [pc, #72]	; (80073dc <_vfiprintf_r+0x22c>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4630      	mov	r0, r6
 8007396:	f7fd fb9f 	bl	8004ad8 <_printf_float>
 800739a:	4607      	mov	r7, r0
 800739c:	1c78      	adds	r0, r7, #1
 800739e:	d1d6      	bne.n	800734e <_vfiprintf_r+0x19e>
 80073a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a2:	07d9      	lsls	r1, r3, #31
 80073a4:	d405      	bmi.n	80073b2 <_vfiprintf_r+0x202>
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d402      	bmi.n	80073b2 <_vfiprintf_r+0x202>
 80073ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ae:	f7fe f8fd 	bl	80055ac <__retarget_lock_release_recursive>
 80073b2:	89ab      	ldrh	r3, [r5, #12]
 80073b4:	065b      	lsls	r3, r3, #25
 80073b6:	f53f af1d 	bmi.w	80071f4 <_vfiprintf_r+0x44>
 80073ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073bc:	e71c      	b.n	80071f8 <_vfiprintf_r+0x48>
 80073be:	ab03      	add	r3, sp, #12
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	462a      	mov	r2, r5
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <_vfiprintf_r+0x22c>)
 80073c6:	a904      	add	r1, sp, #16
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7fd fe29 	bl	8005020 <_printf_i>
 80073ce:	e7e4      	b.n	800739a <_vfiprintf_r+0x1ea>
 80073d0:	0800794c 	.word	0x0800794c
 80073d4:	08007956 	.word	0x08007956
 80073d8:	08004ad9 	.word	0x08004ad9
 80073dc:	0800718d 	.word	0x0800718d
 80073e0:	08007952 	.word	0x08007952

080073e4 <__swbuf_r>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	460e      	mov	r6, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	4605      	mov	r5, r0
 80073ec:	b118      	cbz	r0, 80073f6 <__swbuf_r+0x12>
 80073ee:	6a03      	ldr	r3, [r0, #32]
 80073f0:	b90b      	cbnz	r3, 80073f6 <__swbuf_r+0x12>
 80073f2:	f7fd ffc3 	bl	800537c <__sinit>
 80073f6:	69a3      	ldr	r3, [r4, #24]
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	071a      	lsls	r2, r3, #28
 80073fe:	d525      	bpl.n	800744c <__swbuf_r+0x68>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b31b      	cbz	r3, 800744c <__swbuf_r+0x68>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	6922      	ldr	r2, [r4, #16]
 8007408:	1a98      	subs	r0, r3, r2
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	b2f6      	uxtb	r6, r6
 800740e:	4283      	cmp	r3, r0
 8007410:	4637      	mov	r7, r6
 8007412:	dc04      	bgt.n	800741e <__swbuf_r+0x3a>
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f7ff fd9e 	bl	8006f58 <_fflush_r>
 800741c:	b9e0      	cbnz	r0, 8007458 <__swbuf_r+0x74>
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	3b01      	subs	r3, #1
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	701e      	strb	r6, [r3, #0]
 800742c:	6962      	ldr	r2, [r4, #20]
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	429a      	cmp	r2, r3
 8007432:	d004      	beq.n	800743e <__swbuf_r+0x5a>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d506      	bpl.n	8007448 <__swbuf_r+0x64>
 800743a:	2e0a      	cmp	r6, #10
 800743c:	d104      	bne.n	8007448 <__swbuf_r+0x64>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f7ff fd89 	bl	8006f58 <_fflush_r>
 8007446:	b938      	cbnz	r0, 8007458 <__swbuf_r+0x74>
 8007448:	4638      	mov	r0, r7
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f806 	bl	8007460 <__swsetup_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	d0d5      	beq.n	8007404 <__swbuf_r+0x20>
 8007458:	f04f 37ff 	mov.w	r7, #4294967295
 800745c:	e7f4      	b.n	8007448 <__swbuf_r+0x64>
	...

08007460 <__swsetup_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4b2a      	ldr	r3, [pc, #168]	; (800750c <__swsetup_r+0xac>)
 8007464:	4605      	mov	r5, r0
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	460c      	mov	r4, r1
 800746a:	b118      	cbz	r0, 8007474 <__swsetup_r+0x14>
 800746c:	6a03      	ldr	r3, [r0, #32]
 800746e:	b90b      	cbnz	r3, 8007474 <__swsetup_r+0x14>
 8007470:	f7fd ff84 	bl	800537c <__sinit>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800747a:	0718      	lsls	r0, r3, #28
 800747c:	d422      	bmi.n	80074c4 <__swsetup_r+0x64>
 800747e:	06d9      	lsls	r1, r3, #27
 8007480:	d407      	bmi.n	8007492 <__swsetup_r+0x32>
 8007482:	2309      	movs	r3, #9
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e034      	b.n	80074fc <__swsetup_r+0x9c>
 8007492:	0758      	lsls	r0, r3, #29
 8007494:	d512      	bpl.n	80074bc <__swsetup_r+0x5c>
 8007496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007498:	b141      	cbz	r1, 80074ac <__swsetup_r+0x4c>
 800749a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749e:	4299      	cmp	r1, r3
 80074a0:	d002      	beq.n	80074a8 <__swsetup_r+0x48>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7fe fefe 	bl	80062a4 <_free_r>
 80074a8:	2300      	movs	r3, #0
 80074aa:	6363      	str	r3, [r4, #52]	; 0x34
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	2300      	movs	r3, #0
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	f043 0308 	orr.w	r3, r3, #8
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	b94b      	cbnz	r3, 80074dc <__swsetup_r+0x7c>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d2:	d003      	beq.n	80074dc <__swsetup_r+0x7c>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 f884 	bl	80075e4 <__smakebuf_r>
 80074dc:	89a0      	ldrh	r0, [r4, #12]
 80074de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e2:	f010 0301 	ands.w	r3, r0, #1
 80074e6:	d00a      	beq.n	80074fe <__swsetup_r+0x9e>
 80074e8:	2300      	movs	r3, #0
 80074ea:	60a3      	str	r3, [r4, #8]
 80074ec:	6963      	ldr	r3, [r4, #20]
 80074ee:	425b      	negs	r3, r3
 80074f0:	61a3      	str	r3, [r4, #24]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	b943      	cbnz	r3, 8007508 <__swsetup_r+0xa8>
 80074f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074fa:	d1c4      	bne.n	8007486 <__swsetup_r+0x26>
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	0781      	lsls	r1, r0, #30
 8007500:	bf58      	it	pl
 8007502:	6963      	ldrpl	r3, [r4, #20]
 8007504:	60a3      	str	r3, [r4, #8]
 8007506:	e7f4      	b.n	80074f2 <__swsetup_r+0x92>
 8007508:	2000      	movs	r0, #0
 800750a:	e7f7      	b.n	80074fc <__swsetup_r+0x9c>
 800750c:	200000e4 	.word	0x200000e4

08007510 <_raise_r>:
 8007510:	291f      	cmp	r1, #31
 8007512:	b538      	push	{r3, r4, r5, lr}
 8007514:	4604      	mov	r4, r0
 8007516:	460d      	mov	r5, r1
 8007518:	d904      	bls.n	8007524 <_raise_r+0x14>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007526:	b112      	cbz	r2, 800752e <_raise_r+0x1e>
 8007528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800752c:	b94b      	cbnz	r3, 8007542 <_raise_r+0x32>
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f830 	bl	8007594 <_getpid_r>
 8007534:	462a      	mov	r2, r5
 8007536:	4601      	mov	r1, r0
 8007538:	4620      	mov	r0, r4
 800753a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753e:	f000 b817 	b.w	8007570 <_kill_r>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d00a      	beq.n	800755c <_raise_r+0x4c>
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	d103      	bne.n	8007552 <_raise_r+0x42>
 800754a:	2316      	movs	r3, #22
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	2001      	movs	r0, #1
 8007550:	e7e7      	b.n	8007522 <_raise_r+0x12>
 8007552:	2400      	movs	r4, #0
 8007554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007558:	4628      	mov	r0, r5
 800755a:	4798      	blx	r3
 800755c:	2000      	movs	r0, #0
 800755e:	e7e0      	b.n	8007522 <_raise_r+0x12>

08007560 <raise>:
 8007560:	4b02      	ldr	r3, [pc, #8]	; (800756c <raise+0xc>)
 8007562:	4601      	mov	r1, r0
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f7ff bfd3 	b.w	8007510 <_raise_r>
 800756a:	bf00      	nop
 800756c:	200000e4 	.word	0x200000e4

08007570 <_kill_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	; (8007590 <_kill_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7f9 fec3 	bl	8001308 <_kill>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_kill_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_kill_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	200004f4 	.word	0x200004f4

08007594 <_getpid_r>:
 8007594:	f7f9 beb0 	b.w	80012f8 <_getpid>

08007598 <__swhatbuf_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	2900      	cmp	r1, #0
 80075a2:	b096      	sub	sp, #88	; 0x58
 80075a4:	4615      	mov	r5, r2
 80075a6:	461e      	mov	r6, r3
 80075a8:	da0d      	bge.n	80075c6 <__swhatbuf_r+0x2e>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075b0:	f04f 0100 	mov.w	r1, #0
 80075b4:	bf0c      	ite	eq
 80075b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075ba:	2340      	movne	r3, #64	; 0x40
 80075bc:	2000      	movs	r0, #0
 80075be:	6031      	str	r1, [r6, #0]
 80075c0:	602b      	str	r3, [r5, #0]
 80075c2:	b016      	add	sp, #88	; 0x58
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	466a      	mov	r2, sp
 80075c8:	f000 f848 	bl	800765c <_fstat_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	dbec      	blt.n	80075aa <__swhatbuf_r+0x12>
 80075d0:	9901      	ldr	r1, [sp, #4]
 80075d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075da:	4259      	negs	r1, r3
 80075dc:	4159      	adcs	r1, r3
 80075de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075e2:	e7eb      	b.n	80075bc <__swhatbuf_r+0x24>

080075e4 <__smakebuf_r>:
 80075e4:	898b      	ldrh	r3, [r1, #12]
 80075e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075e8:	079d      	lsls	r5, r3, #30
 80075ea:	4606      	mov	r6, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	d507      	bpl.n	8007600 <__smakebuf_r+0x1c>
 80075f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	2301      	movs	r3, #1
 80075fa:	6163      	str	r3, [r4, #20]
 80075fc:	b002      	add	sp, #8
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	ab01      	add	r3, sp, #4
 8007602:	466a      	mov	r2, sp
 8007604:	f7ff ffc8 	bl	8007598 <__swhatbuf_r>
 8007608:	9900      	ldr	r1, [sp, #0]
 800760a:	4605      	mov	r5, r0
 800760c:	4630      	mov	r0, r6
 800760e:	f7fe febd 	bl	800638c <_malloc_r>
 8007612:	b948      	cbnz	r0, 8007628 <__smakebuf_r+0x44>
 8007614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d4ef      	bmi.n	80075fc <__smakebuf_r+0x18>
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e7e3      	b.n	80075f0 <__smakebuf_r+0xc>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	6020      	str	r0, [r4, #0]
 800762c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	9b00      	ldr	r3, [sp, #0]
 8007634:	6163      	str	r3, [r4, #20]
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	6120      	str	r0, [r4, #16]
 800763a:	b15b      	cbz	r3, 8007654 <__smakebuf_r+0x70>
 800763c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f81d 	bl	8007680 <_isatty_r>
 8007646:	b128      	cbz	r0, 8007654 <__smakebuf_r+0x70>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	431d      	orrs	r5, r3
 8007658:	81a5      	strh	r5, [r4, #12]
 800765a:	e7cf      	b.n	80075fc <__smakebuf_r+0x18>

0800765c <_fstat_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d07      	ldr	r5, [pc, #28]	; (800767c <_fstat_r+0x20>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	f7f9 feac 	bl	80013c6 <_fstat>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_fstat_r+0x1c>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	b103      	cbz	r3, 8007678 <_fstat_r+0x1c>
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	200004f4 	.word	0x200004f4

08007680 <_isatty_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d06      	ldr	r5, [pc, #24]	; (800769c <_isatty_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	f7f9 feab 	bl	80013e6 <_isatty>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_isatty_r+0x1a>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_isatty_r+0x1a>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	200004f4 	.word	0x200004f4

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
