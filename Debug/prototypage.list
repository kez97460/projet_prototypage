
prototypage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006aa8  08006aa8  00016aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e94  08006e94  00020254  2**0
                  CONTENTS
  4 .ARM          00000000  08006e94  08006e94  00020254  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e94  08006e94  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08006e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000258  080070f0  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080070f0  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db59  00000000  00000000  000202c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5d  00000000  00000000  0002de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d0  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016701  00000000  00000000  000310e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f65d  00000000  00000000  000477e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089810  00000000  00000000  00056e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e0  00000000  00000000  000e0650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e4c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a90 	.word	0x08006a90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08006a90 	.word	0x08006a90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fbf9 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f83d 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f8e7 	bl	8000d88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8b5 	bl	8000d28 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000bbe:	f000 f87d 	bl	8000cbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <main+0x6c>)
 8000bc4:	f002 fa2e 	bl	8003024 <HAL_TIM_Base_Start_IT>
  // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

  HAL_UART_Transmit(&huart2, (unsigned char*) "\r\nInitialised successfully \r\n--- \r\n", 64, 500);
 8000bc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <main+0x70>)
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <main+0x74>)
 8000bd2:	f002 fd03 	bl	80035dc <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f000 fc49 	bl	8001470 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  measure();
 8000bde:	f000 fa09 	bl	8000ff4 <measure>
	  HAL_Delay(100);
 8000be2:	2064      	movs	r0, #100	; 0x64
 8000be4:	f000 fc44 	bl	8001470 <HAL_Delay>

	  sprintf(uart_message, "Freq : %f Hz  - C : %f pF \r\n", sensor_input_frequency_hz, sensor_capacity_pF);
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <main+0x78>)
 8000bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <main+0x7c>)
 8000bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	490a      	ldr	r1, [pc, #40]	; (8000c28 <main+0x80>)
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <main+0x84>)
 8000c00:	f003 fdea 	bl	80047d8 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*) uart_message, 64, 500);
 8000c04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <main+0x84>)
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <main+0x74>)
 8000c0e:	f002 fce5 	bl	80035dc <HAL_UART_Transmit>
	  measure();
 8000c12:	e7e4      	b.n	8000bde <main+0x36>
 8000c14:	20000274 	.word	0x20000274
 8000c18:	08006aa8 	.word	0x08006aa8
 8000c1c:	200002c0 	.word	0x200002c0
 8000c20:	20000348 	.word	0x20000348
 8000c24:	20000350 	.word	0x20000350
 8000c28:	08006acc 	.word	0x08006acc
 8000c2c:	20000000 	.word	0x20000000

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b090      	sub	sp, #64	; 0x40
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	2228      	movs	r2, #40	; 0x28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fe2d 	bl	800489e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fed5 	bl	8001a20 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c7c:	f000 f986 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 feff 	bl	8002a9c <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ca4:	f000 f972 	bl	8000f8c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f002 f870 	bl	8002d94 <HAL_RCC_MCOConfig>
}
 8000cb4:	bf00      	nop
 8000cb6:	3740      	adds	r7, #64	; 0x40
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <MX_TIM6_Init+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000cd4:	2217      	movs	r2, #23
 8000cd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000cee:	f002 f941 	bl	8002f74 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cf8:	f000 f948 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_TIM6_Init+0x64>)
 8000d0a:	f002 fb95 	bl	8003438 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 f93a 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000274 	.word	0x20000274
 8000d24:	40001000 	.word	0x40001000

08000d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <MX_USART2_UART_Init+0x5c>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f002 fbe8 	bl	8003540 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d76:	f000 f909 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002c0 	.word	0x200002c0
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_GPIO_Init+0xdc>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	481f      	ldr	r0, [pc, #124]	; (8000e68 <MX_GPIO_Init+0xe0>)
 8000dec:	f000 fde8 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C_input_Pin */
  GPIO_InitStruct.Pin = C_input_Pin;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(C_input_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fc68 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fc56 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e30:	2308      	movs	r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_GPIO_Init+0xe0>)
 8000e48:	f000 fc48 	bl	80016dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2006      	movs	r0, #6
 8000e52:	f000 fc0c 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e56:	2006      	movs	r0, #6
 8000e58:	f000 fc25 	bl	80016a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	00000000 	.word	0x00000000

08000e70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) // TIM6 : counts to 1000 with increments every 1us, for a total 1ms
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d14e      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if(tim6_activate && !tim6_active)
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d011      	beq.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			tim6_active = 1;
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
			rising_edge_count = 0; // reset count
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
			// Calculations
			sensor_input_frequency_hz = rising_edge_count * 1000;
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
		}
	}
}
 8000eae:	e037      	b.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0xb0>
		else if(tim6_active)
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d032      	beq.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0xb0>
			tim6_active = 0;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			sensor_input_frequency_hz = rising_edge_count * 1000;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb16 	bl	8000504 <__aeabi_ui2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	491a      	ldr	r1, [pc, #104]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ede:	e9c1 2300 	strd	r2, r3, [r1]
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	4917      	ldr	r1, [pc, #92]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000eee:	f7ff fcad 	bl	800084c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	a30b      	add	r3, pc, #44	; (adr r3, 8000f28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fb7a 	bl	80005f8 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	a308      	add	r3, pc, #32	; (adr r3, 8000f30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff f9b9 	bl	8000288 <__aeabi_dsub>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f1c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	412f88ea 	.word	0x412f88ea
 8000f30:	b851eb85 	.word	0xb851eb85
 8000f34:	402d051e 	.word	0x402d051e
 8000f38:	40001000 	.word	0x40001000
 8000f3c:	20000359 	.word	0x20000359
 8000f40:	20000358 	.word	0x20000358
 8000f44:	2000035c 	.word	0x2000035c
 8000f48:	20000348 	.word	0x20000348
 8000f4c:	3ff00000 	.word	0x3ff00000
 8000f50:	20000350 	.word	0x20000350

08000f54 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d109      	bne.n	8000f78 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(tim6_active)
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_GPIO_EXTI_Callback+0x30>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_GPIO_EXTI_Callback+0x24>
		{
			rising_edge_count++;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f76:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000358 	.word	0x20000358
 8000f88:	2000035c 	.word	0x2000035c

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <startMeasure>:

#include "sensor.h"

// Starts a measure on next tim6 overflow
void startMeasure()
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	tim6_activate = 1;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <startMeasure+0x1c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
	rising_edge_count = 0;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <startMeasure+0x20>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000359 	.word	0x20000359
 8000fb8:	2000035c 	.word	0x2000035c

08000fbc <isMeasuring>:

// Check if the system is currently measuring
_Bool isMeasuring()
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return (tim6_activate || tim6_active);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <isMeasuring+0x30>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <isMeasuring+0x18>
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <isMeasuring+0x34>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <isMeasuring+0x1c>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <isMeasuring+0x1e>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000359 	.word	0x20000359
 8000ff0:	20000358 	.word	0x20000358

08000ff4 <measure>:

void measure()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	startMeasure();
 8000ff8:	f7ff ffce 	bl	8000f98 <startMeasure>
	while(isMeasuring()) {};
 8000ffc:	bf00      	nop
 8000ffe:	f7ff ffdd 	bl	8000fbc <isMeasuring>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1fa      	bne.n	8000ffe <measure+0xa>
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x44>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x44>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x44>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d113      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_TIM_Base_MspInit+0x48>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_TIM_Base_MspInit+0x48>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_TIM_Base_MspInit+0x48>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2036      	movs	r0, #54	; 0x36
 8001088:	f000 faf1 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800108c:	2036      	movs	r0, #54	; 0x36
 800108e:	f000 fb0a 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40001000 	.word	0x40001000
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_UART_MspInit+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d128      	bne.n	8001118 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x80>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f000 fae2 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f95c 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_input_Pin);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fc35 	bl	80019f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM6_DAC_IRQHandler+0x10>)
 8001192:	f001 ff9b 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000274 	.word	0x20000274

080011a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return 1;
 80011a4:	2301      	movs	r3, #1
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_kill>:

int _kill(int pid, int sig)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ba:	f003 fbc3 	bl	8004944 <__errno>
 80011be:	4603      	mov	r3, r0
 80011c0:	2216      	movs	r2, #22
 80011c2:	601a      	str	r2, [r3, #0]
  return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_exit>:

void _exit (int status)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffe7 	bl	80011b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011e2:	e7fe      	b.n	80011e2 <_exit+0x12>

080011e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
  }

  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e009      	b.n	8001244 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <_write+0x12>
  }
  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_close>:

int _close(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127e:	605a      	str	r2, [r3, #4]
  return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_isatty>:

int _isatty(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f003 fb28 	bl	8004944 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20004000 	.word	0x20004000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000360 	.word	0x20000360
 8001328:	200004b8 	.word	0x200004b8

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ffea 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f003 fae7 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff fc11 	bl	8000ba8 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001388:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001394:	08006e9c 	.word	0x08006e9c
  ldr r2, =_sbss
 8001398:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800139c:	200004b4 	.word	0x200004b4

080013a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f94f 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fe26 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f967 	bl	80016c2 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f92f 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000080 	.word	0x20000080
 8001428:	20000088 	.word	0x20000088
 800142c:	20000084 	.word	0x20000084

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000088 	.word	0x20000088
 8001454:	20000364 	.word	0x20000364

08001458 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;  
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000364 	.word	0x20000364

08001470 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffde 	bl	8001458 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000088 	.word	0x20000088

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff29 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff3e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff31 	bl	800151c <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e14e      	b.n	800198a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8140 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 809a 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d013      	beq.n	80018bc <HAL_GPIO_Init+0x1e0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_GPIO_Init+0x2d8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1d8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1d4>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e004      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018bc:	2300      	movs	r3, #0
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ce:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001900:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001954:	4a19      	ldr	r2, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f aea9 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff faa0 	bl	8000f54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f001 b823 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 817d 	beq.w	8001d56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a5c:	4bbc      	ldr	r3, [pc, #752]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d00c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a68:	4bb9      	ldr	r3, [pc, #740]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d15c      	bne.n	8001b2e <HAL_RCC_OscConfig+0x10e>
 8001a74:	4bb6      	ldr	r3, [pc, #728]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d155      	bne.n	8001b2e <HAL_RCC_OscConfig+0x10e>
 8001a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x94>
 8001aae:	4ba8      	ldr	r3, [pc, #672]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e015      	b.n	8001ae0 <HAL_RCC_OscConfig+0xc0>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ad0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001adc:	4b9c      	ldr	r3, [pc, #624]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ae8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001af4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 811f 	beq.w	8001d54 <HAL_RCC_OscConfig+0x334>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8116 	bne.w	8001d54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f000 bfaf 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12e>
 8001b40:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a82      	ldr	r2, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e036      	b.n	8001bbc <HAL_RCC_OscConfig+0x19c>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x158>
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7b      	ldr	r2, [pc, #492]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a78      	ldr	r2, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e021      	b.n	8001bbc <HAL_RCC_OscConfig+0x19c>
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x184>
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a70      	ldr	r2, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x19c>
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a69      	ldr	r2, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bbc:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f023 020f 	bic.w	r2, r3, #15
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	495f      	ldr	r1, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d059      	beq.n	8001c9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fc37 	bl	8001458 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc32 	bl	8001458 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bf43 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 8001c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x218>
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_OscConfig+0x244>
 8001c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ab      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1d0>
 8001c98:	e05d      	b.n	8001d56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fbdd 	bl	8001458 <HAL_GetTick>
 8001c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fbd8 	bl	8001458 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bee9 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x2cc>
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x2f8>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_OscConfig+0x330>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ab      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x284>
 8001d4c:	e003      	b.n	8001d56 <HAL_RCC_OscConfig+0x336>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 817d 	beq.w	8002066 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d6c:	4ba6      	ldr	r3, [pc, #664]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d78:	4ba3      	ldr	r3, [pc, #652]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d172      	bne.n	8001e6a <HAL_RCC_OscConfig+0x44a>
 8001d84:	4ba0      	ldr	r3, [pc, #640]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d16c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x44a>
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001da2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3a0>
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c8>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001de4:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2202      	movs	r2, #2
 8001dea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCC_OscConfig+0x410>
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 be2e 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	21f8      	movs	r1, #248	; 0xf8
 8001e46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e4e:	fa91 f1a1 	rbit	r1, r1
 8001e52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e5a:	fab1 f181 	clz	r1, r1
 8001e5e:	b2c9      	uxtb	r1, r1
 8001e60:	408b      	lsls	r3, r1
 8001e62:	4969      	ldr	r1, [pc, #420]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e68:	e0fd      	b.n	8002066 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8088 	beq.w	8001f8c <HAL_RCC_OscConfig+0x56c>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fad6 	bl	8001458 <HAL_GetTick>
 8001eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fad1 	bl	8001458 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f000 bde2 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4d8>
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x500>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2202      	movs	r2, #2
 8001f22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0af      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	21f8      	movs	r1, #248	; 0xf8
 8001f68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f70:	fa91 f1a1 	rbit	r1, r1
 8001f74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f7c:	fab1 f181 	clz	r1, r1
 8001f80:	b2c9      	uxtb	r1, r1
 8001f82:	408b      	lsls	r3, r1
 8001f84:	4920      	ldr	r1, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
 8001f8a:	e06c      	b.n	8002066 <HAL_RCC_OscConfig+0x646>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa4e 	bl	8001458 <HAL_GetTick>
 8001fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fa49 	bl	8001458 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d902      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f000 bd5a 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d104      	bne.n	800200c <HAL_RCC_OscConfig+0x5ec>
 8002002:	4b01      	ldr	r3, [pc, #4]	; (8002008 <HAL_RCC_OscConfig+0x5e8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e015      	b.n	8002034 <HAL_RCC_OscConfig+0x614>
 8002008:	40021000 	.word	0x40021000
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002024:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002030:	4bc8      	ldr	r3, [pc, #800]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2202      	movs	r2, #2
 8002036:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800203a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002046:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ad      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8110 	beq.w	800229c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d079      	beq.n	8002180 <HAL_RCC_OscConfig+0x760>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800209e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	4bab      	ldr	r3, [pc, #684]	; (8002358 <HAL_RCC_OscConfig+0x938>)
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff f9cf 	bl	8001458 <HAL_GetTick>
 80020ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff f9ca 	bl	8001458 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d902      	bls.n	80020d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	f000 bcdb 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800212e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800213c:	2102      	movs	r1, #2
 800213e:	6019      	str	r1, [r3, #0]
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f1a3 	rbit	r1, r3
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002156:	6019      	str	r1, [r3, #0]
  return result;
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0a0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x6a0>
 800217e:	e08d      	b.n	800229c <HAL_RCC_OscConfig+0x87c>
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021a2:	601a      	str	r2, [r3, #0]
  return result;
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x938>)
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	461a      	mov	r2, r3
 80021be:	2300      	movs	r3, #0
 80021c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff f949 	bl	8001458 <HAL_GetTick>
 80021c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff f944 	bl	8001458 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d902      	bls.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	f000 bc55 	b.w	8002a8c <HAL_RCC_OscConfig+0x106c>
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800224c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 8002250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800225a:	2102      	movs	r1, #2
 800225c:	6019      	str	r1, [r3, #0]
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f1a3 	rbit	r1, r3
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002274:	6019      	str	r1, [r3, #0]
  return result;
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d197      	bne.n	80021cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 81a1 	beq.w	80025f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_RCC_OscConfig+0x93c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x93c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_RCC_OscConfig+0x93c>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7ff f8a5 	bl	8001458 <HAL_GetTick>
 800230e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	e009      	b.n	8002328 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7ff f8a0 	bl	8001458 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e3b1      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_RCC_OscConfig+0x93c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ef      	beq.n	8002314 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x940>
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a02      	ldr	r2, [pc, #8]	; (8002354 <HAL_RCC_OscConfig+0x934>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e03c      	b.n	80023cc <HAL_RCC_OscConfig+0x9ac>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	10908120 	.word	0x10908120
 800235c:	40007000 	.word	0x40007000
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10c      	bne.n	800238a <HAL_RCC_OscConfig+0x96a>
 8002370:	4bc1      	ldr	r3, [pc, #772]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4ac0      	ldr	r2, [pc, #768]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	4bbe      	ldr	r3, [pc, #760]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4abd      	ldr	r2, [pc, #756]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	e020      	b.n	80023cc <HAL_RCC_OscConfig+0x9ac>
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x994>
 800239a:	4bb7      	ldr	r3, [pc, #732]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4ab6      	ldr	r2, [pc, #728]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4bb4      	ldr	r3, [pc, #720]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4ab3      	ldr	r2, [pc, #716]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0x9ac>
 80023b4:	4bb0      	ldr	r3, [pc, #704]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4aaf      	ldr	r2, [pc, #700]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	4bad      	ldr	r3, [pc, #692]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4aac      	ldr	r2, [pc, #688]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8081 	beq.w	80024e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f83b 	bl	8001458 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7ff f836 	bl	8001458 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e345      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800242c:	2202      	movs	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002446:	601a      	str	r2, [r3, #0]
  return result;
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002450:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d102      	bne.n	800246c <HAL_RCC_OscConfig+0xa4c>
 8002466:	4b84      	ldr	r3, [pc, #528]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	e013      	b.n	8002494 <HAL_RCC_OscConfig+0xa74>
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002474:	2202      	movs	r2, #2
 8002476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	4b79      	ldr	r3, [pc, #484]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002498:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800249c:	2102      	movs	r1, #2
 800249e:	6011      	str	r1, [r2, #0]
 80024a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	fa92 f1a2 	rbit	r1, r2
 80024ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024b6:	6011      	str	r1, [r2, #0]
  return result;
 80024b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d084      	beq.n	80023e8 <HAL_RCC_OscConfig+0x9c8>
 80024de:	e07f      	b.n	80025e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe ffba 	bl	8001458 <HAL_GetTick>
 80024e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe ffb5 	bl	8001458 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e2c4      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002548:	601a      	str	r2, [r3, #0]
  return result;
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002552:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0xb4e>
 8002568:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	e013      	b.n	8002596 <HAL_RCC_OscConfig+0xb76>
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800259e:	2102      	movs	r1, #2
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fa92 f1a2 	rbit	r1, r2
 80025b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025b8:	6011      	str	r1, [r2, #0]
  return result;
 80025ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d184      	bne.n	80024ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8242 	beq.w	8002a8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_RCC_OscConfig+0xc58>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b08      	cmp	r3, #8
 8002610:	f000 8213 	beq.w	8002a3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	f040 8162 	bne.w	80028ea <HAL_RCC_OscConfig+0xeca>
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800262e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800264a:	601a      	str	r2, [r3, #0]
  return result;
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002654:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	461a      	mov	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fef4 	bl	8001458 <HAL_GetTick>
 8002670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e00c      	b.n	8002690 <HAL_RCC_OscConfig+0xc70>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe feec 	bl	8001458 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1fd      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026b4:	601a      	str	r2, [r3, #0]
  return result;
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <HAL_RCC_OscConfig+0xcba>
 80026d4:	4bb0      	ldr	r3, [pc, #704]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e027      	b.n	800272a <HAL_RCC_OscConfig+0xd0a>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002732:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002736:	6011      	str	r1, [r2, #0]
 8002738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800273c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fa92 f1a2 	rbit	r1, r2
 8002746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800274e:	6011      	str	r1, [r2, #0]
  return result;
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d182      	bne.n	800267c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	430b      	orrs	r3, r1
 8002798:	497f      	ldr	r1, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027c2:	601a      	str	r2, [r3, #0]
  return result;
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	461a      	mov	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe38 	bl	8001458 <HAL_GetTick>
 80027e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fe33 	bl	8001458 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e144      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800280a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002826:	601a      	str	r2, [r3, #0]
  return result;
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0xe2c>
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e027      	b.n	800289c <HAL_RCC_OscConfig+0xe7c>
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800287a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	fa92 f1a2 	rbit	r1, r2
 80028b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028c0:	6011      	str	r1, [r2, #0]
  return result;
 80028c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d082      	beq.n	80027ee <HAL_RCC_OscConfig+0xdce>
 80028e8:	e0cf      	b.n	8002a8a <HAL_RCC_OscConfig+0x106a>
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800290e:	601a      	str	r2, [r3, #0]
  return result;
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002918:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	461a      	mov	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fd92 	bl	8001458 <HAL_GetTick>
 8002934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	e009      	b.n	800294e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fd8d 	bl	8001458 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e09e      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002972:	601a      	str	r2, [r3, #0]
  return result;
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800297c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d104      	bne.n	800299c <HAL_RCC_OscConfig+0xf7c>
 8002992:	4b01      	ldr	r3, [pc, #4]	; (8002998 <HAL_RCC_OscConfig+0xf78>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e029      	b.n	80029ec <HAL_RCC_OscConfig+0xfcc>
 8002998:	40021000 	.word	0x40021000
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x1078>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fa92 f1a2 	rbit	r1, r2
 8002a08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a10:	6011      	str	r1, [r2, #0]
  return result;
 8002a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d180      	bne.n	800293a <HAL_RCC_OscConfig+0xf1a>
 8002a38:	e027      	b.n	8002a8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e01e      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x1078>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b09e      	sub	sp, #120	; 0x78
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e162      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	498b      	ldr	r1, [pc, #556]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e14a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	497f      	ldr	r1, [pc, #508]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80dc 	beq.w	8002cc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d13c      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xf6>
 8002b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xa6>
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	e00f      	b.n	8002b62 <HAL_RCC_ClockConfig+0xc6>
 8002b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
 8002b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5e:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b66:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d17b      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0f3      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d13c      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x178>
 8002b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x128>
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_ClockConfig+0x148>
 8002bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	4b46      	ldr	r3, [pc, #280]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d13a      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b2      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
 8002c14:	2302      	movs	r3, #2
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x1a0>
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e00d      	b.n	8002c58 <HAL_RCC_ClockConfig+0x1bc>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	2302      	movs	r3, #2
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	61ba      	str	r2, [r7, #24]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	617a      	str	r2, [r7, #20]
  return result;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f042 0220 	orr.w	r2, r2, #32
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f002 021f 	and.w	r2, r2, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e079      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe fbde 	bl	8001458 <HAL_GetTick>
 8002c9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe fbda 	bl	8001458 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e061      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d214      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4906      	ldr	r1, [pc, #24]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_ClockConfig+0x2de>
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_ClockConfig+0x2e8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	491a      	ldr	r1, [pc, #104]	; (8002d84 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4912      	ldr	r1, [pc, #72]	; (8002d84 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d3e:	f000 f85d 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002d42:	4601      	mov	r1, r0
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_RCC_ClockConfig+0x2e8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d4c:	22f0      	movs	r2, #240	; 0xf0
 8002d4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	fa92 f2a2 	rbit	r2, r2
 8002d56:	60fa      	str	r2, [r7, #12]
  return result;
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	fab2 f282 	clz	r2, r2
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	40d3      	lsrs	r3, r2
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x2ec>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <HAL_RCC_ClockConfig+0x2f0>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_RCC_ClockConfig+0x2f4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fb2c 	bl	80013d0 <HAL_InitTick>
  
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3778      	adds	r7, #120	; 0x78
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08006aec 	.word	0x08006aec
 8002d8c:	20000080 	.word	0x20000080
 8002d90:	20000084 	.word	0x20000084

08002d94 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db0:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_MCOConfig+0x64>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_RCC_MCOConfig+0x64>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	6153      	str	r3, [r2, #20]
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_MCOConfig+0x64>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd8:	f7fe fc80 	bl	80016dc <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_MCOConfig+0x64>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_MCOConfig+0x64>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
}
 8002df0:	bf00      	nop
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b08b      	sub	sp, #44	; 0x2c
 8002e00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2a:	e03c      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e2e:	623b      	str	r3, [r7, #32]
      break;
 8002e30:	e03c      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	fa92 f2a2 	rbit	r2, r2
 8002e44:	607a      	str	r2, [r7, #4]
  return result;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	40d3      	lsrs	r3, r2
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	220f      	movs	r2, #15
 8002e60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	fa92 f2a2 	rbit	r2, r2
 8002e68:	60fa      	str	r2, [r7, #12]
  return result;
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	40d3      	lsrs	r3, r2
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
 8002e94:	e004      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	623b      	str	r3, [r7, #32]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ea8:	623b      	str	r3, [r7, #32]
      break;
 8002eaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	372c      	adds	r7, #44	; 0x2c
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	016e3600 	.word	0x016e3600
 8002ec4:	08006b04 	.word	0x08006b04
 8002ec8:	08006b14 	.word	0x08006b14
 8002ecc:	003d0900 	.word	0x003d0900
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000080 	.word	0x20000080

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ef2:	f7ff ffef 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	fa92 f2a2 	rbit	r2, r2
 8002f0c:	603a      	str	r2, [r7, #0]
  return result;
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	40d3      	lsrs	r3, r2
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08006afc 	.word	0x08006afc

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f36:	f7ff ffcd 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	fa92 f2a2 	rbit	r2, r2
 8002f50:	603a      	str	r2, [r7, #0]
  return result;
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	fab2 f282 	clz	r2, r2
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	40d3      	lsrs	r3, r2
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f5e:	5cd3      	ldrb	r3, [r2, r3]
 8002f60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08006afc 	.word	0x08006afc

08002f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e049      	b.n	800301a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe f85c 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f000 f9d2 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e03b      	b.n	80030b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_TIM_Base_Start_IT+0x4e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d004      	beq.n	8003072 <HAL_TIM_Base_Start_IT+0x4e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d115      	bne.n	800309e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d015      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x8c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d011      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	e008      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e000      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014000 	.word	0x40014000
 80030c8:	00010007 	.word	0x00010007

080030cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0202 	mvn.w	r2, #2
 80030f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f905 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8f7 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f908 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0204 	mvn.w	r2, #4
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8db 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8cd 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f8de 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b08      	cmp	r3, #8
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0208 	mvn.w	r2, #8
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2204      	movs	r2, #4
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8b1 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8a3 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f8b4 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0210 	mvn.w	r2, #16
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2208      	movs	r2, #8
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f887 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f879 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f88a 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0201 	mvn.w	r2, #1
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fe10 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b80      	cmp	r3, #128	; 0x80
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f94e 	bl	8003518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d10e      	bne.n	80032aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d107      	bne.n	80032aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f941 	bl	800352c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d10e      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f838 	bl	8003346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d10e      	bne.n	8003302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0220 	mvn.w	r2, #32
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f901 	bl	8003504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <TIM_Base_SetConfig+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x20>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_Base_SetConfig+0xcc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00f      	beq.n	80033b6 <TIM_Base_SetConfig+0x5a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0x5a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <TIM_Base_SetConfig+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0x5a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a21      	ldr	r2, [pc, #132]	; (8003430 <TIM_Base_SetConfig+0xd4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0x5a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <TIM_Base_SetConfig+0xd8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <TIM_Base_SetConfig+0xcc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00b      	beq.n	800340c <TIM_Base_SetConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0d      	ldr	r2, [pc, #52]	; (800342c <TIM_Base_SetConfig+0xd0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_Base_SetConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <TIM_Base_SetConfig+0xd4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_Base_SetConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <TIM_Base_SetConfig+0xd8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d103      	bne.n	8003414 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	615a      	str	r2, [r3, #20]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800344c:	2302      	movs	r3, #2
 800344e:	e04f      	b.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a21      	ldr	r2, [pc, #132]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003480:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a14      	ldr	r2, [pc, #80]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d004      	beq.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a10      	ldr	r2, [pc, #64]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10c      	bne.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40014000 	.word	0x40014000

08003504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e040      	b.n	80035d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fd9e 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8b6 	bl	80036f0 <UART_SetConfig>
 8003584:	4603      	mov	r3, r0
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e022      	b.n	80035d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9e0 	bl	800395c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa67 	bl	8003aa0 <UART_CheckIdleState>
 80035d2:	4603      	mov	r3, r0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d178      	bne.n	80036e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_UART_Transmit+0x24>
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e071      	b.n	80036e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2221      	movs	r2, #33	; 0x21
 8003610:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fd ff21 	bl	8001458 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d108      	bne.n	8003644 <HAL_UART_Transmit+0x68>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e003      	b.n	800364c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800364c:	e030      	b.n	80036b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fac9 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e03c      	b.n	80036e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	881a      	ldrh	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	b292      	uxth	r2, r2
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	3302      	adds	r3, #2
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e008      	b.n	800369e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b292      	uxth	r2, r2
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	3301      	adds	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1c8      	bne.n	800364e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2140      	movs	r1, #64	; 0x40
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa92 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e005      	b.n	80036e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b8a      	ldr	r3, [pc, #552]	; (8003944 <UART_SetConfig+0x254>)
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	430b      	orrs	r3, r1
 8003726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a78      	ldr	r2, [pc, #480]	; (8003948 <UART_SetConfig+0x258>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d120      	bne.n	80037ae <UART_SetConfig+0xbe>
 800376c:	4b77      	ldr	r3, [pc, #476]	; (800394c <UART_SetConfig+0x25c>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d817      	bhi.n	80037a8 <UART_SetConfig+0xb8>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x90>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	08003791 	.word	0x08003791
 8003784:	0800379d 	.word	0x0800379d
 8003788:	080037a3 	.word	0x080037a3
 800378c:	08003797 	.word	0x08003797
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e01d      	b.n	80037d2 <UART_SetConfig+0xe2>
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e01a      	b.n	80037d2 <UART_SetConfig+0xe2>
 800379c:	2304      	movs	r3, #4
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e017      	b.n	80037d2 <UART_SetConfig+0xe2>
 80037a2:	2308      	movs	r3, #8
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e014      	b.n	80037d2 <UART_SetConfig+0xe2>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e011      	b.n	80037d2 <UART_SetConfig+0xe2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a67      	ldr	r2, [pc, #412]	; (8003950 <UART_SetConfig+0x260>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d102      	bne.n	80037be <UART_SetConfig+0xce>
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e009      	b.n	80037d2 <UART_SetConfig+0xe2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a64      	ldr	r2, [pc, #400]	; (8003954 <UART_SetConfig+0x264>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <UART_SetConfig+0xde>
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e001      	b.n	80037d2 <UART_SetConfig+0xe2>
 80037ce:	2310      	movs	r3, #16
 80037d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037da:	d15a      	bne.n	8003892 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d827      	bhi.n	8003832 <UART_SetConfig+0x142>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0xf8>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	08003815 	.word	0x08003815
 80037f0:	0800381d 	.word	0x0800381d
 80037f4:	08003833 	.word	0x08003833
 80037f8:	08003823 	.word	0x08003823
 80037fc:	08003833 	.word	0x08003833
 8003800:	08003833 	.word	0x08003833
 8003804:	08003833 	.word	0x08003833
 8003808:	0800382b 	.word	0x0800382b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7ff fb6e 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003810:	61b8      	str	r0, [r7, #24]
        break;
 8003812:	e013      	b.n	800383c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003814:	f7ff fb8c 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8003818:	61b8      	str	r0, [r7, #24]
        break;
 800381a:	e00f      	b.n	800383c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381c:	4b4e      	ldr	r3, [pc, #312]	; (8003958 <UART_SetConfig+0x268>)
 800381e:	61bb      	str	r3, [r7, #24]
        break;
 8003820:	e00c      	b.n	800383c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003822:	f7ff faeb 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8003826:	61b8      	str	r0, [r7, #24]
        break;
 8003828:	e008      	b.n	800383c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382e:	61bb      	str	r3, [r7, #24]
        break;
 8003830:	e004      	b.n	800383c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	77bb      	strb	r3, [r7, #30]
        break;
 800383a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d074      	beq.n	800392c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	005a      	lsls	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d916      	bls.n	800388c <UART_SetConfig+0x19c>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d212      	bcs.n	800388c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f023 030f 	bic.w	r3, r3, #15
 800386e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	b29b      	uxth	r3, r3
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	b29a      	uxth	r2, r3
 800387c:	89fb      	ldrh	r3, [r7, #14]
 800387e:	4313      	orrs	r3, r2
 8003880:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	89fa      	ldrh	r2, [r7, #14]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e04f      	b.n	800392c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	77bb      	strb	r3, [r7, #30]
 8003890:	e04c      	b.n	800392c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003892:	7ffb      	ldrb	r3, [r7, #31]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d828      	bhi.n	80038ea <UART_SetConfig+0x1fa>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x1b0>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038eb 	.word	0x080038eb
 80038b0:	080038db 	.word	0x080038db
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	080038e3 	.word	0x080038e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7ff fb12 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 80038c8:	61b8      	str	r0, [r7, #24]
        break;
 80038ca:	e013      	b.n	80038f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7ff fb30 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 80038d0:	61b8      	str	r0, [r7, #24]
        break;
 80038d2:	e00f      	b.n	80038f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <UART_SetConfig+0x268>)
 80038d6:	61bb      	str	r3, [r7, #24]
        break;
 80038d8:	e00c      	b.n	80038f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7ff fa8f 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 80038de:	61b8      	str	r0, [r7, #24]
        break;
 80038e0:	e008      	b.n	80038f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e6:	61bb      	str	r3, [r7, #24]
        break;
 80038e8:	e004      	b.n	80038f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	77bb      	strb	r3, [r7, #30]
        break;
 80038f2:	bf00      	nop
    }

    if (pclk != 0U)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d018      	beq.n	800392c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	085a      	lsrs	r2, r3, #1
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	441a      	add	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b0f      	cmp	r3, #15
 8003912:	d909      	bls.n	8003928 <UART_SetConfig+0x238>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d205      	bcs.n	8003928 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	e001      	b.n	800392c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003938:	7fbb      	ldrb	r3, [r7, #30]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	40013800 	.word	0x40013800
 800394c:	40021000 	.word	0x40021000
 8003950:	40004400 	.word	0x40004400
 8003954:	40004800 	.word	0x40004800
 8003958:	007a1200 	.word	0x007a1200

0800395c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d10a      	bne.n	8003a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b098      	sub	sp, #96	; 0x60
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab0:	f7fd fcd2 	bl	8001458 <HAL_GetTick>
 8003ab4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d12e      	bne.n	8003b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f88c 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d021      	beq.n	8003b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af2:	653b      	str	r3, [r7, #80]	; 0x50
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
 8003afe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e6      	bne.n	8003ade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e062      	b.n	8003be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d149      	bne.n	8003bc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f856 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d03c      	beq.n	8003bc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	623b      	str	r3, [r7, #32]
   return(result);
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3308      	adds	r3, #8
 8003b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9c:	61fa      	str	r2, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e011      	b.n	8003be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3758      	adds	r7, #88	; 0x58
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	e049      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d045      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd fc25 	bl	8001458 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e048      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d031      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d110      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2208      	movs	r2, #8
 8003c46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f838 	bl	8003cbe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2208      	movs	r2, #8
 8003c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e029      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d111      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f81e 	bl	8003cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e00f      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d0a6      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b095      	sub	sp, #84	; 0x54
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e6      	bne.n	8003cc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d118      	bne.n	8003d66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d7a:	bf00      	nop
 8003d7c:	3754      	adds	r7, #84	; 0x54
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <__cvt>:
 8003d86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8a:	ec55 4b10 	vmov	r4, r5, d0
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	460e      	mov	r6, r1
 8003d92:	4619      	mov	r1, r3
 8003d94:	462b      	mov	r3, r5
 8003d96:	bfbb      	ittet	lt
 8003d98:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d9c:	461d      	movlt	r5, r3
 8003d9e:	2300      	movge	r3, #0
 8003da0:	232d      	movlt	r3, #45	; 0x2d
 8003da2:	700b      	strb	r3, [r1, #0]
 8003da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003daa:	4691      	mov	r9, r2
 8003dac:	f023 0820 	bic.w	r8, r3, #32
 8003db0:	bfbc      	itt	lt
 8003db2:	4622      	movlt	r2, r4
 8003db4:	4614      	movlt	r4, r2
 8003db6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dba:	d005      	beq.n	8003dc8 <__cvt+0x42>
 8003dbc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dc0:	d100      	bne.n	8003dc4 <__cvt+0x3e>
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	e000      	b.n	8003dca <__cvt+0x44>
 8003dc8:	2103      	movs	r1, #3
 8003dca:	ab03      	add	r3, sp, #12
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	ab02      	add	r3, sp, #8
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	ec45 4b10 	vmov	d0, r4, r5
 8003dd6:	4653      	mov	r3, sl
 8003dd8:	4632      	mov	r2, r6
 8003dda:	f000 fe69 	bl	8004ab0 <_dtoa_r>
 8003dde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de2:	4607      	mov	r7, r0
 8003de4:	d102      	bne.n	8003dec <__cvt+0x66>
 8003de6:	f019 0f01 	tst.w	r9, #1
 8003dea:	d022      	beq.n	8003e32 <__cvt+0xac>
 8003dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df0:	eb07 0906 	add.w	r9, r7, r6
 8003df4:	d110      	bne.n	8003e18 <__cvt+0x92>
 8003df6:	783b      	ldrb	r3, [r7, #0]
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d10a      	bne.n	8003e12 <__cvt+0x8c>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e08:	b918      	cbnz	r0, 8003e12 <__cvt+0x8c>
 8003e0a:	f1c6 0601 	rsb	r6, r6, #1
 8003e0e:	f8ca 6000 	str.w	r6, [sl]
 8003e12:	f8da 3000 	ldr.w	r3, [sl]
 8003e16:	4499      	add	r9, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e24:	b108      	cbz	r0, 8003e2a <__cvt+0xa4>
 8003e26:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	454b      	cmp	r3, r9
 8003e30:	d307      	bcc.n	8003e42 <__cvt+0xbc>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e36:	1bdb      	subs	r3, r3, r7
 8003e38:	4638      	mov	r0, r7
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	b004      	add	sp, #16
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	9103      	str	r1, [sp, #12]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e7f0      	b.n	8003e2c <__cvt+0xa6>

08003e4a <__exponent>:
 8003e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	bfb8      	it	lt
 8003e52:	4249      	neglt	r1, r1
 8003e54:	f803 2b02 	strb.w	r2, [r3], #2
 8003e58:	bfb4      	ite	lt
 8003e5a:	222d      	movlt	r2, #45	; 0x2d
 8003e5c:	222b      	movge	r2, #43	; 0x2b
 8003e5e:	2909      	cmp	r1, #9
 8003e60:	7042      	strb	r2, [r0, #1]
 8003e62:	dd2a      	ble.n	8003eba <__exponent+0x70>
 8003e64:	f10d 0207 	add.w	r2, sp, #7
 8003e68:	4617      	mov	r7, r2
 8003e6a:	260a      	movs	r6, #10
 8003e6c:	4694      	mov	ip, r2
 8003e6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e72:	fb06 1415 	mls	r4, r6, r5, r1
 8003e76:	3430      	adds	r4, #48	; 0x30
 8003e78:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	2c63      	cmp	r4, #99	; 0x63
 8003e80:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e84:	4629      	mov	r1, r5
 8003e86:	dcf1      	bgt.n	8003e6c <__exponent+0x22>
 8003e88:	3130      	adds	r1, #48	; 0x30
 8003e8a:	f1ac 0402 	sub.w	r4, ip, #2
 8003e8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e92:	1c41      	adds	r1, r0, #1
 8003e94:	4622      	mov	r2, r4
 8003e96:	42ba      	cmp	r2, r7
 8003e98:	d30a      	bcc.n	8003eb0 <__exponent+0x66>
 8003e9a:	f10d 0209 	add.w	r2, sp, #9
 8003e9e:	eba2 020c 	sub.w	r2, r2, ip
 8003ea2:	42bc      	cmp	r4, r7
 8003ea4:	bf88      	it	hi
 8003ea6:	2200      	movhi	r2, #0
 8003ea8:	4413      	add	r3, r2
 8003eaa:	1a18      	subs	r0, r3, r0
 8003eac:	b003      	add	sp, #12
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003eb4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003eb8:	e7ed      	b.n	8003e96 <__exponent+0x4c>
 8003eba:	2330      	movs	r3, #48	; 0x30
 8003ebc:	3130      	adds	r1, #48	; 0x30
 8003ebe:	7083      	strb	r3, [r0, #2]
 8003ec0:	70c1      	strb	r1, [r0, #3]
 8003ec2:	1d03      	adds	r3, r0, #4
 8003ec4:	e7f1      	b.n	8003eaa <__exponent+0x60>
	...

08003ec8 <_printf_float>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	ed2d 8b02 	vpush	{d8}
 8003ed0:	b08d      	sub	sp, #52	; 0x34
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ed8:	4616      	mov	r6, r2
 8003eda:	461f      	mov	r7, r3
 8003edc:	4605      	mov	r5, r0
 8003ede:	f000 fce7 	bl	80048b0 <_localeconv_r>
 8003ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7fc f9c2 	bl	8000270 <strlen>
 8003eec:	2300      	movs	r3, #0
 8003eee:	930a      	str	r3, [sp, #40]	; 0x28
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003efc:	3307      	adds	r3, #7
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	f103 0208 	add.w	r2, r3, #8
 8003f06:	f8c8 2000 	str.w	r2, [r8]
 8003f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f12:	9307      	str	r3, [sp, #28]
 8003f14:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f18:	ee08 0a10 	vmov	s16, r0
 8003f1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f24:	4b9e      	ldr	r3, [pc, #632]	; (80041a0 <_printf_float+0x2d8>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	f7fc fdff 	bl	8000b2c <__aeabi_dcmpun>
 8003f2e:	bb88      	cbnz	r0, 8003f94 <_printf_float+0xcc>
 8003f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f34:	4b9a      	ldr	r3, [pc, #616]	; (80041a0 <_printf_float+0x2d8>)
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	f7fc fdd9 	bl	8000af0 <__aeabi_dcmple>
 8003f3e:	bb48      	cbnz	r0, 8003f94 <_printf_float+0xcc>
 8003f40:	2200      	movs	r2, #0
 8003f42:	2300      	movs	r3, #0
 8003f44:	4640      	mov	r0, r8
 8003f46:	4649      	mov	r1, r9
 8003f48:	f7fc fdc8 	bl	8000adc <__aeabi_dcmplt>
 8003f4c:	b110      	cbz	r0, 8003f54 <_printf_float+0x8c>
 8003f4e:	232d      	movs	r3, #45	; 0x2d
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f54:	4a93      	ldr	r2, [pc, #588]	; (80041a4 <_printf_float+0x2dc>)
 8003f56:	4b94      	ldr	r3, [pc, #592]	; (80041a8 <_printf_float+0x2e0>)
 8003f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f5c:	bf94      	ite	ls
 8003f5e:	4690      	movls	r8, r2
 8003f60:	4698      	movhi	r8, r3
 8003f62:	2303      	movs	r3, #3
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	9b05      	ldr	r3, [sp, #20]
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	f04f 0900 	mov.w	r9, #0
 8003f72:	9700      	str	r7, [sp, #0]
 8003f74:	4633      	mov	r3, r6
 8003f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f9da 	bl	8004334 <_printf_common>
 8003f80:	3001      	adds	r0, #1
 8003f82:	f040 8090 	bne.w	80040a6 <_printf_float+0x1de>
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b00d      	add	sp, #52	; 0x34
 8003f8c:	ecbd 8b02 	vpop	{d8}
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	4640      	mov	r0, r8
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8003fa0:	b140      	cbz	r0, 8003fb4 <_printf_float+0xec>
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bfbc      	itt	lt
 8003fa8:	232d      	movlt	r3, #45	; 0x2d
 8003faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fae:	4a7f      	ldr	r2, [pc, #508]	; (80041ac <_printf_float+0x2e4>)
 8003fb0:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <_printf_float+0x2e8>)
 8003fb2:	e7d1      	b.n	8003f58 <_printf_float+0x90>
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003fba:	9206      	str	r2, [sp, #24]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	d13f      	bne.n	8004040 <_printf_float+0x178>
 8003fc0:	2306      	movs	r3, #6
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	9b05      	ldr	r3, [sp, #20]
 8003fc6:	6861      	ldr	r1, [r4, #4]
 8003fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8003fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fd6:	ab09      	add	r3, sp, #36	; 0x24
 8003fd8:	ec49 8b10 	vmov	d0, r8, r9
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fece 	bl	8003d86 <__cvt>
 8003fea:	9b06      	ldr	r3, [sp, #24]
 8003fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fee:	2b47      	cmp	r3, #71	; 0x47
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	d108      	bne.n	8004006 <_printf_float+0x13e>
 8003ff4:	1cc8      	adds	r0, r1, #3
 8003ff6:	db02      	blt.n	8003ffe <_printf_float+0x136>
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	dd41      	ble.n	8004082 <_printf_float+0x1ba>
 8003ffe:	f1ab 0302 	sub.w	r3, fp, #2
 8004002:	fa5f fb83 	uxtb.w	fp, r3
 8004006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800400a:	d820      	bhi.n	800404e <_printf_float+0x186>
 800400c:	3901      	subs	r1, #1
 800400e:	465a      	mov	r2, fp
 8004010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004014:	9109      	str	r1, [sp, #36]	; 0x24
 8004016:	f7ff ff18 	bl	8003e4a <__exponent>
 800401a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800401c:	1813      	adds	r3, r2, r0
 800401e:	2a01      	cmp	r2, #1
 8004020:	4681      	mov	r9, r0
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	dc02      	bgt.n	800402c <_printf_float+0x164>
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	07d2      	lsls	r2, r2, #31
 800402a:	d501      	bpl.n	8004030 <_printf_float+0x168>
 800402c:	3301      	adds	r3, #1
 800402e:	6123      	str	r3, [r4, #16]
 8004030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004034:	2b00      	cmp	r3, #0
 8004036:	d09c      	beq.n	8003f72 <_printf_float+0xaa>
 8004038:	232d      	movs	r3, #45	; 0x2d
 800403a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403e:	e798      	b.n	8003f72 <_printf_float+0xaa>
 8004040:	9a06      	ldr	r2, [sp, #24]
 8004042:	2a47      	cmp	r2, #71	; 0x47
 8004044:	d1be      	bne.n	8003fc4 <_printf_float+0xfc>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1bc      	bne.n	8003fc4 <_printf_float+0xfc>
 800404a:	2301      	movs	r3, #1
 800404c:	e7b9      	b.n	8003fc2 <_printf_float+0xfa>
 800404e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004052:	d118      	bne.n	8004086 <_printf_float+0x1be>
 8004054:	2900      	cmp	r1, #0
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	dd0b      	ble.n	8004072 <_printf_float+0x1aa>
 800405a:	6121      	str	r1, [r4, #16]
 800405c:	b913      	cbnz	r3, 8004064 <_printf_float+0x19c>
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d502      	bpl.n	800406a <_printf_float+0x1a2>
 8004064:	3301      	adds	r3, #1
 8004066:	440b      	add	r3, r1
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	65a1      	str	r1, [r4, #88]	; 0x58
 800406c:	f04f 0900 	mov.w	r9, #0
 8004070:	e7de      	b.n	8004030 <_printf_float+0x168>
 8004072:	b913      	cbnz	r3, 800407a <_printf_float+0x1b2>
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	07d2      	lsls	r2, r2, #31
 8004078:	d501      	bpl.n	800407e <_printf_float+0x1b6>
 800407a:	3302      	adds	r3, #2
 800407c:	e7f4      	b.n	8004068 <_printf_float+0x1a0>
 800407e:	2301      	movs	r3, #1
 8004080:	e7f2      	b.n	8004068 <_printf_float+0x1a0>
 8004082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004088:	4299      	cmp	r1, r3
 800408a:	db05      	blt.n	8004098 <_printf_float+0x1d0>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	6121      	str	r1, [r4, #16]
 8004090:	07d8      	lsls	r0, r3, #31
 8004092:	d5ea      	bpl.n	800406a <_printf_float+0x1a2>
 8004094:	1c4b      	adds	r3, r1, #1
 8004096:	e7e7      	b.n	8004068 <_printf_float+0x1a0>
 8004098:	2900      	cmp	r1, #0
 800409a:	bfd4      	ite	le
 800409c:	f1c1 0202 	rsble	r2, r1, #2
 80040a0:	2201      	movgt	r2, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	e7e0      	b.n	8004068 <_printf_float+0x1a0>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	055a      	lsls	r2, r3, #21
 80040aa:	d407      	bmi.n	80040bc <_printf_float+0x1f4>
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	4642      	mov	r2, r8
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	d12c      	bne.n	8004114 <_printf_float+0x24c>
 80040ba:	e764      	b.n	8003f86 <_printf_float+0xbe>
 80040bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040c0:	f240 80e0 	bls.w	8004284 <_printf_float+0x3bc>
 80040c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c8:	2200      	movs	r2, #0
 80040ca:	2300      	movs	r3, #0
 80040cc:	f7fc fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d034      	beq.n	800413e <_printf_float+0x276>
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <_printf_float+0x2ec>)
 80040d6:	2301      	movs	r3, #1
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f af51 	beq.w	8003f86 <_printf_float+0xbe>
 80040e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e8:	429a      	cmp	r2, r3
 80040ea:	db02      	blt.n	80040f2 <_printf_float+0x22a>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	07d8      	lsls	r0, r3, #31
 80040f0:	d510      	bpl.n	8004114 <_printf_float+0x24c>
 80040f2:	ee18 3a10 	vmov	r3, s16
 80040f6:	4652      	mov	r2, sl
 80040f8:	4631      	mov	r1, r6
 80040fa:	4628      	mov	r0, r5
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	f43f af41 	beq.w	8003f86 <_printf_float+0xbe>
 8004104:	f04f 0800 	mov.w	r8, #0
 8004108:	f104 091a 	add.w	r9, r4, #26
 800410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	4543      	cmp	r3, r8
 8004112:	dc09      	bgt.n	8004128 <_printf_float+0x260>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	079b      	lsls	r3, r3, #30
 8004118:	f100 8107 	bmi.w	800432a <_printf_float+0x462>
 800411c:	68e0      	ldr	r0, [r4, #12]
 800411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004120:	4298      	cmp	r0, r3
 8004122:	bfb8      	it	lt
 8004124:	4618      	movlt	r0, r3
 8004126:	e730      	b.n	8003f8a <_printf_float+0xc2>
 8004128:	2301      	movs	r3, #1
 800412a:	464a      	mov	r2, r9
 800412c:	4631      	mov	r1, r6
 800412e:	4628      	mov	r0, r5
 8004130:	47b8      	blx	r7
 8004132:	3001      	adds	r0, #1
 8004134:	f43f af27 	beq.w	8003f86 <_printf_float+0xbe>
 8004138:	f108 0801 	add.w	r8, r8, #1
 800413c:	e7e6      	b.n	800410c <_printf_float+0x244>
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	dc39      	bgt.n	80041b8 <_printf_float+0x2f0>
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <_printf_float+0x2ec>)
 8004146:	2301      	movs	r3, #1
 8004148:	4631      	mov	r1, r6
 800414a:	4628      	mov	r0, r5
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f af19 	beq.w	8003f86 <_printf_float+0xbe>
 8004154:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004158:	4313      	orrs	r3, r2
 800415a:	d102      	bne.n	8004162 <_printf_float+0x29a>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d5d8      	bpl.n	8004114 <_printf_float+0x24c>
 8004162:	ee18 3a10 	vmov	r3, s16
 8004166:	4652      	mov	r2, sl
 8004168:	4631      	mov	r1, r6
 800416a:	4628      	mov	r0, r5
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	f43f af09 	beq.w	8003f86 <_printf_float+0xbe>
 8004174:	f04f 0900 	mov.w	r9, #0
 8004178:	f104 0a1a 	add.w	sl, r4, #26
 800417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417e:	425b      	negs	r3, r3
 8004180:	454b      	cmp	r3, r9
 8004182:	dc01      	bgt.n	8004188 <_printf_float+0x2c0>
 8004184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004186:	e792      	b.n	80040ae <_printf_float+0x1e6>
 8004188:	2301      	movs	r3, #1
 800418a:	4652      	mov	r2, sl
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f aef7 	beq.w	8003f86 <_printf_float+0xbe>
 8004198:	f109 0901 	add.w	r9, r9, #1
 800419c:	e7ee      	b.n	800417c <_printf_float+0x2b4>
 800419e:	bf00      	nop
 80041a0:	7fefffff 	.word	0x7fefffff
 80041a4:	08006b24 	.word	0x08006b24
 80041a8:	08006b28 	.word	0x08006b28
 80041ac:	08006b2c 	.word	0x08006b2c
 80041b0:	08006b30 	.word	0x08006b30
 80041b4:	08006b34 	.word	0x08006b34
 80041b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041bc:	429a      	cmp	r2, r3
 80041be:	bfa8      	it	ge
 80041c0:	461a      	movge	r2, r3
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	4691      	mov	r9, r2
 80041c6:	dc37      	bgt.n	8004238 <_printf_float+0x370>
 80041c8:	f04f 0b00 	mov.w	fp, #0
 80041cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041d0:	f104 021a 	add.w	r2, r4, #26
 80041d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	eba3 0309 	sub.w	r3, r3, r9
 80041dc:	455b      	cmp	r3, fp
 80041de:	dc33      	bgt.n	8004248 <_printf_float+0x380>
 80041e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e4:	429a      	cmp	r2, r3
 80041e6:	db3b      	blt.n	8004260 <_printf_float+0x398>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	07da      	lsls	r2, r3, #31
 80041ec:	d438      	bmi.n	8004260 <_printf_float+0x398>
 80041ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80041f2:	eba2 0903 	sub.w	r9, r2, r3
 80041f6:	9b05      	ldr	r3, [sp, #20]
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	4591      	cmp	r9, r2
 80041fc:	bfa8      	it	ge
 80041fe:	4691      	movge	r9, r2
 8004200:	f1b9 0f00 	cmp.w	r9, #0
 8004204:	dc35      	bgt.n	8004272 <_printf_float+0x3aa>
 8004206:	f04f 0800 	mov.w	r8, #0
 800420a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800420e:	f104 0a1a 	add.w	sl, r4, #26
 8004212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	eba3 0309 	sub.w	r3, r3, r9
 800421c:	4543      	cmp	r3, r8
 800421e:	f77f af79 	ble.w	8004114 <_printf_float+0x24c>
 8004222:	2301      	movs	r3, #1
 8004224:	4652      	mov	r2, sl
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f aeaa 	beq.w	8003f86 <_printf_float+0xbe>
 8004232:	f108 0801 	add.w	r8, r8, #1
 8004236:	e7ec      	b.n	8004212 <_printf_float+0x34a>
 8004238:	4613      	mov	r3, r2
 800423a:	4631      	mov	r1, r6
 800423c:	4642      	mov	r2, r8
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	d1c0      	bne.n	80041c8 <_printf_float+0x300>
 8004246:	e69e      	b.n	8003f86 <_printf_float+0xbe>
 8004248:	2301      	movs	r3, #1
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	9205      	str	r2, [sp, #20]
 8004250:	47b8      	blx	r7
 8004252:	3001      	adds	r0, #1
 8004254:	f43f ae97 	beq.w	8003f86 <_printf_float+0xbe>
 8004258:	9a05      	ldr	r2, [sp, #20]
 800425a:	f10b 0b01 	add.w	fp, fp, #1
 800425e:	e7b9      	b.n	80041d4 <_printf_float+0x30c>
 8004260:	ee18 3a10 	vmov	r3, s16
 8004264:	4652      	mov	r2, sl
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	d1be      	bne.n	80041ee <_printf_float+0x326>
 8004270:	e689      	b.n	8003f86 <_printf_float+0xbe>
 8004272:	9a05      	ldr	r2, [sp, #20]
 8004274:	464b      	mov	r3, r9
 8004276:	4442      	add	r2, r8
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d1c1      	bne.n	8004206 <_printf_float+0x33e>
 8004282:	e680      	b.n	8003f86 <_printf_float+0xbe>
 8004284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004286:	2a01      	cmp	r2, #1
 8004288:	dc01      	bgt.n	800428e <_printf_float+0x3c6>
 800428a:	07db      	lsls	r3, r3, #31
 800428c:	d53a      	bpl.n	8004304 <_printf_float+0x43c>
 800428e:	2301      	movs	r3, #1
 8004290:	4642      	mov	r2, r8
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	f43f ae74 	beq.w	8003f86 <_printf_float+0xbe>
 800429e:	ee18 3a10 	vmov	r3, s16
 80042a2:	4652      	mov	r2, sl
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f ae6b 	beq.w	8003f86 <_printf_float+0xbe>
 80042b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042b4:	2200      	movs	r2, #0
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80042bc:	f7fc fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c0:	b9d8      	cbnz	r0, 80042fa <_printf_float+0x432>
 80042c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80042c6:	f108 0201 	add.w	r2, r8, #1
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	d10e      	bne.n	80042f2 <_printf_float+0x42a>
 80042d4:	e657      	b.n	8003f86 <_printf_float+0xbe>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4652      	mov	r2, sl
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f ae50 	beq.w	8003f86 <_printf_float+0xbe>
 80042e6:	f108 0801 	add.w	r8, r8, #1
 80042ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4543      	cmp	r3, r8
 80042f0:	dcf1      	bgt.n	80042d6 <_printf_float+0x40e>
 80042f2:	464b      	mov	r3, r9
 80042f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042f8:	e6da      	b.n	80040b0 <_printf_float+0x1e8>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	f104 0a1a 	add.w	sl, r4, #26
 8004302:	e7f2      	b.n	80042ea <_printf_float+0x422>
 8004304:	2301      	movs	r3, #1
 8004306:	4642      	mov	r2, r8
 8004308:	e7df      	b.n	80042ca <_printf_float+0x402>
 800430a:	2301      	movs	r3, #1
 800430c:	464a      	mov	r2, r9
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f ae36 	beq.w	8003f86 <_printf_float+0xbe>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004322:	1a5b      	subs	r3, r3, r1
 8004324:	4543      	cmp	r3, r8
 8004326:	dcf0      	bgt.n	800430a <_printf_float+0x442>
 8004328:	e6f8      	b.n	800411c <_printf_float+0x254>
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	f104 0919 	add.w	r9, r4, #25
 8004332:	e7f4      	b.n	800431e <_printf_float+0x456>

08004334 <_printf_common>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4616      	mov	r6, r2
 800433a:	4699      	mov	r9, r3
 800433c:	688a      	ldr	r2, [r1, #8]
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004344:	4293      	cmp	r3, r2
 8004346:	bfb8      	it	lt
 8004348:	4613      	movlt	r3, r2
 800434a:	6033      	str	r3, [r6, #0]
 800434c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004350:	4607      	mov	r7, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b10a      	cbz	r2, 800435a <_printf_common+0x26>
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	6833      	ldrmi	r3, [r6, #0]
 8004362:	3302      	addmi	r3, #2
 8004364:	6033      	strmi	r3, [r6, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	f015 0506 	ands.w	r5, r5, #6
 800436c:	d106      	bne.n	800437c <_printf_common+0x48>
 800436e:	f104 0a19 	add.w	sl, r4, #25
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	6832      	ldr	r2, [r6, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc26      	bgt.n	80043ca <_printf_common+0x96>
 800437c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004380:	1e13      	subs	r3, r2, #0
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	bf18      	it	ne
 8004386:	2301      	movne	r3, #1
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	d42b      	bmi.n	80043e4 <_printf_common+0xb0>
 800438c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004390:	4649      	mov	r1, r9
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d01e      	beq.n	80043d8 <_printf_common+0xa4>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf02      	ittt	eq
 80043a6:	68e5      	ldreq	r5, [r4, #12]
 80043a8:	6833      	ldreq	r3, [r6, #0]
 80043aa:	1aed      	subeq	r5, r5, r3
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	bf0c      	ite	eq
 80043b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b4:	2500      	movne	r5, #0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bfc4      	itt	gt
 80043ba:	1a9b      	subgt	r3, r3, r2
 80043bc:	18ed      	addgt	r5, r5, r3
 80043be:	2600      	movs	r6, #0
 80043c0:	341a      	adds	r4, #26
 80043c2:	42b5      	cmp	r5, r6
 80043c4:	d11a      	bne.n	80043fc <_printf_common+0xc8>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e008      	b.n	80043dc <_printf_common+0xa8>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4649      	mov	r1, r9
 80043d0:	4638      	mov	r0, r7
 80043d2:	47c0      	blx	r8
 80043d4:	3001      	adds	r0, #1
 80043d6:	d103      	bne.n	80043e0 <_printf_common+0xac>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7c6      	b.n	8004372 <_printf_common+0x3e>
 80043e4:	18e1      	adds	r1, r4, r3
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	2030      	movs	r0, #48	; 0x30
 80043ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ee:	4422      	add	r2, r4
 80043f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f8:	3302      	adds	r3, #2
 80043fa:	e7c7      	b.n	800438c <_printf_common+0x58>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4622      	mov	r2, r4
 8004400:	4649      	mov	r1, r9
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d0e6      	beq.n	80043d8 <_printf_common+0xa4>
 800440a:	3601      	adds	r6, #1
 800440c:	e7d9      	b.n	80043c2 <_printf_common+0x8e>
	...

08004410 <_printf_i>:
 8004410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	7e0f      	ldrb	r7, [r1, #24]
 8004416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004418:	2f78      	cmp	r7, #120	; 0x78
 800441a:	4691      	mov	r9, r2
 800441c:	4680      	mov	r8, r0
 800441e:	460c      	mov	r4, r1
 8004420:	469a      	mov	sl, r3
 8004422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004426:	d807      	bhi.n	8004438 <_printf_i+0x28>
 8004428:	2f62      	cmp	r7, #98	; 0x62
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x32>
 800442c:	2f00      	cmp	r7, #0
 800442e:	f000 80d4 	beq.w	80045da <_printf_i+0x1ca>
 8004432:	2f58      	cmp	r7, #88	; 0x58
 8004434:	f000 80c0 	beq.w	80045b8 <_printf_i+0x1a8>
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004440:	e03a      	b.n	80044b8 <_printf_i+0xa8>
 8004442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004446:	2b15      	cmp	r3, #21
 8004448:	d8f6      	bhi.n	8004438 <_printf_i+0x28>
 800444a:	a101      	add	r1, pc, #4	; (adr r1, 8004450 <_printf_i+0x40>)
 800444c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044bd 	.word	0x080044bd
 8004458:	08004439 	.word	0x08004439
 800445c:	08004439 	.word	0x08004439
 8004460:	08004439 	.word	0x08004439
 8004464:	08004439 	.word	0x08004439
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004439 	.word	0x08004439
 8004470:	08004439 	.word	0x08004439
 8004474:	08004439 	.word	0x08004439
 8004478:	08004439 	.word	0x08004439
 800447c:	080045c1 	.word	0x080045c1
 8004480:	080044e9 	.word	0x080044e9
 8004484:	0800457b 	.word	0x0800457b
 8004488:	08004439 	.word	0x08004439
 800448c:	08004439 	.word	0x08004439
 8004490:	080045e3 	.word	0x080045e3
 8004494:	08004439 	.word	0x08004439
 8004498:	080044e9 	.word	0x080044e9
 800449c:	08004439 	.word	0x08004439
 80044a0:	08004439 	.word	0x08004439
 80044a4:	08004583 	.word	0x08004583
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	602a      	str	r2, [r5, #0]
 80044b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b8:	2301      	movs	r3, #1
 80044ba:	e09f      	b.n	80045fc <_printf_i+0x1ec>
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	0607      	lsls	r7, r0, #24
 80044c2:	f103 0104 	add.w	r1, r3, #4
 80044c6:	6029      	str	r1, [r5, #0]
 80044c8:	d501      	bpl.n	80044ce <_printf_i+0xbe>
 80044ca:	681e      	ldr	r6, [r3, #0]
 80044cc:	e003      	b.n	80044d6 <_printf_i+0xc6>
 80044ce:	0646      	lsls	r6, r0, #25
 80044d0:	d5fb      	bpl.n	80044ca <_printf_i+0xba>
 80044d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	da03      	bge.n	80044e2 <_printf_i+0xd2>
 80044da:	232d      	movs	r3, #45	; 0x2d
 80044dc:	4276      	negs	r6, r6
 80044de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e2:	485a      	ldr	r0, [pc, #360]	; (800464c <_printf_i+0x23c>)
 80044e4:	230a      	movs	r3, #10
 80044e6:	e012      	b.n	800450e <_printf_i+0xfe>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	6029      	str	r1, [r5, #0]
 80044f0:	0605      	lsls	r5, r0, #24
 80044f2:	d501      	bpl.n	80044f8 <_printf_i+0xe8>
 80044f4:	681e      	ldr	r6, [r3, #0]
 80044f6:	e002      	b.n	80044fe <_printf_i+0xee>
 80044f8:	0641      	lsls	r1, r0, #25
 80044fa:	d5fb      	bpl.n	80044f4 <_printf_i+0xe4>
 80044fc:	881e      	ldrh	r6, [r3, #0]
 80044fe:	4853      	ldr	r0, [pc, #332]	; (800464c <_printf_i+0x23c>)
 8004500:	2f6f      	cmp	r7, #111	; 0x6f
 8004502:	bf0c      	ite	eq
 8004504:	2308      	moveq	r3, #8
 8004506:	230a      	movne	r3, #10
 8004508:	2100      	movs	r1, #0
 800450a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800450e:	6865      	ldr	r5, [r4, #4]
 8004510:	60a5      	str	r5, [r4, #8]
 8004512:	2d00      	cmp	r5, #0
 8004514:	bfa2      	ittt	ge
 8004516:	6821      	ldrge	r1, [r4, #0]
 8004518:	f021 0104 	bicge.w	r1, r1, #4
 800451c:	6021      	strge	r1, [r4, #0]
 800451e:	b90e      	cbnz	r6, 8004524 <_printf_i+0x114>
 8004520:	2d00      	cmp	r5, #0
 8004522:	d04b      	beq.n	80045bc <_printf_i+0x1ac>
 8004524:	4615      	mov	r5, r2
 8004526:	fbb6 f1f3 	udiv	r1, r6, r3
 800452a:	fb03 6711 	mls	r7, r3, r1, r6
 800452e:	5dc7      	ldrb	r7, [r0, r7]
 8004530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004534:	4637      	mov	r7, r6
 8004536:	42bb      	cmp	r3, r7
 8004538:	460e      	mov	r6, r1
 800453a:	d9f4      	bls.n	8004526 <_printf_i+0x116>
 800453c:	2b08      	cmp	r3, #8
 800453e:	d10b      	bne.n	8004558 <_printf_i+0x148>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	07de      	lsls	r6, r3, #31
 8004544:	d508      	bpl.n	8004558 <_printf_i+0x148>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	6861      	ldr	r1, [r4, #4]
 800454a:	4299      	cmp	r1, r3
 800454c:	bfde      	ittt	le
 800454e:	2330      	movle	r3, #48	; 0x30
 8004550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004558:	1b52      	subs	r2, r2, r5
 800455a:	6122      	str	r2, [r4, #16]
 800455c:	f8cd a000 	str.w	sl, [sp]
 8004560:	464b      	mov	r3, r9
 8004562:	aa03      	add	r2, sp, #12
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff fee4 	bl	8004334 <_printf_common>
 800456c:	3001      	adds	r0, #1
 800456e:	d14a      	bne.n	8004606 <_printf_i+0x1f6>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	b004      	add	sp, #16
 8004576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	4833      	ldr	r0, [pc, #204]	; (8004650 <_printf_i+0x240>)
 8004584:	2778      	movs	r7, #120	; 0x78
 8004586:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6829      	ldr	r1, [r5, #0]
 800458e:	061f      	lsls	r7, r3, #24
 8004590:	f851 6b04 	ldr.w	r6, [r1], #4
 8004594:	d402      	bmi.n	800459c <_printf_i+0x18c>
 8004596:	065f      	lsls	r7, r3, #25
 8004598:	bf48      	it	mi
 800459a:	b2b6      	uxthmi	r6, r6
 800459c:	07df      	lsls	r7, r3, #31
 800459e:	bf48      	it	mi
 80045a0:	f043 0320 	orrmi.w	r3, r3, #32
 80045a4:	6029      	str	r1, [r5, #0]
 80045a6:	bf48      	it	mi
 80045a8:	6023      	strmi	r3, [r4, #0]
 80045aa:	b91e      	cbnz	r6, 80045b4 <_printf_i+0x1a4>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f023 0320 	bic.w	r3, r3, #32
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	2310      	movs	r3, #16
 80045b6:	e7a7      	b.n	8004508 <_printf_i+0xf8>
 80045b8:	4824      	ldr	r0, [pc, #144]	; (800464c <_printf_i+0x23c>)
 80045ba:	e7e4      	b.n	8004586 <_printf_i+0x176>
 80045bc:	4615      	mov	r5, r2
 80045be:	e7bd      	b.n	800453c <_printf_i+0x12c>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	6826      	ldr	r6, [r4, #0]
 80045c4:	6961      	ldr	r1, [r4, #20]
 80045c6:	1d18      	adds	r0, r3, #4
 80045c8:	6028      	str	r0, [r5, #0]
 80045ca:	0635      	lsls	r5, r6, #24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0x1c4>
 80045d0:	6019      	str	r1, [r3, #0]
 80045d2:	e002      	b.n	80045da <_printf_i+0x1ca>
 80045d4:	0670      	lsls	r0, r6, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0x1c0>
 80045d8:	8019      	strh	r1, [r3, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	4615      	mov	r5, r2
 80045e0:	e7bc      	b.n	800455c <_printf_i+0x14c>
 80045e2:	682b      	ldr	r3, [r5, #0]
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	602a      	str	r2, [r5, #0]
 80045e8:	681d      	ldr	r5, [r3, #0]
 80045ea:	6862      	ldr	r2, [r4, #4]
 80045ec:	2100      	movs	r1, #0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7fb fdee 	bl	80001d0 <memchr>
 80045f4:	b108      	cbz	r0, 80045fa <_printf_i+0x1ea>
 80045f6:	1b40      	subs	r0, r0, r5
 80045f8:	6060      	str	r0, [r4, #4]
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	2300      	movs	r3, #0
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004604:	e7aa      	b.n	800455c <_printf_i+0x14c>
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	462a      	mov	r2, r5
 800460a:	4649      	mov	r1, r9
 800460c:	4640      	mov	r0, r8
 800460e:	47d0      	blx	sl
 8004610:	3001      	adds	r0, #1
 8004612:	d0ad      	beq.n	8004570 <_printf_i+0x160>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	d413      	bmi.n	8004642 <_printf_i+0x232>
 800461a:	68e0      	ldr	r0, [r4, #12]
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	4298      	cmp	r0, r3
 8004620:	bfb8      	it	lt
 8004622:	4618      	movlt	r0, r3
 8004624:	e7a6      	b.n	8004574 <_printf_i+0x164>
 8004626:	2301      	movs	r3, #1
 8004628:	4632      	mov	r2, r6
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	47d0      	blx	sl
 8004630:	3001      	adds	r0, #1
 8004632:	d09d      	beq.n	8004570 <_printf_i+0x160>
 8004634:	3501      	adds	r5, #1
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	9903      	ldr	r1, [sp, #12]
 800463a:	1a5b      	subs	r3, r3, r1
 800463c:	42ab      	cmp	r3, r5
 800463e:	dcf2      	bgt.n	8004626 <_printf_i+0x216>
 8004640:	e7eb      	b.n	800461a <_printf_i+0x20a>
 8004642:	2500      	movs	r5, #0
 8004644:	f104 0619 	add.w	r6, r4, #25
 8004648:	e7f5      	b.n	8004636 <_printf_i+0x226>
 800464a:	bf00      	nop
 800464c:	08006b36 	.word	0x08006b36
 8004650:	08006b47 	.word	0x08006b47

08004654 <std>:
 8004654:	2300      	movs	r3, #0
 8004656:	b510      	push	{r4, lr}
 8004658:	4604      	mov	r4, r0
 800465a:	e9c0 3300 	strd	r3, r3, [r0]
 800465e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004662:	6083      	str	r3, [r0, #8]
 8004664:	8181      	strh	r1, [r0, #12]
 8004666:	6643      	str	r3, [r0, #100]	; 0x64
 8004668:	81c2      	strh	r2, [r0, #14]
 800466a:	6183      	str	r3, [r0, #24]
 800466c:	4619      	mov	r1, r3
 800466e:	2208      	movs	r2, #8
 8004670:	305c      	adds	r0, #92	; 0x5c
 8004672:	f000 f914 	bl	800489e <memset>
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <std+0x58>)
 8004678:	6263      	str	r3, [r4, #36]	; 0x24
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <std+0x5c>)
 800467c:	62a3      	str	r3, [r4, #40]	; 0x28
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <std+0x60>)
 8004680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <std+0x64>)
 8004684:	6323      	str	r3, [r4, #48]	; 0x30
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <std+0x68>)
 8004688:	6224      	str	r4, [r4, #32]
 800468a:	429c      	cmp	r4, r3
 800468c:	d006      	beq.n	800469c <std+0x48>
 800468e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004692:	4294      	cmp	r4, r2
 8004694:	d002      	beq.n	800469c <std+0x48>
 8004696:	33d0      	adds	r3, #208	; 0xd0
 8004698:	429c      	cmp	r4, r3
 800469a:	d105      	bne.n	80046a8 <std+0x54>
 800469c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a4:	f000 b978 	b.w	8004998 <__retarget_lock_init_recursive>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	bf00      	nop
 80046ac:	08004819 	.word	0x08004819
 80046b0:	0800483b 	.word	0x0800483b
 80046b4:	08004873 	.word	0x08004873
 80046b8:	08004897 	.word	0x08004897
 80046bc:	20000368 	.word	0x20000368

080046c0 <stdio_exit_handler>:
 80046c0:	4a02      	ldr	r2, [pc, #8]	; (80046cc <stdio_exit_handler+0xc>)
 80046c2:	4903      	ldr	r1, [pc, #12]	; (80046d0 <stdio_exit_handler+0x10>)
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <stdio_exit_handler+0x14>)
 80046c6:	f000 b869 	b.w	800479c <_fwalk_sglue>
 80046ca:	bf00      	nop
 80046cc:	2000008c 	.word	0x2000008c
 80046d0:	08006349 	.word	0x08006349
 80046d4:	20000098 	.word	0x20000098

080046d8 <cleanup_stdio>:
 80046d8:	6841      	ldr	r1, [r0, #4]
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <cleanup_stdio+0x34>)
 80046dc:	4299      	cmp	r1, r3
 80046de:	b510      	push	{r4, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	d001      	beq.n	80046e8 <cleanup_stdio+0x10>
 80046e4:	f001 fe30 	bl	8006348 <_fflush_r>
 80046e8:	68a1      	ldr	r1, [r4, #8]
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <cleanup_stdio+0x38>)
 80046ec:	4299      	cmp	r1, r3
 80046ee:	d002      	beq.n	80046f6 <cleanup_stdio+0x1e>
 80046f0:	4620      	mov	r0, r4
 80046f2:	f001 fe29 	bl	8006348 <_fflush_r>
 80046f6:	68e1      	ldr	r1, [r4, #12]
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <cleanup_stdio+0x3c>)
 80046fa:	4299      	cmp	r1, r3
 80046fc:	d004      	beq.n	8004708 <cleanup_stdio+0x30>
 80046fe:	4620      	mov	r0, r4
 8004700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004704:	f001 be20 	b.w	8006348 <_fflush_r>
 8004708:	bd10      	pop	{r4, pc}
 800470a:	bf00      	nop
 800470c:	20000368 	.word	0x20000368
 8004710:	200003d0 	.word	0x200003d0
 8004714:	20000438 	.word	0x20000438

08004718 <global_stdio_init.part.0>:
 8004718:	b510      	push	{r4, lr}
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <global_stdio_init.part.0+0x30>)
 800471c:	4c0b      	ldr	r4, [pc, #44]	; (800474c <global_stdio_init.part.0+0x34>)
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <global_stdio_init.part.0+0x38>)
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	4620      	mov	r0, r4
 8004724:	2200      	movs	r2, #0
 8004726:	2104      	movs	r1, #4
 8004728:	f7ff ff94 	bl	8004654 <std>
 800472c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004730:	2201      	movs	r2, #1
 8004732:	2109      	movs	r1, #9
 8004734:	f7ff ff8e 	bl	8004654 <std>
 8004738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800473c:	2202      	movs	r2, #2
 800473e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004742:	2112      	movs	r1, #18
 8004744:	f7ff bf86 	b.w	8004654 <std>
 8004748:	200004a0 	.word	0x200004a0
 800474c:	20000368 	.word	0x20000368
 8004750:	080046c1 	.word	0x080046c1

08004754 <__sfp_lock_acquire>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__sfp_lock_acquire+0x8>)
 8004756:	f000 b920 	b.w	800499a <__retarget_lock_acquire_recursive>
 800475a:	bf00      	nop
 800475c:	200004a9 	.word	0x200004a9

08004760 <__sfp_lock_release>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__sfp_lock_release+0x8>)
 8004762:	f000 b91b 	b.w	800499c <__retarget_lock_release_recursive>
 8004766:	bf00      	nop
 8004768:	200004a9 	.word	0x200004a9

0800476c <__sinit>:
 800476c:	b510      	push	{r4, lr}
 800476e:	4604      	mov	r4, r0
 8004770:	f7ff fff0 	bl	8004754 <__sfp_lock_acquire>
 8004774:	6a23      	ldr	r3, [r4, #32]
 8004776:	b11b      	cbz	r3, 8004780 <__sinit+0x14>
 8004778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800477c:	f7ff bff0 	b.w	8004760 <__sfp_lock_release>
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <__sinit+0x28>)
 8004782:	6223      	str	r3, [r4, #32]
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <__sinit+0x2c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f5      	bne.n	8004778 <__sinit+0xc>
 800478c:	f7ff ffc4 	bl	8004718 <global_stdio_init.part.0>
 8004790:	e7f2      	b.n	8004778 <__sinit+0xc>
 8004792:	bf00      	nop
 8004794:	080046d9 	.word	0x080046d9
 8004798:	200004a0 	.word	0x200004a0

0800479c <_fwalk_sglue>:
 800479c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a0:	4607      	mov	r7, r0
 80047a2:	4688      	mov	r8, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	2600      	movs	r6, #0
 80047a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047ac:	f1b9 0901 	subs.w	r9, r9, #1
 80047b0:	d505      	bpl.n	80047be <_fwalk_sglue+0x22>
 80047b2:	6824      	ldr	r4, [r4, #0]
 80047b4:	2c00      	cmp	r4, #0
 80047b6:	d1f7      	bne.n	80047a8 <_fwalk_sglue+0xc>
 80047b8:	4630      	mov	r0, r6
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	89ab      	ldrh	r3, [r5, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d907      	bls.n	80047d4 <_fwalk_sglue+0x38>
 80047c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047c8:	3301      	adds	r3, #1
 80047ca:	d003      	beq.n	80047d4 <_fwalk_sglue+0x38>
 80047cc:	4629      	mov	r1, r5
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c0      	blx	r8
 80047d2:	4306      	orrs	r6, r0
 80047d4:	3568      	adds	r5, #104	; 0x68
 80047d6:	e7e9      	b.n	80047ac <_fwalk_sglue+0x10>

080047d8 <siprintf>:
 80047d8:	b40e      	push	{r1, r2, r3}
 80047da:	b500      	push	{lr}
 80047dc:	b09c      	sub	sp, #112	; 0x70
 80047de:	ab1d      	add	r3, sp, #116	; 0x74
 80047e0:	9002      	str	r0, [sp, #8]
 80047e2:	9006      	str	r0, [sp, #24]
 80047e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047e8:	4809      	ldr	r0, [pc, #36]	; (8004810 <siprintf+0x38>)
 80047ea:	9107      	str	r1, [sp, #28]
 80047ec:	9104      	str	r1, [sp, #16]
 80047ee:	4909      	ldr	r1, [pc, #36]	; (8004814 <siprintf+0x3c>)
 80047f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f4:	9105      	str	r1, [sp, #20]
 80047f6:	6800      	ldr	r0, [r0, #0]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	a902      	add	r1, sp, #8
 80047fc:	f001 fc20 	bl	8006040 <_svfiprintf_r>
 8004800:	9b02      	ldr	r3, [sp, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	b01c      	add	sp, #112	; 0x70
 8004808:	f85d eb04 	ldr.w	lr, [sp], #4
 800480c:	b003      	add	sp, #12
 800480e:	4770      	bx	lr
 8004810:	200000e4 	.word	0x200000e4
 8004814:	ffff0208 	.word	0xffff0208

08004818 <__sread>:
 8004818:	b510      	push	{r4, lr}
 800481a:	460c      	mov	r4, r1
 800481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004820:	f000 f86c 	bl	80048fc <_read_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	bfab      	itete	ge
 8004828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800482a:	89a3      	ldrhlt	r3, [r4, #12]
 800482c:	181b      	addge	r3, r3, r0
 800482e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004832:	bfac      	ite	ge
 8004834:	6563      	strge	r3, [r4, #84]	; 0x54
 8004836:	81a3      	strhlt	r3, [r4, #12]
 8004838:	bd10      	pop	{r4, pc}

0800483a <__swrite>:
 800483a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483e:	461f      	mov	r7, r3
 8004840:	898b      	ldrh	r3, [r1, #12]
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	4605      	mov	r5, r0
 8004846:	460c      	mov	r4, r1
 8004848:	4616      	mov	r6, r2
 800484a:	d505      	bpl.n	8004858 <__swrite+0x1e>
 800484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004850:	2302      	movs	r3, #2
 8004852:	2200      	movs	r2, #0
 8004854:	f000 f840 	bl	80048d8 <_lseek_r>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800485e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004862:	81a3      	strh	r3, [r4, #12]
 8004864:	4632      	mov	r2, r6
 8004866:	463b      	mov	r3, r7
 8004868:	4628      	mov	r0, r5
 800486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486e:	f000 b857 	b.w	8004920 <_write_r>

08004872 <__sseek>:
 8004872:	b510      	push	{r4, lr}
 8004874:	460c      	mov	r4, r1
 8004876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487a:	f000 f82d 	bl	80048d8 <_lseek_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	bf15      	itete	ne
 8004884:	6560      	strne	r0, [r4, #84]	; 0x54
 8004886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800488a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800488e:	81a3      	strheq	r3, [r4, #12]
 8004890:	bf18      	it	ne
 8004892:	81a3      	strhne	r3, [r4, #12]
 8004894:	bd10      	pop	{r4, pc}

08004896 <__sclose>:
 8004896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489a:	f000 b80d 	b.w	80048b8 <_close_r>

0800489e <memset>:
 800489e:	4402      	add	r2, r0
 80048a0:	4603      	mov	r3, r0
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d100      	bne.n	80048a8 <memset+0xa>
 80048a6:	4770      	bx	lr
 80048a8:	f803 1b01 	strb.w	r1, [r3], #1
 80048ac:	e7f9      	b.n	80048a2 <memset+0x4>
	...

080048b0 <_localeconv_r>:
 80048b0:	4800      	ldr	r0, [pc, #0]	; (80048b4 <_localeconv_r+0x4>)
 80048b2:	4770      	bx	lr
 80048b4:	200001d8 	.word	0x200001d8

080048b8 <_close_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4d06      	ldr	r5, [pc, #24]	; (80048d4 <_close_r+0x1c>)
 80048bc:	2300      	movs	r3, #0
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f7fc fcc7 	bl	8001256 <_close>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_close_r+0x1a>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_close_r+0x1a>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	200004a4 	.word	0x200004a4

080048d8 <_lseek_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	; (80048f8 <_lseek_r+0x20>)
 80048dc:	4604      	mov	r4, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fc fcdc 	bl	80012a4 <_lseek>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_lseek_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_lseek_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200004a4 	.word	0x200004a4

080048fc <_read_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d07      	ldr	r5, [pc, #28]	; (800491c <_read_r+0x20>)
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	2200      	movs	r2, #0
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc fc6a 	bl	80011e4 <_read>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_read_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_read_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200004a4 	.word	0x200004a4

08004920 <_write_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	; (8004940 <_write_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fc fc75 	bl	800121e <_write>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_write_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_write_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	200004a4 	.word	0x200004a4

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200000e4 	.word	0x200000e4

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	; (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	; (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	; (8004994 <__libc_init_array+0x44>)
 8004964:	f002 f894 	bl	8006a90 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08006e94 	.word	0x08006e94
 800498c:	08006e94 	.word	0x08006e94
 8004990:	08006e94 	.word	0x08006e94
 8004994:	08006e98 	.word	0x08006e98

08004998 <__retarget_lock_init_recursive>:
 8004998:	4770      	bx	lr

0800499a <__retarget_lock_acquire_recursive>:
 800499a:	4770      	bx	lr

0800499c <__retarget_lock_release_recursive>:
 800499c:	4770      	bx	lr

0800499e <quorem>:
 800499e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a2:	6903      	ldr	r3, [r0, #16]
 80049a4:	690c      	ldr	r4, [r1, #16]
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	4607      	mov	r7, r0
 80049aa:	db7e      	blt.n	8004aaa <quorem+0x10c>
 80049ac:	3c01      	subs	r4, #1
 80049ae:	f101 0814 	add.w	r8, r1, #20
 80049b2:	f100 0514 	add.w	r5, r0, #20
 80049b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c4:	3301      	adds	r3, #1
 80049c6:	429a      	cmp	r2, r3
 80049c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80049d4:	d331      	bcc.n	8004a3a <quorem+0x9c>
 80049d6:	f04f 0e00 	mov.w	lr, #0
 80049da:	4640      	mov	r0, r8
 80049dc:	46ac      	mov	ip, r5
 80049de:	46f2      	mov	sl, lr
 80049e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e4:	b293      	uxth	r3, r2
 80049e6:	fb06 e303 	mla	r3, r6, r3, lr
 80049ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049ee:	0c1a      	lsrs	r2, r3, #16
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	ebaa 0303 	sub.w	r3, sl, r3
 80049f6:	f8dc a000 	ldr.w	sl, [ip]
 80049fa:	fa13 f38a 	uxtah	r3, r3, sl
 80049fe:	fb06 220e 	mla	r2, r6, lr, r2
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a18:	4581      	cmp	r9, r0
 8004a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8004a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a26:	d2db      	bcs.n	80049e0 <quorem+0x42>
 8004a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a2c:	b92b      	cbnz	r3, 8004a3a <quorem+0x9c>
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	3b04      	subs	r3, #4
 8004a32:	429d      	cmp	r5, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	d32c      	bcc.n	8004a92 <quorem+0xf4>
 8004a38:	613c      	str	r4, [r7, #16]
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f001 f9a6 	bl	8005d8c <__mcmp>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	db22      	blt.n	8004a8a <quorem+0xec>
 8004a44:	3601      	adds	r6, #1
 8004a46:	4629      	mov	r1, r5
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a4e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a52:	b293      	uxth	r3, r2
 8004a54:	1ac3      	subs	r3, r0, r3
 8004a56:	0c12      	lsrs	r2, r2, #16
 8004a58:	fa13 f38c 	uxtah	r3, r3, ip
 8004a5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a6a:	45c1      	cmp	r9, r8
 8004a6c:	f841 3b04 	str.w	r3, [r1], #4
 8004a70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a74:	d2e9      	bcs.n	8004a4a <quorem+0xac>
 8004a76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a7e:	b922      	cbnz	r2, 8004a8a <quorem+0xec>
 8004a80:	3b04      	subs	r3, #4
 8004a82:	429d      	cmp	r5, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	d30a      	bcc.n	8004a9e <quorem+0x100>
 8004a88:	613c      	str	r4, [r7, #16]
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	b003      	add	sp, #12
 8004a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	3b04      	subs	r3, #4
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	d1ce      	bne.n	8004a38 <quorem+0x9a>
 8004a9a:	3c01      	subs	r4, #1
 8004a9c:	e7c9      	b.n	8004a32 <quorem+0x94>
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	3b04      	subs	r3, #4
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	d1f0      	bne.n	8004a88 <quorem+0xea>
 8004aa6:	3c01      	subs	r4, #1
 8004aa8:	e7eb      	b.n	8004a82 <quorem+0xe4>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e7ee      	b.n	8004a8c <quorem+0xee>
	...

08004ab0 <_dtoa_r>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	ed2d 8b04 	vpush	{d8-d9}
 8004ab8:	69c5      	ldr	r5, [r0, #28]
 8004aba:	b093      	sub	sp, #76	; 0x4c
 8004abc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ac0:	ec57 6b10 	vmov	r6, r7, d0
 8004ac4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ac8:	9107      	str	r1, [sp, #28]
 8004aca:	4604      	mov	r4, r0
 8004acc:	920a      	str	r2, [sp, #40]	; 0x28
 8004ace:	930d      	str	r3, [sp, #52]	; 0x34
 8004ad0:	b975      	cbnz	r5, 8004af0 <_dtoa_r+0x40>
 8004ad2:	2010      	movs	r0, #16
 8004ad4:	f000 fe2a 	bl	800572c <malloc>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	61e0      	str	r0, [r4, #28]
 8004adc:	b920      	cbnz	r0, 8004ae8 <_dtoa_r+0x38>
 8004ade:	4bae      	ldr	r3, [pc, #696]	; (8004d98 <_dtoa_r+0x2e8>)
 8004ae0:	21ef      	movs	r1, #239	; 0xef
 8004ae2:	48ae      	ldr	r0, [pc, #696]	; (8004d9c <_dtoa_r+0x2ec>)
 8004ae4:	f001 fc90 	bl	8006408 <__assert_func>
 8004ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aec:	6005      	str	r5, [r0, #0]
 8004aee:	60c5      	str	r5, [r0, #12]
 8004af0:	69e3      	ldr	r3, [r4, #28]
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	b151      	cbz	r1, 8004b0c <_dtoa_r+0x5c>
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	604a      	str	r2, [r1, #4]
 8004afa:	2301      	movs	r3, #1
 8004afc:	4093      	lsls	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 ff07 	bl	8005914 <_Bfree>
 8004b06:	69e3      	ldr	r3, [r4, #28]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	1e3b      	subs	r3, r7, #0
 8004b0e:	bfbb      	ittet	lt
 8004b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	9303      	strlt	r3, [sp, #12]
 8004b16:	2300      	movge	r3, #0
 8004b18:	2201      	movlt	r2, #1
 8004b1a:	bfac      	ite	ge
 8004b1c:	f8c8 3000 	strge.w	r3, [r8]
 8004b20:	f8c8 2000 	strlt.w	r2, [r8]
 8004b24:	4b9e      	ldr	r3, [pc, #632]	; (8004da0 <_dtoa_r+0x2f0>)
 8004b26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b2a:	ea33 0308 	bics.w	r3, r3, r8
 8004b2e:	d11b      	bne.n	8004b68 <_dtoa_r+0xb8>
 8004b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b3c:	4333      	orrs	r3, r6
 8004b3e:	f000 8593 	beq.w	8005668 <_dtoa_r+0xbb8>
 8004b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b44:	b963      	cbnz	r3, 8004b60 <_dtoa_r+0xb0>
 8004b46:	4b97      	ldr	r3, [pc, #604]	; (8004da4 <_dtoa_r+0x2f4>)
 8004b48:	e027      	b.n	8004b9a <_dtoa_r+0xea>
 8004b4a:	4b97      	ldr	r3, [pc, #604]	; (8004da8 <_dtoa_r+0x2f8>)
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	9800      	ldr	r0, [sp, #0]
 8004b56:	b013      	add	sp, #76	; 0x4c
 8004b58:	ecbd 8b04 	vpop	{d8-d9}
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	4b90      	ldr	r3, [pc, #576]	; (8004da4 <_dtoa_r+0x2f4>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	3303      	adds	r3, #3
 8004b66:	e7f3      	b.n	8004b50 <_dtoa_r+0xa0>
 8004b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	ec51 0b17 	vmov	r0, r1, d7
 8004b72:	eeb0 8a47 	vmov.f32	s16, s14
 8004b76:	eef0 8a67 	vmov.f32	s17, s15
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f7fb ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b80:	4681      	mov	r9, r0
 8004b82:	b160      	cbz	r0, 8004b9e <_dtoa_r+0xee>
 8004b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b86:	2301      	movs	r3, #1
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8568 	beq.w	8005662 <_dtoa_r+0xbb2>
 8004b92:	4b86      	ldr	r3, [pc, #536]	; (8004dac <_dtoa_r+0x2fc>)
 8004b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	e7da      	b.n	8004b54 <_dtoa_r+0xa4>
 8004b9e:	aa10      	add	r2, sp, #64	; 0x40
 8004ba0:	a911      	add	r1, sp, #68	; 0x44
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ba8:	eef0 0a68 	vmov.f32	s1, s17
 8004bac:	f001 f994 	bl	8005ed8 <__d2b>
 8004bb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	d07f      	beq.n	8004cba <_dtoa_r+0x20a>
 8004bba:	ee18 3a90 	vmov	r3, s17
 8004bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004bc6:	ec51 0b18 	vmov	r0, r1, d8
 8004bca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4b75      	ldr	r3, [pc, #468]	; (8004db0 <_dtoa_r+0x300>)
 8004bdc:	f7fb fb54 	bl	8000288 <__aeabi_dsub>
 8004be0:	a367      	add	r3, pc, #412	; (adr r3, 8004d80 <_dtoa_r+0x2d0>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fd07 	bl	80005f8 <__aeabi_dmul>
 8004bea:	a367      	add	r3, pc, #412	; (adr r3, 8004d88 <_dtoa_r+0x2d8>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb fb4c 	bl	800028c <__adddf3>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	f7fb fc93 	bl	8000524 <__aeabi_i2d>
 8004bfe:	a364      	add	r3, pc, #400	; (adr r3, 8004d90 <_dtoa_r+0x2e0>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb fb3c 	bl	800028c <__adddf3>
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	f7fb ff9e 	bl	8000b58 <__aeabi_d2iz>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4683      	mov	fp, r0
 8004c20:	2300      	movs	r3, #0
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb ff59 	bl	8000adc <__aeabi_dcmplt>
 8004c2a:	b148      	cbz	r0, 8004c40 <_dtoa_r+0x190>
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f7fb fc79 	bl	8000524 <__aeabi_i2d>
 8004c32:	4632      	mov	r2, r6
 8004c34:	463b      	mov	r3, r7
 8004c36:	f7fb ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c3a:	b908      	cbnz	r0, 8004c40 <_dtoa_r+0x190>
 8004c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c40:	f1bb 0f16 	cmp.w	fp, #22
 8004c44:	d857      	bhi.n	8004cf6 <_dtoa_r+0x246>
 8004c46:	4b5b      	ldr	r3, [pc, #364]	; (8004db4 <_dtoa_r+0x304>)
 8004c48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	ec51 0b18 	vmov	r0, r1, d8
 8004c54:	f7fb ff42 	bl	8000adc <__aeabi_dcmplt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d04e      	beq.n	8004cfa <_dtoa_r+0x24a>
 8004c5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c60:	2300      	movs	r3, #0
 8004c62:	930c      	str	r3, [sp, #48]	; 0x30
 8004c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c66:	1b5b      	subs	r3, r3, r5
 8004c68:	1e5a      	subs	r2, r3, #1
 8004c6a:	bf45      	ittet	mi
 8004c6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c70:	9305      	strmi	r3, [sp, #20]
 8004c72:	2300      	movpl	r3, #0
 8004c74:	2300      	movmi	r3, #0
 8004c76:	9206      	str	r2, [sp, #24]
 8004c78:	bf54      	ite	pl
 8004c7a:	9305      	strpl	r3, [sp, #20]
 8004c7c:	9306      	strmi	r3, [sp, #24]
 8004c7e:	f1bb 0f00 	cmp.w	fp, #0
 8004c82:	db3c      	blt.n	8004cfe <_dtoa_r+0x24e>
 8004c84:	9b06      	ldr	r3, [sp, #24]
 8004c86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004c8a:	445b      	add	r3, fp
 8004c8c:	9306      	str	r3, [sp, #24]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9308      	str	r3, [sp, #32]
 8004c92:	9b07      	ldr	r3, [sp, #28]
 8004c94:	2b09      	cmp	r3, #9
 8004c96:	d868      	bhi.n	8004d6a <_dtoa_r+0x2ba>
 8004c98:	2b05      	cmp	r3, #5
 8004c9a:	bfc4      	itt	gt
 8004c9c:	3b04      	subgt	r3, #4
 8004c9e:	9307      	strgt	r3, [sp, #28]
 8004ca0:	9b07      	ldr	r3, [sp, #28]
 8004ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca6:	bfcc      	ite	gt
 8004ca8:	2500      	movgt	r5, #0
 8004caa:	2501      	movle	r5, #1
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	f200 8085 	bhi.w	8004dbc <_dtoa_r+0x30c>
 8004cb2:	e8df f003 	tbb	[pc, r3]
 8004cb6:	3b2e      	.short	0x3b2e
 8004cb8:	5839      	.short	0x5839
 8004cba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004cbe:	441d      	add	r5, r3
 8004cc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	bfc1      	itttt	gt
 8004cc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ccc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004cd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cd8:	bfd6      	itet	le
 8004cda:	f1c3 0320 	rsble	r3, r3, #32
 8004cde:	ea48 0003 	orrgt.w	r0, r8, r3
 8004ce2:	fa06 f003 	lslle.w	r0, r6, r3
 8004ce6:	f7fb fc0d 	bl	8000504 <__aeabi_ui2d>
 8004cea:	2201      	movs	r2, #1
 8004cec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004cf0:	3d01      	subs	r5, #1
 8004cf2:	920e      	str	r2, [sp, #56]	; 0x38
 8004cf4:	e76f      	b.n	8004bd6 <_dtoa_r+0x126>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e7b3      	b.n	8004c62 <_dtoa_r+0x1b2>
 8004cfa:	900c      	str	r0, [sp, #48]	; 0x30
 8004cfc:	e7b2      	b.n	8004c64 <_dtoa_r+0x1b4>
 8004cfe:	9b05      	ldr	r3, [sp, #20]
 8004d00:	eba3 030b 	sub.w	r3, r3, fp
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	f1cb 0300 	rsb	r3, fp, #0
 8004d0a:	9308      	str	r3, [sp, #32]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d10:	e7bf      	b.n	8004c92 <_dtoa_r+0x1e2>
 8004d12:	2300      	movs	r3, #0
 8004d14:	9309      	str	r3, [sp, #36]	; 0x24
 8004d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	dc52      	bgt.n	8004dc2 <_dtoa_r+0x312>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	461a      	mov	r2, r3
 8004d24:	920a      	str	r2, [sp, #40]	; 0x28
 8004d26:	e00b      	b.n	8004d40 <_dtoa_r+0x290>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e7f3      	b.n	8004d14 <_dtoa_r+0x264>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d32:	445b      	add	r3, fp
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	bfb8      	it	lt
 8004d3e:	2301      	movlt	r3, #1
 8004d40:	69e0      	ldr	r0, [r4, #28]
 8004d42:	2100      	movs	r1, #0
 8004d44:	2204      	movs	r2, #4
 8004d46:	f102 0614 	add.w	r6, r2, #20
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	d93d      	bls.n	8004dca <_dtoa_r+0x31a>
 8004d4e:	6041      	str	r1, [r0, #4]
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fd9f 	bl	8005894 <_Balloc>
 8004d56:	9000      	str	r0, [sp, #0]
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d139      	bne.n	8004dd0 <_dtoa_r+0x320>
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <_dtoa_r+0x308>)
 8004d5e:	4602      	mov	r2, r0
 8004d60:	f240 11af 	movw	r1, #431	; 0x1af
 8004d64:	e6bd      	b.n	8004ae2 <_dtoa_r+0x32>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e7e1      	b.n	8004d2e <_dtoa_r+0x27e>
 8004d6a:	2501      	movs	r5, #1
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9307      	str	r3, [sp, #28]
 8004d70:	9509      	str	r5, [sp, #36]	; 0x24
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2312      	movs	r3, #18
 8004d7e:	e7d1      	b.n	8004d24 <_dtoa_r+0x274>
 8004d80:	636f4361 	.word	0x636f4361
 8004d84:	3fd287a7 	.word	0x3fd287a7
 8004d88:	8b60c8b3 	.word	0x8b60c8b3
 8004d8c:	3fc68a28 	.word	0x3fc68a28
 8004d90:	509f79fb 	.word	0x509f79fb
 8004d94:	3fd34413 	.word	0x3fd34413
 8004d98:	08006b65 	.word	0x08006b65
 8004d9c:	08006b7c 	.word	0x08006b7c
 8004da0:	7ff00000 	.word	0x7ff00000
 8004da4:	08006b61 	.word	0x08006b61
 8004da8:	08006b58 	.word	0x08006b58
 8004dac:	08006b35 	.word	0x08006b35
 8004db0:	3ff80000 	.word	0x3ff80000
 8004db4:	08006c68 	.word	0x08006c68
 8004db8:	08006bd4 	.word	0x08006bd4
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc0:	e7d7      	b.n	8004d72 <_dtoa_r+0x2c2>
 8004dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	e7ba      	b.n	8004d40 <_dtoa_r+0x290>
 8004dca:	3101      	adds	r1, #1
 8004dcc:	0052      	lsls	r2, r2, #1
 8004dce:	e7ba      	b.n	8004d46 <_dtoa_r+0x296>
 8004dd0:	69e3      	ldr	r3, [r4, #28]
 8004dd2:	9a00      	ldr	r2, [sp, #0]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	2b0e      	cmp	r3, #14
 8004dda:	f200 80a8 	bhi.w	8004f2e <_dtoa_r+0x47e>
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	f000 80a5 	beq.w	8004f2e <_dtoa_r+0x47e>
 8004de4:	f1bb 0f00 	cmp.w	fp, #0
 8004de8:	dd38      	ble.n	8004e5c <_dtoa_r+0x3ac>
 8004dea:	4bc0      	ldr	r3, [pc, #768]	; (80050ec <_dtoa_r+0x63c>)
 8004dec:	f00b 020f 	and.w	r2, fp, #15
 8004df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004df8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004dfc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004e00:	d019      	beq.n	8004e36 <_dtoa_r+0x386>
 8004e02:	4bbb      	ldr	r3, [pc, #748]	; (80050f0 <_dtoa_r+0x640>)
 8004e04:	ec51 0b18 	vmov	r0, r1, d8
 8004e08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e0c:	f7fb fd1e 	bl	800084c <__aeabi_ddiv>
 8004e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e14:	f008 080f 	and.w	r8, r8, #15
 8004e18:	2503      	movs	r5, #3
 8004e1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80050f0 <_dtoa_r+0x640>
 8004e1e:	f1b8 0f00 	cmp.w	r8, #0
 8004e22:	d10a      	bne.n	8004e3a <_dtoa_r+0x38a>
 8004e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e28:	4632      	mov	r2, r6
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	f7fb fd0e 	bl	800084c <__aeabi_ddiv>
 8004e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e34:	e02b      	b.n	8004e8e <_dtoa_r+0x3de>
 8004e36:	2502      	movs	r5, #2
 8004e38:	e7ef      	b.n	8004e1a <_dtoa_r+0x36a>
 8004e3a:	f018 0f01 	tst.w	r8, #1
 8004e3e:	d008      	beq.n	8004e52 <_dtoa_r+0x3a2>
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e48:	f7fb fbd6 	bl	80005f8 <__aeabi_dmul>
 8004e4c:	3501      	adds	r5, #1
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460f      	mov	r7, r1
 8004e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e56:	f109 0908 	add.w	r9, r9, #8
 8004e5a:	e7e0      	b.n	8004e1e <_dtoa_r+0x36e>
 8004e5c:	f000 809f 	beq.w	8004f9e <_dtoa_r+0x4ee>
 8004e60:	f1cb 0600 	rsb	r6, fp, #0
 8004e64:	4ba1      	ldr	r3, [pc, #644]	; (80050ec <_dtoa_r+0x63c>)
 8004e66:	4fa2      	ldr	r7, [pc, #648]	; (80050f0 <_dtoa_r+0x640>)
 8004e68:	f006 020f 	and.w	r2, r6, #15
 8004e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	ec51 0b18 	vmov	r0, r1, d8
 8004e78:	f7fb fbbe 	bl	80005f8 <__aeabi_dmul>
 8004e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e80:	1136      	asrs	r6, r6, #4
 8004e82:	2300      	movs	r3, #0
 8004e84:	2502      	movs	r5, #2
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	d17e      	bne.n	8004f88 <_dtoa_r+0x4d8>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1d0      	bne.n	8004e30 <_dtoa_r+0x380>
 8004e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8084 	beq.w	8004fa2 <_dtoa_r+0x4f2>
 8004e9a:	4b96      	ldr	r3, [pc, #600]	; (80050f4 <_dtoa_r+0x644>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	f7fb fe1b 	bl	8000adc <__aeabi_dcmplt>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d07b      	beq.n	8004fa2 <_dtoa_r+0x4f2>
 8004eaa:	9b04      	ldr	r3, [sp, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d078      	beq.n	8004fa2 <_dtoa_r+0x4f2>
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	dd39      	ble.n	8004f2a <_dtoa_r+0x47a>
 8004eb6:	4b90      	ldr	r3, [pc, #576]	; (80050f8 <_dtoa_r+0x648>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4640      	mov	r0, r8
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	f7fb fb9b 	bl	80005f8 <__aeabi_dmul>
 8004ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec6:	9e01      	ldr	r6, [sp, #4]
 8004ec8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004ecc:	3501      	adds	r5, #1
 8004ece:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7fb fb26 	bl	8000524 <__aeabi_i2d>
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	f7fb fb8c 	bl	80005f8 <__aeabi_dmul>
 8004ee0:	4b86      	ldr	r3, [pc, #536]	; (80050fc <_dtoa_r+0x64c>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f7fb f9d2 	bl	800028c <__adddf3>
 8004ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d158      	bne.n	8004fa8 <_dtoa_r+0x4f8>
 8004ef6:	4b82      	ldr	r3, [pc, #520]	; (8005100 <_dtoa_r+0x650>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4640      	mov	r0, r8
 8004efc:	4649      	mov	r1, r9
 8004efe:	f7fb f9c3 	bl	8000288 <__aeabi_dsub>
 8004f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f06:	4680      	mov	r8, r0
 8004f08:	4689      	mov	r9, r1
 8004f0a:	f7fb fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f040 8296 	bne.w	8005440 <_dtoa_r+0x990>
 8004f14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f18:	4640      	mov	r0, r8
 8004f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f1e:	4649      	mov	r1, r9
 8004f20:	f7fb fddc 	bl	8000adc <__aeabi_dcmplt>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f040 8289 	bne.w	800543c <_dtoa_r+0x98c>
 8004f2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f2c0 814e 	blt.w	80051d2 <_dtoa_r+0x722>
 8004f36:	f1bb 0f0e 	cmp.w	fp, #14
 8004f3a:	f300 814a 	bgt.w	80051d2 <_dtoa_r+0x722>
 8004f3e:	4b6b      	ldr	r3, [pc, #428]	; (80050ec <_dtoa_r+0x63c>)
 8004f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f280 80dc 	bge.w	8005108 <_dtoa_r+0x658>
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f300 80d8 	bgt.w	8005108 <_dtoa_r+0x658>
 8004f58:	f040 826f 	bne.w	800543a <_dtoa_r+0x98a>
 8004f5c:	4b68      	ldr	r3, [pc, #416]	; (8005100 <_dtoa_r+0x650>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb fb48 	bl	80005f8 <__aeabi_dmul>
 8004f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f6c:	f7fb fdca 	bl	8000b04 <__aeabi_dcmpge>
 8004f70:	9e04      	ldr	r6, [sp, #16]
 8004f72:	4637      	mov	r7, r6
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f040 8245 	bne.w	8005404 <_dtoa_r+0x954>
 8004f7a:	9d00      	ldr	r5, [sp, #0]
 8004f7c:	2331      	movs	r3, #49	; 0x31
 8004f7e:	f805 3b01 	strb.w	r3, [r5], #1
 8004f82:	f10b 0b01 	add.w	fp, fp, #1
 8004f86:	e241      	b.n	800540c <_dtoa_r+0x95c>
 8004f88:	07f2      	lsls	r2, r6, #31
 8004f8a:	d505      	bpl.n	8004f98 <_dtoa_r+0x4e8>
 8004f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f90:	f7fb fb32 	bl	80005f8 <__aeabi_dmul>
 8004f94:	3501      	adds	r5, #1
 8004f96:	2301      	movs	r3, #1
 8004f98:	1076      	asrs	r6, r6, #1
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	e773      	b.n	8004e86 <_dtoa_r+0x3d6>
 8004f9e:	2502      	movs	r5, #2
 8004fa0:	e775      	b.n	8004e8e <_dtoa_r+0x3de>
 8004fa2:	9e04      	ldr	r6, [sp, #16]
 8004fa4:	465f      	mov	r7, fp
 8004fa6:	e792      	b.n	8004ece <_dtoa_r+0x41e>
 8004fa8:	9900      	ldr	r1, [sp, #0]
 8004faa:	4b50      	ldr	r3, [pc, #320]	; (80050ec <_dtoa_r+0x63c>)
 8004fac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fb0:	4431      	add	r1, r6
 8004fb2:	9102      	str	r1, [sp, #8]
 8004fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fb6:	eeb0 9a47 	vmov.f32	s18, s14
 8004fba:	eef0 9a67 	vmov.f32	s19, s15
 8004fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fc6:	2900      	cmp	r1, #0
 8004fc8:	d044      	beq.n	8005054 <_dtoa_r+0x5a4>
 8004fca:	494e      	ldr	r1, [pc, #312]	; (8005104 <_dtoa_r+0x654>)
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f7fb fc3d 	bl	800084c <__aeabi_ddiv>
 8004fd2:	ec53 2b19 	vmov	r2, r3, d9
 8004fd6:	f7fb f957 	bl	8000288 <__aeabi_dsub>
 8004fda:	9d00      	ldr	r5, [sp, #0]
 8004fdc:	ec41 0b19 	vmov	d9, r0, r1
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f7fb fdb8 	bl	8000b58 <__aeabi_d2iz>
 8004fe8:	4606      	mov	r6, r0
 8004fea:	f7fb fa9b 	bl	8000524 <__aeabi_i2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	f7fb f947 	bl	8000288 <__aeabi_dsub>
 8004ffa:	3630      	adds	r6, #48	; 0x30
 8004ffc:	f805 6b01 	strb.w	r6, [r5], #1
 8005000:	ec53 2b19 	vmov	r2, r3, d9
 8005004:	4680      	mov	r8, r0
 8005006:	4689      	mov	r9, r1
 8005008:	f7fb fd68 	bl	8000adc <__aeabi_dcmplt>
 800500c:	2800      	cmp	r0, #0
 800500e:	d164      	bne.n	80050da <_dtoa_r+0x62a>
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	4937      	ldr	r1, [pc, #220]	; (80050f4 <_dtoa_r+0x644>)
 8005016:	2000      	movs	r0, #0
 8005018:	f7fb f936 	bl	8000288 <__aeabi_dsub>
 800501c:	ec53 2b19 	vmov	r2, r3, d9
 8005020:	f7fb fd5c 	bl	8000adc <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f040 80b6 	bne.w	8005196 <_dtoa_r+0x6e6>
 800502a:	9b02      	ldr	r3, [sp, #8]
 800502c:	429d      	cmp	r5, r3
 800502e:	f43f af7c 	beq.w	8004f2a <_dtoa_r+0x47a>
 8005032:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <_dtoa_r+0x648>)
 8005034:	ec51 0b19 	vmov	r0, r1, d9
 8005038:	2200      	movs	r2, #0
 800503a:	f7fb fadd 	bl	80005f8 <__aeabi_dmul>
 800503e:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <_dtoa_r+0x648>)
 8005040:	ec41 0b19 	vmov	d9, r0, r1
 8005044:	2200      	movs	r2, #0
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fad5 	bl	80005f8 <__aeabi_dmul>
 800504e:	4680      	mov	r8, r0
 8005050:	4689      	mov	r9, r1
 8005052:	e7c5      	b.n	8004fe0 <_dtoa_r+0x530>
 8005054:	ec51 0b17 	vmov	r0, r1, d7
 8005058:	f7fb face 	bl	80005f8 <__aeabi_dmul>
 800505c:	9b02      	ldr	r3, [sp, #8]
 800505e:	9d00      	ldr	r5, [sp, #0]
 8005060:	930f      	str	r3, [sp, #60]	; 0x3c
 8005062:	ec41 0b19 	vmov	d9, r0, r1
 8005066:	4649      	mov	r1, r9
 8005068:	4640      	mov	r0, r8
 800506a:	f7fb fd75 	bl	8000b58 <__aeabi_d2iz>
 800506e:	4606      	mov	r6, r0
 8005070:	f7fb fa58 	bl	8000524 <__aeabi_i2d>
 8005074:	3630      	adds	r6, #48	; 0x30
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb f903 	bl	8000288 <__aeabi_dsub>
 8005082:	f805 6b01 	strb.w	r6, [r5], #1
 8005086:	9b02      	ldr	r3, [sp, #8]
 8005088:	429d      	cmp	r5, r3
 800508a:	4680      	mov	r8, r0
 800508c:	4689      	mov	r9, r1
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	d124      	bne.n	80050de <_dtoa_r+0x62e>
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <_dtoa_r+0x654>)
 8005096:	ec51 0b19 	vmov	r0, r1, d9
 800509a:	f7fb f8f7 	bl	800028c <__adddf3>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4640      	mov	r0, r8
 80050a4:	4649      	mov	r1, r9
 80050a6:	f7fb fd37 	bl	8000b18 <__aeabi_dcmpgt>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d173      	bne.n	8005196 <_dtoa_r+0x6e6>
 80050ae:	ec53 2b19 	vmov	r2, r3, d9
 80050b2:	4914      	ldr	r1, [pc, #80]	; (8005104 <_dtoa_r+0x654>)
 80050b4:	2000      	movs	r0, #0
 80050b6:	f7fb f8e7 	bl	8000288 <__aeabi_dsub>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4640      	mov	r0, r8
 80050c0:	4649      	mov	r1, r9
 80050c2:	f7fb fd0b 	bl	8000adc <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f43f af2f 	beq.w	8004f2a <_dtoa_r+0x47a>
 80050cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050ce:	1e6b      	subs	r3, r5, #1
 80050d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80050d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050d6:	2b30      	cmp	r3, #48	; 0x30
 80050d8:	d0f8      	beq.n	80050cc <_dtoa_r+0x61c>
 80050da:	46bb      	mov	fp, r7
 80050dc:	e04a      	b.n	8005174 <_dtoa_r+0x6c4>
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <_dtoa_r+0x648>)
 80050e0:	f7fb fa8a 	bl	80005f8 <__aeabi_dmul>
 80050e4:	4680      	mov	r8, r0
 80050e6:	4689      	mov	r9, r1
 80050e8:	e7bd      	b.n	8005066 <_dtoa_r+0x5b6>
 80050ea:	bf00      	nop
 80050ec:	08006c68 	.word	0x08006c68
 80050f0:	08006c40 	.word	0x08006c40
 80050f4:	3ff00000 	.word	0x3ff00000
 80050f8:	40240000 	.word	0x40240000
 80050fc:	401c0000 	.word	0x401c0000
 8005100:	40140000 	.word	0x40140000
 8005104:	3fe00000 	.word	0x3fe00000
 8005108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800510c:	9d00      	ldr	r5, [sp, #0]
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7fb fb99 	bl	800084c <__aeabi_ddiv>
 800511a:	f7fb fd1d 	bl	8000b58 <__aeabi_d2iz>
 800511e:	9001      	str	r0, [sp, #4]
 8005120:	f7fb fa00 	bl	8000524 <__aeabi_i2d>
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	f7fb fa66 	bl	80005f8 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4630      	mov	r0, r6
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb f8a8 	bl	8000288 <__aeabi_dsub>
 8005138:	9e01      	ldr	r6, [sp, #4]
 800513a:	9f04      	ldr	r7, [sp, #16]
 800513c:	3630      	adds	r6, #48	; 0x30
 800513e:	f805 6b01 	strb.w	r6, [r5], #1
 8005142:	9e00      	ldr	r6, [sp, #0]
 8005144:	1bae      	subs	r6, r5, r6
 8005146:	42b7      	cmp	r7, r6
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	d134      	bne.n	80051b8 <_dtoa_r+0x708>
 800514e:	f7fb f89d 	bl	800028c <__adddf3>
 8005152:	4642      	mov	r2, r8
 8005154:	464b      	mov	r3, r9
 8005156:	4606      	mov	r6, r0
 8005158:	460f      	mov	r7, r1
 800515a:	f7fb fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800515e:	b9c8      	cbnz	r0, 8005194 <_dtoa_r+0x6e4>
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fb fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800516c:	b110      	cbz	r0, 8005174 <_dtoa_r+0x6c4>
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	07db      	lsls	r3, r3, #31
 8005172:	d40f      	bmi.n	8005194 <_dtoa_r+0x6e4>
 8005174:	4651      	mov	r1, sl
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fbcc 	bl	8005914 <_Bfree>
 800517c:	2300      	movs	r3, #0
 800517e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005180:	702b      	strb	r3, [r5, #0]
 8005182:	f10b 0301 	add.w	r3, fp, #1
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800518a:	2b00      	cmp	r3, #0
 800518c:	f43f ace2 	beq.w	8004b54 <_dtoa_r+0xa4>
 8005190:	601d      	str	r5, [r3, #0]
 8005192:	e4df      	b.n	8004b54 <_dtoa_r+0xa4>
 8005194:	465f      	mov	r7, fp
 8005196:	462b      	mov	r3, r5
 8005198:	461d      	mov	r5, r3
 800519a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800519e:	2a39      	cmp	r2, #57	; 0x39
 80051a0:	d106      	bne.n	80051b0 <_dtoa_r+0x700>
 80051a2:	9a00      	ldr	r2, [sp, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1f7      	bne.n	8005198 <_dtoa_r+0x6e8>
 80051a8:	9900      	ldr	r1, [sp, #0]
 80051aa:	2230      	movs	r2, #48	; 0x30
 80051ac:	3701      	adds	r7, #1
 80051ae:	700a      	strb	r2, [r1, #0]
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	3201      	adds	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e790      	b.n	80050da <_dtoa_r+0x62a>
 80051b8:	4ba3      	ldr	r3, [pc, #652]	; (8005448 <_dtoa_r+0x998>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	f7fb fa1c 	bl	80005f8 <__aeabi_dmul>
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	f7fb fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d09e      	beq.n	800510e <_dtoa_r+0x65e>
 80051d0:	e7d0      	b.n	8005174 <_dtoa_r+0x6c4>
 80051d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	f000 80ca 	beq.w	800536e <_dtoa_r+0x8be>
 80051da:	9a07      	ldr	r2, [sp, #28]
 80051dc:	2a01      	cmp	r2, #1
 80051de:	f300 80ad 	bgt.w	800533c <_dtoa_r+0x88c>
 80051e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	f000 80a5 	beq.w	8005334 <_dtoa_r+0x884>
 80051ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051ee:	9e08      	ldr	r6, [sp, #32]
 80051f0:	9d05      	ldr	r5, [sp, #20]
 80051f2:	9a05      	ldr	r2, [sp, #20]
 80051f4:	441a      	add	r2, r3
 80051f6:	9205      	str	r2, [sp, #20]
 80051f8:	9a06      	ldr	r2, [sp, #24]
 80051fa:	2101      	movs	r1, #1
 80051fc:	441a      	add	r2, r3
 80051fe:	4620      	mov	r0, r4
 8005200:	9206      	str	r2, [sp, #24]
 8005202:	f000 fc3d 	bl	8005a80 <__i2b>
 8005206:	4607      	mov	r7, r0
 8005208:	b165      	cbz	r5, 8005224 <_dtoa_r+0x774>
 800520a:	9b06      	ldr	r3, [sp, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd09      	ble.n	8005224 <_dtoa_r+0x774>
 8005210:	42ab      	cmp	r3, r5
 8005212:	9a05      	ldr	r2, [sp, #20]
 8005214:	bfa8      	it	ge
 8005216:	462b      	movge	r3, r5
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	9205      	str	r2, [sp, #20]
 800521c:	9a06      	ldr	r2, [sp, #24]
 800521e:	1aed      	subs	r5, r5, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	9306      	str	r3, [sp, #24]
 8005224:	9b08      	ldr	r3, [sp, #32]
 8005226:	b1f3      	cbz	r3, 8005266 <_dtoa_r+0x7b6>
 8005228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80a3 	beq.w	8005376 <_dtoa_r+0x8c6>
 8005230:	2e00      	cmp	r6, #0
 8005232:	dd10      	ble.n	8005256 <_dtoa_r+0x7a6>
 8005234:	4639      	mov	r1, r7
 8005236:	4632      	mov	r2, r6
 8005238:	4620      	mov	r0, r4
 800523a:	f000 fce1 	bl	8005c00 <__pow5mult>
 800523e:	4652      	mov	r2, sl
 8005240:	4601      	mov	r1, r0
 8005242:	4607      	mov	r7, r0
 8005244:	4620      	mov	r0, r4
 8005246:	f000 fc31 	bl	8005aac <__multiply>
 800524a:	4651      	mov	r1, sl
 800524c:	4680      	mov	r8, r0
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fb60 	bl	8005914 <_Bfree>
 8005254:	46c2      	mov	sl, r8
 8005256:	9b08      	ldr	r3, [sp, #32]
 8005258:	1b9a      	subs	r2, r3, r6
 800525a:	d004      	beq.n	8005266 <_dtoa_r+0x7b6>
 800525c:	4651      	mov	r1, sl
 800525e:	4620      	mov	r0, r4
 8005260:	f000 fcce 	bl	8005c00 <__pow5mult>
 8005264:	4682      	mov	sl, r0
 8005266:	2101      	movs	r1, #1
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fc09 	bl	8005a80 <__i2b>
 800526e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005270:	2b00      	cmp	r3, #0
 8005272:	4606      	mov	r6, r0
 8005274:	f340 8081 	ble.w	800537a <_dtoa_r+0x8ca>
 8005278:	461a      	mov	r2, r3
 800527a:	4601      	mov	r1, r0
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fcbf 	bl	8005c00 <__pow5mult>
 8005282:	9b07      	ldr	r3, [sp, #28]
 8005284:	2b01      	cmp	r3, #1
 8005286:	4606      	mov	r6, r0
 8005288:	dd7a      	ble.n	8005380 <_dtoa_r+0x8d0>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	6933      	ldr	r3, [r6, #16]
 8005290:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005294:	6918      	ldr	r0, [r3, #16]
 8005296:	f000 fba5 	bl	80059e4 <__hi0bits>
 800529a:	f1c0 0020 	rsb	r0, r0, #32
 800529e:	9b06      	ldr	r3, [sp, #24]
 80052a0:	4418      	add	r0, r3
 80052a2:	f010 001f 	ands.w	r0, r0, #31
 80052a6:	f000 8094 	beq.w	80053d2 <_dtoa_r+0x922>
 80052aa:	f1c0 0320 	rsb	r3, r0, #32
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	f340 8085 	ble.w	80053be <_dtoa_r+0x90e>
 80052b4:	9b05      	ldr	r3, [sp, #20]
 80052b6:	f1c0 001c 	rsb	r0, r0, #28
 80052ba:	4403      	add	r3, r0
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	9b06      	ldr	r3, [sp, #24]
 80052c0:	4403      	add	r3, r0
 80052c2:	4405      	add	r5, r0
 80052c4:	9306      	str	r3, [sp, #24]
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dd05      	ble.n	80052d8 <_dtoa_r+0x828>
 80052cc:	4651      	mov	r1, sl
 80052ce:	461a      	mov	r2, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fcef 	bl	8005cb4 <__lshift>
 80052d6:	4682      	mov	sl, r0
 80052d8:	9b06      	ldr	r3, [sp, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dd05      	ble.n	80052ea <_dtoa_r+0x83a>
 80052de:	4631      	mov	r1, r6
 80052e0:	461a      	mov	r2, r3
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 fce6 	bl	8005cb4 <__lshift>
 80052e8:	4606      	mov	r6, r0
 80052ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d072      	beq.n	80053d6 <_dtoa_r+0x926>
 80052f0:	4631      	mov	r1, r6
 80052f2:	4650      	mov	r0, sl
 80052f4:	f000 fd4a 	bl	8005d8c <__mcmp>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	da6c      	bge.n	80053d6 <_dtoa_r+0x926>
 80052fc:	2300      	movs	r3, #0
 80052fe:	4651      	mov	r1, sl
 8005300:	220a      	movs	r2, #10
 8005302:	4620      	mov	r0, r4
 8005304:	f000 fb28 	bl	8005958 <__multadd>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800530e:	4682      	mov	sl, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 81b0 	beq.w	8005676 <_dtoa_r+0xbc6>
 8005316:	2300      	movs	r3, #0
 8005318:	4639      	mov	r1, r7
 800531a:	220a      	movs	r2, #10
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fb1b 	bl	8005958 <__multadd>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	4607      	mov	r7, r0
 8005328:	f300 8096 	bgt.w	8005458 <_dtoa_r+0x9a8>
 800532c:	9b07      	ldr	r3, [sp, #28]
 800532e:	2b02      	cmp	r3, #2
 8005330:	dc59      	bgt.n	80053e6 <_dtoa_r+0x936>
 8005332:	e091      	b.n	8005458 <_dtoa_r+0x9a8>
 8005334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800533a:	e758      	b.n	80051ee <_dtoa_r+0x73e>
 800533c:	9b04      	ldr	r3, [sp, #16]
 800533e:	1e5e      	subs	r6, r3, #1
 8005340:	9b08      	ldr	r3, [sp, #32]
 8005342:	42b3      	cmp	r3, r6
 8005344:	bfbf      	itttt	lt
 8005346:	9b08      	ldrlt	r3, [sp, #32]
 8005348:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800534a:	9608      	strlt	r6, [sp, #32]
 800534c:	1af3      	sublt	r3, r6, r3
 800534e:	bfb4      	ite	lt
 8005350:	18d2      	addlt	r2, r2, r3
 8005352:	1b9e      	subge	r6, r3, r6
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	bfbc      	itt	lt
 8005358:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800535a:	2600      	movlt	r6, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfb7      	itett	lt
 8005360:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005364:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005368:	1a9d      	sublt	r5, r3, r2
 800536a:	2300      	movlt	r3, #0
 800536c:	e741      	b.n	80051f2 <_dtoa_r+0x742>
 800536e:	9e08      	ldr	r6, [sp, #32]
 8005370:	9d05      	ldr	r5, [sp, #20]
 8005372:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005374:	e748      	b.n	8005208 <_dtoa_r+0x758>
 8005376:	9a08      	ldr	r2, [sp, #32]
 8005378:	e770      	b.n	800525c <_dtoa_r+0x7ac>
 800537a:	9b07      	ldr	r3, [sp, #28]
 800537c:	2b01      	cmp	r3, #1
 800537e:	dc19      	bgt.n	80053b4 <_dtoa_r+0x904>
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	b9bb      	cbnz	r3, 80053b4 <_dtoa_r+0x904>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800538a:	b99b      	cbnz	r3, 80053b4 <_dtoa_r+0x904>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005392:	0d1b      	lsrs	r3, r3, #20
 8005394:	051b      	lsls	r3, r3, #20
 8005396:	b183      	cbz	r3, 80053ba <_dtoa_r+0x90a>
 8005398:	9b05      	ldr	r3, [sp, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	9b06      	ldr	r3, [sp, #24]
 80053a0:	3301      	adds	r3, #1
 80053a2:	9306      	str	r3, [sp, #24]
 80053a4:	f04f 0801 	mov.w	r8, #1
 80053a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f47f af6f 	bne.w	800528e <_dtoa_r+0x7de>
 80053b0:	2001      	movs	r0, #1
 80053b2:	e774      	b.n	800529e <_dtoa_r+0x7ee>
 80053b4:	f04f 0800 	mov.w	r8, #0
 80053b8:	e7f6      	b.n	80053a8 <_dtoa_r+0x8f8>
 80053ba:	4698      	mov	r8, r3
 80053bc:	e7f4      	b.n	80053a8 <_dtoa_r+0x8f8>
 80053be:	d082      	beq.n	80052c6 <_dtoa_r+0x816>
 80053c0:	9a05      	ldr	r2, [sp, #20]
 80053c2:	331c      	adds	r3, #28
 80053c4:	441a      	add	r2, r3
 80053c6:	9205      	str	r2, [sp, #20]
 80053c8:	9a06      	ldr	r2, [sp, #24]
 80053ca:	441a      	add	r2, r3
 80053cc:	441d      	add	r5, r3
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	e779      	b.n	80052c6 <_dtoa_r+0x816>
 80053d2:	4603      	mov	r3, r0
 80053d4:	e7f4      	b.n	80053c0 <_dtoa_r+0x910>
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc37      	bgt.n	800544c <_dtoa_r+0x99c>
 80053dc:	9b07      	ldr	r3, [sp, #28]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	dd34      	ble.n	800544c <_dtoa_r+0x99c>
 80053e2:	9b04      	ldr	r3, [sp, #16]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	b963      	cbnz	r3, 8005404 <_dtoa_r+0x954>
 80053ea:	4631      	mov	r1, r6
 80053ec:	2205      	movs	r2, #5
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fab2 	bl	8005958 <__multadd>
 80053f4:	4601      	mov	r1, r0
 80053f6:	4606      	mov	r6, r0
 80053f8:	4650      	mov	r0, sl
 80053fa:	f000 fcc7 	bl	8005d8c <__mcmp>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f73f adbb 	bgt.w	8004f7a <_dtoa_r+0x4ca>
 8005404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005406:	9d00      	ldr	r5, [sp, #0]
 8005408:	ea6f 0b03 	mvn.w	fp, r3
 800540c:	f04f 0800 	mov.w	r8, #0
 8005410:	4631      	mov	r1, r6
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fa7e 	bl	8005914 <_Bfree>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f43f aeab 	beq.w	8005174 <_dtoa_r+0x6c4>
 800541e:	f1b8 0f00 	cmp.w	r8, #0
 8005422:	d005      	beq.n	8005430 <_dtoa_r+0x980>
 8005424:	45b8      	cmp	r8, r7
 8005426:	d003      	beq.n	8005430 <_dtoa_r+0x980>
 8005428:	4641      	mov	r1, r8
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fa72 	bl	8005914 <_Bfree>
 8005430:	4639      	mov	r1, r7
 8005432:	4620      	mov	r0, r4
 8005434:	f000 fa6e 	bl	8005914 <_Bfree>
 8005438:	e69c      	b.n	8005174 <_dtoa_r+0x6c4>
 800543a:	2600      	movs	r6, #0
 800543c:	4637      	mov	r7, r6
 800543e:	e7e1      	b.n	8005404 <_dtoa_r+0x954>
 8005440:	46bb      	mov	fp, r7
 8005442:	4637      	mov	r7, r6
 8005444:	e599      	b.n	8004f7a <_dtoa_r+0x4ca>
 8005446:	bf00      	nop
 8005448:	40240000 	.word	0x40240000
 800544c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80c8 	beq.w	80055e4 <_dtoa_r+0xb34>
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	2d00      	cmp	r5, #0
 800545a:	dd05      	ble.n	8005468 <_dtoa_r+0x9b8>
 800545c:	4639      	mov	r1, r7
 800545e:	462a      	mov	r2, r5
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fc27 	bl	8005cb4 <__lshift>
 8005466:	4607      	mov	r7, r0
 8005468:	f1b8 0f00 	cmp.w	r8, #0
 800546c:	d05b      	beq.n	8005526 <_dtoa_r+0xa76>
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4620      	mov	r0, r4
 8005472:	f000 fa0f 	bl	8005894 <_Balloc>
 8005476:	4605      	mov	r5, r0
 8005478:	b928      	cbnz	r0, 8005486 <_dtoa_r+0x9d6>
 800547a:	4b83      	ldr	r3, [pc, #524]	; (8005688 <_dtoa_r+0xbd8>)
 800547c:	4602      	mov	r2, r0
 800547e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005482:	f7ff bb2e 	b.w	8004ae2 <_dtoa_r+0x32>
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	3202      	adds	r2, #2
 800548a:	0092      	lsls	r2, r2, #2
 800548c:	f107 010c 	add.w	r1, r7, #12
 8005490:	300c      	adds	r0, #12
 8005492:	f000 ffab 	bl	80063ec <memcpy>
 8005496:	2201      	movs	r2, #1
 8005498:	4629      	mov	r1, r5
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fc0a 	bl	8005cb4 <__lshift>
 80054a0:	9b00      	ldr	r3, [sp, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054aa:	4413      	add	r3, r2
 80054ac:	9308      	str	r3, [sp, #32]
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	46b8      	mov	r8, r7
 80054b6:	9306      	str	r3, [sp, #24]
 80054b8:	4607      	mov	r7, r0
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	4631      	mov	r1, r6
 80054be:	3b01      	subs	r3, #1
 80054c0:	4650      	mov	r0, sl
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	f7ff fa6b 	bl	800499e <quorem>
 80054c8:	4641      	mov	r1, r8
 80054ca:	9002      	str	r0, [sp, #8]
 80054cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054d0:	4650      	mov	r0, sl
 80054d2:	f000 fc5b 	bl	8005d8c <__mcmp>
 80054d6:	463a      	mov	r2, r7
 80054d8:	9005      	str	r0, [sp, #20]
 80054da:	4631      	mov	r1, r6
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fc71 	bl	8005dc4 <__mdiff>
 80054e2:	68c2      	ldr	r2, [r0, #12]
 80054e4:	4605      	mov	r5, r0
 80054e6:	bb02      	cbnz	r2, 800552a <_dtoa_r+0xa7a>
 80054e8:	4601      	mov	r1, r0
 80054ea:	4650      	mov	r0, sl
 80054ec:	f000 fc4e 	bl	8005d8c <__mcmp>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
 80054f6:	9209      	str	r2, [sp, #36]	; 0x24
 80054f8:	f000 fa0c 	bl	8005914 <_Bfree>
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005500:	9d04      	ldr	r5, [sp, #16]
 8005502:	ea43 0102 	orr.w	r1, r3, r2
 8005506:	9b06      	ldr	r3, [sp, #24]
 8005508:	4319      	orrs	r1, r3
 800550a:	d110      	bne.n	800552e <_dtoa_r+0xa7e>
 800550c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005510:	d029      	beq.n	8005566 <_dtoa_r+0xab6>
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	dd02      	ble.n	800551e <_dtoa_r+0xa6e>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	f883 9000 	strb.w	r9, [r3]
 8005524:	e774      	b.n	8005410 <_dtoa_r+0x960>
 8005526:	4638      	mov	r0, r7
 8005528:	e7ba      	b.n	80054a0 <_dtoa_r+0x9f0>
 800552a:	2201      	movs	r2, #1
 800552c:	e7e1      	b.n	80054f2 <_dtoa_r+0xa42>
 800552e:	9b05      	ldr	r3, [sp, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	db04      	blt.n	800553e <_dtoa_r+0xa8e>
 8005534:	9907      	ldr	r1, [sp, #28]
 8005536:	430b      	orrs	r3, r1
 8005538:	9906      	ldr	r1, [sp, #24]
 800553a:	430b      	orrs	r3, r1
 800553c:	d120      	bne.n	8005580 <_dtoa_r+0xad0>
 800553e:	2a00      	cmp	r2, #0
 8005540:	dded      	ble.n	800551e <_dtoa_r+0xa6e>
 8005542:	4651      	mov	r1, sl
 8005544:	2201      	movs	r2, #1
 8005546:	4620      	mov	r0, r4
 8005548:	f000 fbb4 	bl	8005cb4 <__lshift>
 800554c:	4631      	mov	r1, r6
 800554e:	4682      	mov	sl, r0
 8005550:	f000 fc1c 	bl	8005d8c <__mcmp>
 8005554:	2800      	cmp	r0, #0
 8005556:	dc03      	bgt.n	8005560 <_dtoa_r+0xab0>
 8005558:	d1e1      	bne.n	800551e <_dtoa_r+0xa6e>
 800555a:	f019 0f01 	tst.w	r9, #1
 800555e:	d0de      	beq.n	800551e <_dtoa_r+0xa6e>
 8005560:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005564:	d1d8      	bne.n	8005518 <_dtoa_r+0xa68>
 8005566:	9a01      	ldr	r2, [sp, #4]
 8005568:	2339      	movs	r3, #57	; 0x39
 800556a:	7013      	strb	r3, [r2, #0]
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005576:	2a39      	cmp	r2, #57	; 0x39
 8005578:	d06c      	beq.n	8005654 <_dtoa_r+0xba4>
 800557a:	3201      	adds	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e747      	b.n	8005410 <_dtoa_r+0x960>
 8005580:	2a00      	cmp	r2, #0
 8005582:	dd07      	ble.n	8005594 <_dtoa_r+0xae4>
 8005584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005588:	d0ed      	beq.n	8005566 <_dtoa_r+0xab6>
 800558a:	9a01      	ldr	r2, [sp, #4]
 800558c:	f109 0301 	add.w	r3, r9, #1
 8005590:	7013      	strb	r3, [r2, #0]
 8005592:	e73d      	b.n	8005410 <_dtoa_r+0x960>
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	9a08      	ldr	r2, [sp, #32]
 8005598:	f803 9c01 	strb.w	r9, [r3, #-1]
 800559c:	4293      	cmp	r3, r2
 800559e:	d043      	beq.n	8005628 <_dtoa_r+0xb78>
 80055a0:	4651      	mov	r1, sl
 80055a2:	2300      	movs	r3, #0
 80055a4:	220a      	movs	r2, #10
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f9d6 	bl	8005958 <__multadd>
 80055ac:	45b8      	cmp	r8, r7
 80055ae:	4682      	mov	sl, r0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f04f 020a 	mov.w	r2, #10
 80055b8:	4641      	mov	r1, r8
 80055ba:	4620      	mov	r0, r4
 80055bc:	d107      	bne.n	80055ce <_dtoa_r+0xb1e>
 80055be:	f000 f9cb 	bl	8005958 <__multadd>
 80055c2:	4680      	mov	r8, r0
 80055c4:	4607      	mov	r7, r0
 80055c6:	9b04      	ldr	r3, [sp, #16]
 80055c8:	3301      	adds	r3, #1
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	e775      	b.n	80054ba <_dtoa_r+0xa0a>
 80055ce:	f000 f9c3 	bl	8005958 <__multadd>
 80055d2:	4639      	mov	r1, r7
 80055d4:	4680      	mov	r8, r0
 80055d6:	2300      	movs	r3, #0
 80055d8:	220a      	movs	r2, #10
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f9bc 	bl	8005958 <__multadd>
 80055e0:	4607      	mov	r7, r0
 80055e2:	e7f0      	b.n	80055c6 <_dtoa_r+0xb16>
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	9d00      	ldr	r5, [sp, #0]
 80055ea:	4631      	mov	r1, r6
 80055ec:	4650      	mov	r0, sl
 80055ee:	f7ff f9d6 	bl	800499e <quorem>
 80055f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055f6:	9b00      	ldr	r3, [sp, #0]
 80055f8:	f805 9b01 	strb.w	r9, [r5], #1
 80055fc:	1aea      	subs	r2, r5, r3
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	4293      	cmp	r3, r2
 8005602:	dd07      	ble.n	8005614 <_dtoa_r+0xb64>
 8005604:	4651      	mov	r1, sl
 8005606:	2300      	movs	r3, #0
 8005608:	220a      	movs	r2, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f9a4 	bl	8005958 <__multadd>
 8005610:	4682      	mov	sl, r0
 8005612:	e7ea      	b.n	80055ea <_dtoa_r+0xb3a>
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfc8      	it	gt
 800561a:	461d      	movgt	r5, r3
 800561c:	9b00      	ldr	r3, [sp, #0]
 800561e:	bfd8      	it	le
 8005620:	2501      	movle	r5, #1
 8005622:	441d      	add	r5, r3
 8005624:	f04f 0800 	mov.w	r8, #0
 8005628:	4651      	mov	r1, sl
 800562a:	2201      	movs	r2, #1
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fb41 	bl	8005cb4 <__lshift>
 8005632:	4631      	mov	r1, r6
 8005634:	4682      	mov	sl, r0
 8005636:	f000 fba9 	bl	8005d8c <__mcmp>
 800563a:	2800      	cmp	r0, #0
 800563c:	dc96      	bgt.n	800556c <_dtoa_r+0xabc>
 800563e:	d102      	bne.n	8005646 <_dtoa_r+0xb96>
 8005640:	f019 0f01 	tst.w	r9, #1
 8005644:	d192      	bne.n	800556c <_dtoa_r+0xabc>
 8005646:	462b      	mov	r3, r5
 8005648:	461d      	mov	r5, r3
 800564a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800564e:	2a30      	cmp	r2, #48	; 0x30
 8005650:	d0fa      	beq.n	8005648 <_dtoa_r+0xb98>
 8005652:	e6dd      	b.n	8005410 <_dtoa_r+0x960>
 8005654:	9a00      	ldr	r2, [sp, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d189      	bne.n	800556e <_dtoa_r+0xabe>
 800565a:	f10b 0b01 	add.w	fp, fp, #1
 800565e:	2331      	movs	r3, #49	; 0x31
 8005660:	e796      	b.n	8005590 <_dtoa_r+0xae0>
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <_dtoa_r+0xbdc>)
 8005664:	f7ff ba99 	b.w	8004b9a <_dtoa_r+0xea>
 8005668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566a:	2b00      	cmp	r3, #0
 800566c:	f47f aa6d 	bne.w	8004b4a <_dtoa_r+0x9a>
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <_dtoa_r+0xbe0>)
 8005672:	f7ff ba92 	b.w	8004b9a <_dtoa_r+0xea>
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	dcb5      	bgt.n	80055e8 <_dtoa_r+0xb38>
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	2b02      	cmp	r3, #2
 8005680:	f73f aeb1 	bgt.w	80053e6 <_dtoa_r+0x936>
 8005684:	e7b0      	b.n	80055e8 <_dtoa_r+0xb38>
 8005686:	bf00      	nop
 8005688:	08006bd4 	.word	0x08006bd4
 800568c:	08006b34 	.word	0x08006b34
 8005690:	08006b58 	.word	0x08006b58

08005694 <_free_r>:
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005696:	2900      	cmp	r1, #0
 8005698:	d044      	beq.n	8005724 <_free_r+0x90>
 800569a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569e:	9001      	str	r0, [sp, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f1a1 0404 	sub.w	r4, r1, #4
 80056a6:	bfb8      	it	lt
 80056a8:	18e4      	addlt	r4, r4, r3
 80056aa:	f000 f8e7 	bl	800587c <__malloc_lock>
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <_free_r+0x94>)
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	b933      	cbnz	r3, 80056c4 <_free_r+0x30>
 80056b6:	6063      	str	r3, [r4, #4]
 80056b8:	6014      	str	r4, [r2, #0]
 80056ba:	b003      	add	sp, #12
 80056bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c0:	f000 b8e2 	b.w	8005888 <__malloc_unlock>
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d908      	bls.n	80056da <_free_r+0x46>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf01      	itttt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	1949      	addeq	r1, r1, r5
 80056d6:	6021      	streq	r1, [r4, #0]
 80056d8:	e7ed      	b.n	80056b6 <_free_r+0x22>
 80056da:	461a      	mov	r2, r3
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b10b      	cbz	r3, 80056e4 <_free_r+0x50>
 80056e0:	42a3      	cmp	r3, r4
 80056e2:	d9fa      	bls.n	80056da <_free_r+0x46>
 80056e4:	6811      	ldr	r1, [r2, #0]
 80056e6:	1855      	adds	r5, r2, r1
 80056e8:	42a5      	cmp	r5, r4
 80056ea:	d10b      	bne.n	8005704 <_free_r+0x70>
 80056ec:	6824      	ldr	r4, [r4, #0]
 80056ee:	4421      	add	r1, r4
 80056f0:	1854      	adds	r4, r2, r1
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	d1e0      	bne.n	80056ba <_free_r+0x26>
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6053      	str	r3, [r2, #4]
 80056fe:	440c      	add	r4, r1
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	e7da      	b.n	80056ba <_free_r+0x26>
 8005704:	d902      	bls.n	800570c <_free_r+0x78>
 8005706:	230c      	movs	r3, #12
 8005708:	6003      	str	r3, [r0, #0]
 800570a:	e7d6      	b.n	80056ba <_free_r+0x26>
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	1961      	adds	r1, r4, r5
 8005710:	428b      	cmp	r3, r1
 8005712:	bf04      	itt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	bf04      	itt	eq
 800571c:	1949      	addeq	r1, r1, r5
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	6054      	str	r4, [r2, #4]
 8005722:	e7ca      	b.n	80056ba <_free_r+0x26>
 8005724:	b003      	add	sp, #12
 8005726:	bd30      	pop	{r4, r5, pc}
 8005728:	200004ac 	.word	0x200004ac

0800572c <malloc>:
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <malloc+0xc>)
 800572e:	4601      	mov	r1, r0
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	f000 b823 	b.w	800577c <_malloc_r>
 8005736:	bf00      	nop
 8005738:	200000e4 	.word	0x200000e4

0800573c <sbrk_aligned>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4e0e      	ldr	r6, [pc, #56]	; (8005778 <sbrk_aligned+0x3c>)
 8005740:	460c      	mov	r4, r1
 8005742:	6831      	ldr	r1, [r6, #0]
 8005744:	4605      	mov	r5, r0
 8005746:	b911      	cbnz	r1, 800574e <sbrk_aligned+0x12>
 8005748:	f000 fe40 	bl	80063cc <_sbrk_r>
 800574c:	6030      	str	r0, [r6, #0]
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f000 fe3b 	bl	80063cc <_sbrk_r>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d00a      	beq.n	8005770 <sbrk_aligned+0x34>
 800575a:	1cc4      	adds	r4, r0, #3
 800575c:	f024 0403 	bic.w	r4, r4, #3
 8005760:	42a0      	cmp	r0, r4
 8005762:	d007      	beq.n	8005774 <sbrk_aligned+0x38>
 8005764:	1a21      	subs	r1, r4, r0
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fe30 	bl	80063cc <_sbrk_r>
 800576c:	3001      	adds	r0, #1
 800576e:	d101      	bne.n	8005774 <sbrk_aligned+0x38>
 8005770:	f04f 34ff 	mov.w	r4, #4294967295
 8005774:	4620      	mov	r0, r4
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	200004b0 	.word	0x200004b0

0800577c <_malloc_r>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	1ccd      	adds	r5, r1, #3
 8005782:	f025 0503 	bic.w	r5, r5, #3
 8005786:	3508      	adds	r5, #8
 8005788:	2d0c      	cmp	r5, #12
 800578a:	bf38      	it	cc
 800578c:	250c      	movcc	r5, #12
 800578e:	2d00      	cmp	r5, #0
 8005790:	4607      	mov	r7, r0
 8005792:	db01      	blt.n	8005798 <_malloc_r+0x1c>
 8005794:	42a9      	cmp	r1, r5
 8005796:	d905      	bls.n	80057a4 <_malloc_r+0x28>
 8005798:	230c      	movs	r3, #12
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	2600      	movs	r6, #0
 800579e:	4630      	mov	r0, r6
 80057a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005878 <_malloc_r+0xfc>
 80057a8:	f000 f868 	bl	800587c <__malloc_lock>
 80057ac:	f8d8 3000 	ldr.w	r3, [r8]
 80057b0:	461c      	mov	r4, r3
 80057b2:	bb5c      	cbnz	r4, 800580c <_malloc_r+0x90>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4638      	mov	r0, r7
 80057b8:	f7ff ffc0 	bl	800573c <sbrk_aligned>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	4604      	mov	r4, r0
 80057c0:	d155      	bne.n	800586e <_malloc_r+0xf2>
 80057c2:	f8d8 4000 	ldr.w	r4, [r8]
 80057c6:	4626      	mov	r6, r4
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	d145      	bne.n	8005858 <_malloc_r+0xdc>
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	d048      	beq.n	8005862 <_malloc_r+0xe6>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	4631      	mov	r1, r6
 80057d4:	4638      	mov	r0, r7
 80057d6:	eb04 0903 	add.w	r9, r4, r3
 80057da:	f000 fdf7 	bl	80063cc <_sbrk_r>
 80057de:	4581      	cmp	r9, r0
 80057e0:	d13f      	bne.n	8005862 <_malloc_r+0xe6>
 80057e2:	6821      	ldr	r1, [r4, #0]
 80057e4:	1a6d      	subs	r5, r5, r1
 80057e6:	4629      	mov	r1, r5
 80057e8:	4638      	mov	r0, r7
 80057ea:	f7ff ffa7 	bl	800573c <sbrk_aligned>
 80057ee:	3001      	adds	r0, #1
 80057f0:	d037      	beq.n	8005862 <_malloc_r+0xe6>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	442b      	add	r3, r5
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	f8d8 3000 	ldr.w	r3, [r8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d038      	beq.n	8005872 <_malloc_r+0xf6>
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	42a2      	cmp	r2, r4
 8005804:	d12b      	bne.n	800585e <_malloc_r+0xe2>
 8005806:	2200      	movs	r2, #0
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	e00f      	b.n	800582c <_malloc_r+0xb0>
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	1b52      	subs	r2, r2, r5
 8005810:	d41f      	bmi.n	8005852 <_malloc_r+0xd6>
 8005812:	2a0b      	cmp	r2, #11
 8005814:	d917      	bls.n	8005846 <_malloc_r+0xca>
 8005816:	1961      	adds	r1, r4, r5
 8005818:	42a3      	cmp	r3, r4
 800581a:	6025      	str	r5, [r4, #0]
 800581c:	bf18      	it	ne
 800581e:	6059      	strne	r1, [r3, #4]
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	bf08      	it	eq
 8005824:	f8c8 1000 	streq.w	r1, [r8]
 8005828:	5162      	str	r2, [r4, r5]
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4638      	mov	r0, r7
 800582e:	f104 060b 	add.w	r6, r4, #11
 8005832:	f000 f829 	bl	8005888 <__malloc_unlock>
 8005836:	f026 0607 	bic.w	r6, r6, #7
 800583a:	1d23      	adds	r3, r4, #4
 800583c:	1af2      	subs	r2, r6, r3
 800583e:	d0ae      	beq.n	800579e <_malloc_r+0x22>
 8005840:	1b9b      	subs	r3, r3, r6
 8005842:	50a3      	str	r3, [r4, r2]
 8005844:	e7ab      	b.n	800579e <_malloc_r+0x22>
 8005846:	42a3      	cmp	r3, r4
 8005848:	6862      	ldr	r2, [r4, #4]
 800584a:	d1dd      	bne.n	8005808 <_malloc_r+0x8c>
 800584c:	f8c8 2000 	str.w	r2, [r8]
 8005850:	e7ec      	b.n	800582c <_malloc_r+0xb0>
 8005852:	4623      	mov	r3, r4
 8005854:	6864      	ldr	r4, [r4, #4]
 8005856:	e7ac      	b.n	80057b2 <_malloc_r+0x36>
 8005858:	4634      	mov	r4, r6
 800585a:	6876      	ldr	r6, [r6, #4]
 800585c:	e7b4      	b.n	80057c8 <_malloc_r+0x4c>
 800585e:	4613      	mov	r3, r2
 8005860:	e7cc      	b.n	80057fc <_malloc_r+0x80>
 8005862:	230c      	movs	r3, #12
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4638      	mov	r0, r7
 8005868:	f000 f80e 	bl	8005888 <__malloc_unlock>
 800586c:	e797      	b.n	800579e <_malloc_r+0x22>
 800586e:	6025      	str	r5, [r4, #0]
 8005870:	e7dc      	b.n	800582c <_malloc_r+0xb0>
 8005872:	605b      	str	r3, [r3, #4]
 8005874:	deff      	udf	#255	; 0xff
 8005876:	bf00      	nop
 8005878:	200004ac 	.word	0x200004ac

0800587c <__malloc_lock>:
 800587c:	4801      	ldr	r0, [pc, #4]	; (8005884 <__malloc_lock+0x8>)
 800587e:	f7ff b88c 	b.w	800499a <__retarget_lock_acquire_recursive>
 8005882:	bf00      	nop
 8005884:	200004a8 	.word	0x200004a8

08005888 <__malloc_unlock>:
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <__malloc_unlock+0x8>)
 800588a:	f7ff b887 	b.w	800499c <__retarget_lock_release_recursive>
 800588e:	bf00      	nop
 8005890:	200004a8 	.word	0x200004a8

08005894 <_Balloc>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	69c6      	ldr	r6, [r0, #28]
 8005898:	4604      	mov	r4, r0
 800589a:	460d      	mov	r5, r1
 800589c:	b976      	cbnz	r6, 80058bc <_Balloc+0x28>
 800589e:	2010      	movs	r0, #16
 80058a0:	f7ff ff44 	bl	800572c <malloc>
 80058a4:	4602      	mov	r2, r0
 80058a6:	61e0      	str	r0, [r4, #28]
 80058a8:	b920      	cbnz	r0, 80058b4 <_Balloc+0x20>
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <_Balloc+0x78>)
 80058ac:	4818      	ldr	r0, [pc, #96]	; (8005910 <_Balloc+0x7c>)
 80058ae:	216b      	movs	r1, #107	; 0x6b
 80058b0:	f000 fdaa 	bl	8006408 <__assert_func>
 80058b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b8:	6006      	str	r6, [r0, #0]
 80058ba:	60c6      	str	r6, [r0, #12]
 80058bc:	69e6      	ldr	r6, [r4, #28]
 80058be:	68f3      	ldr	r3, [r6, #12]
 80058c0:	b183      	cbz	r3, 80058e4 <_Balloc+0x50>
 80058c2:	69e3      	ldr	r3, [r4, #28]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058ca:	b9b8      	cbnz	r0, 80058fc <_Balloc+0x68>
 80058cc:	2101      	movs	r1, #1
 80058ce:	fa01 f605 	lsl.w	r6, r1, r5
 80058d2:	1d72      	adds	r2, r6, #5
 80058d4:	0092      	lsls	r2, r2, #2
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fdb4 	bl	8006444 <_calloc_r>
 80058dc:	b160      	cbz	r0, 80058f8 <_Balloc+0x64>
 80058de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058e2:	e00e      	b.n	8005902 <_Balloc+0x6e>
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	2104      	movs	r1, #4
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fdab 	bl	8006444 <_calloc_r>
 80058ee:	69e3      	ldr	r3, [r4, #28]
 80058f0:	60f0      	str	r0, [r6, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e4      	bne.n	80058c2 <_Balloc+0x2e>
 80058f8:	2000      	movs	r0, #0
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	6802      	ldr	r2, [r0, #0]
 80058fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005902:	2300      	movs	r3, #0
 8005904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005908:	e7f7      	b.n	80058fa <_Balloc+0x66>
 800590a:	bf00      	nop
 800590c:	08006b65 	.word	0x08006b65
 8005910:	08006be5 	.word	0x08006be5

08005914 <_Bfree>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	69c6      	ldr	r6, [r0, #28]
 8005918:	4605      	mov	r5, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b976      	cbnz	r6, 800593c <_Bfree+0x28>
 800591e:	2010      	movs	r0, #16
 8005920:	f7ff ff04 	bl	800572c <malloc>
 8005924:	4602      	mov	r2, r0
 8005926:	61e8      	str	r0, [r5, #28]
 8005928:	b920      	cbnz	r0, 8005934 <_Bfree+0x20>
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <_Bfree+0x3c>)
 800592c:	4809      	ldr	r0, [pc, #36]	; (8005954 <_Bfree+0x40>)
 800592e:	218f      	movs	r1, #143	; 0x8f
 8005930:	f000 fd6a 	bl	8006408 <__assert_func>
 8005934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005938:	6006      	str	r6, [r0, #0]
 800593a:	60c6      	str	r6, [r0, #12]
 800593c:	b13c      	cbz	r4, 800594e <_Bfree+0x3a>
 800593e:	69eb      	ldr	r3, [r5, #28]
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005948:	6021      	str	r1, [r4, #0]
 800594a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	08006b65 	.word	0x08006b65
 8005954:	08006be5 	.word	0x08006be5

08005958 <__multadd>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	690d      	ldr	r5, [r1, #16]
 800595e:	4607      	mov	r7, r0
 8005960:	460c      	mov	r4, r1
 8005962:	461e      	mov	r6, r3
 8005964:	f101 0c14 	add.w	ip, r1, #20
 8005968:	2000      	movs	r0, #0
 800596a:	f8dc 3000 	ldr.w	r3, [ip]
 800596e:	b299      	uxth	r1, r3
 8005970:	fb02 6101 	mla	r1, r2, r1, r6
 8005974:	0c1e      	lsrs	r6, r3, #16
 8005976:	0c0b      	lsrs	r3, r1, #16
 8005978:	fb02 3306 	mla	r3, r2, r6, r3
 800597c:	b289      	uxth	r1, r1
 800597e:	3001      	adds	r0, #1
 8005980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005984:	4285      	cmp	r5, r0
 8005986:	f84c 1b04 	str.w	r1, [ip], #4
 800598a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800598e:	dcec      	bgt.n	800596a <__multadd+0x12>
 8005990:	b30e      	cbz	r6, 80059d6 <__multadd+0x7e>
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	42ab      	cmp	r3, r5
 8005996:	dc19      	bgt.n	80059cc <__multadd+0x74>
 8005998:	6861      	ldr	r1, [r4, #4]
 800599a:	4638      	mov	r0, r7
 800599c:	3101      	adds	r1, #1
 800599e:	f7ff ff79 	bl	8005894 <_Balloc>
 80059a2:	4680      	mov	r8, r0
 80059a4:	b928      	cbnz	r0, 80059b2 <__multadd+0x5a>
 80059a6:	4602      	mov	r2, r0
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <__multadd+0x84>)
 80059aa:	480d      	ldr	r0, [pc, #52]	; (80059e0 <__multadd+0x88>)
 80059ac:	21ba      	movs	r1, #186	; 0xba
 80059ae:	f000 fd2b 	bl	8006408 <__assert_func>
 80059b2:	6922      	ldr	r2, [r4, #16]
 80059b4:	3202      	adds	r2, #2
 80059b6:	f104 010c 	add.w	r1, r4, #12
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	300c      	adds	r0, #12
 80059be:	f000 fd15 	bl	80063ec <memcpy>
 80059c2:	4621      	mov	r1, r4
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff ffa5 	bl	8005914 <_Bfree>
 80059ca:	4644      	mov	r4, r8
 80059cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059d0:	3501      	adds	r5, #1
 80059d2:	615e      	str	r6, [r3, #20]
 80059d4:	6125      	str	r5, [r4, #16]
 80059d6:	4620      	mov	r0, r4
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059dc:	08006bd4 	.word	0x08006bd4
 80059e0:	08006be5 	.word	0x08006be5

080059e4 <__hi0bits>:
 80059e4:	0c03      	lsrs	r3, r0, #16
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	b9d3      	cbnz	r3, 8005a20 <__hi0bits+0x3c>
 80059ea:	0400      	lsls	r0, r0, #16
 80059ec:	2310      	movs	r3, #16
 80059ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059f2:	bf04      	itt	eq
 80059f4:	0200      	lsleq	r0, r0, #8
 80059f6:	3308      	addeq	r3, #8
 80059f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059fc:	bf04      	itt	eq
 80059fe:	0100      	lsleq	r0, r0, #4
 8005a00:	3304      	addeq	r3, #4
 8005a02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a06:	bf04      	itt	eq
 8005a08:	0080      	lsleq	r0, r0, #2
 8005a0a:	3302      	addeq	r3, #2
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	db05      	blt.n	8005a1c <__hi0bits+0x38>
 8005a10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a14:	f103 0301 	add.w	r3, r3, #1
 8005a18:	bf08      	it	eq
 8005a1a:	2320      	moveq	r3, #32
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	4770      	bx	lr
 8005a20:	2300      	movs	r3, #0
 8005a22:	e7e4      	b.n	80059ee <__hi0bits+0xa>

08005a24 <__lo0bits>:
 8005a24:	6803      	ldr	r3, [r0, #0]
 8005a26:	f013 0207 	ands.w	r2, r3, #7
 8005a2a:	d00c      	beq.n	8005a46 <__lo0bits+0x22>
 8005a2c:	07d9      	lsls	r1, r3, #31
 8005a2e:	d422      	bmi.n	8005a76 <__lo0bits+0x52>
 8005a30:	079a      	lsls	r2, r3, #30
 8005a32:	bf49      	itett	mi
 8005a34:	085b      	lsrmi	r3, r3, #1
 8005a36:	089b      	lsrpl	r3, r3, #2
 8005a38:	6003      	strmi	r3, [r0, #0]
 8005a3a:	2201      	movmi	r2, #1
 8005a3c:	bf5c      	itt	pl
 8005a3e:	6003      	strpl	r3, [r0, #0]
 8005a40:	2202      	movpl	r2, #2
 8005a42:	4610      	mov	r0, r2
 8005a44:	4770      	bx	lr
 8005a46:	b299      	uxth	r1, r3
 8005a48:	b909      	cbnz	r1, 8005a4e <__lo0bits+0x2a>
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	b2d9      	uxtb	r1, r3
 8005a50:	b909      	cbnz	r1, 8005a56 <__lo0bits+0x32>
 8005a52:	3208      	adds	r2, #8
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	0719      	lsls	r1, r3, #28
 8005a58:	bf04      	itt	eq
 8005a5a:	091b      	lsreq	r3, r3, #4
 8005a5c:	3204      	addeq	r2, #4
 8005a5e:	0799      	lsls	r1, r3, #30
 8005a60:	bf04      	itt	eq
 8005a62:	089b      	lsreq	r3, r3, #2
 8005a64:	3202      	addeq	r2, #2
 8005a66:	07d9      	lsls	r1, r3, #31
 8005a68:	d403      	bmi.n	8005a72 <__lo0bits+0x4e>
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f102 0201 	add.w	r2, r2, #1
 8005a70:	d003      	beq.n	8005a7a <__lo0bits+0x56>
 8005a72:	6003      	str	r3, [r0, #0]
 8005a74:	e7e5      	b.n	8005a42 <__lo0bits+0x1e>
 8005a76:	2200      	movs	r2, #0
 8005a78:	e7e3      	b.n	8005a42 <__lo0bits+0x1e>
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	e7e1      	b.n	8005a42 <__lo0bits+0x1e>
	...

08005a80 <__i2b>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	2101      	movs	r1, #1
 8005a86:	f7ff ff05 	bl	8005894 <_Balloc>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	b928      	cbnz	r0, 8005a9a <__i2b+0x1a>
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <__i2b+0x24>)
 8005a90:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <__i2b+0x28>)
 8005a92:	f240 1145 	movw	r1, #325	; 0x145
 8005a96:	f000 fcb7 	bl	8006408 <__assert_func>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	6144      	str	r4, [r0, #20]
 8005a9e:	6103      	str	r3, [r0, #16]
 8005aa0:	bd10      	pop	{r4, pc}
 8005aa2:	bf00      	nop
 8005aa4:	08006bd4 	.word	0x08006bd4
 8005aa8:	08006be5 	.word	0x08006be5

08005aac <__multiply>:
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	690a      	ldr	r2, [r1, #16]
 8005ab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bfb8      	it	lt
 8005abc:	460b      	movlt	r3, r1
 8005abe:	460c      	mov	r4, r1
 8005ac0:	bfbc      	itt	lt
 8005ac2:	464c      	movlt	r4, r9
 8005ac4:	4699      	movlt	r9, r3
 8005ac6:	6927      	ldr	r7, [r4, #16]
 8005ac8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	6861      	ldr	r1, [r4, #4]
 8005ad0:	eb07 060a 	add.w	r6, r7, sl
 8005ad4:	42b3      	cmp	r3, r6
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	bfb8      	it	lt
 8005ada:	3101      	addlt	r1, #1
 8005adc:	f7ff feda 	bl	8005894 <_Balloc>
 8005ae0:	b930      	cbnz	r0, 8005af0 <__multiply+0x44>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b44      	ldr	r3, [pc, #272]	; (8005bf8 <__multiply+0x14c>)
 8005ae6:	4845      	ldr	r0, [pc, #276]	; (8005bfc <__multiply+0x150>)
 8005ae8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005aec:	f000 fc8c 	bl	8006408 <__assert_func>
 8005af0:	f100 0514 	add.w	r5, r0, #20
 8005af4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af8:	462b      	mov	r3, r5
 8005afa:	2200      	movs	r2, #0
 8005afc:	4543      	cmp	r3, r8
 8005afe:	d321      	bcc.n	8005b44 <__multiply+0x98>
 8005b00:	f104 0314 	add.w	r3, r4, #20
 8005b04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b08:	f109 0314 	add.w	r3, r9, #20
 8005b0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b10:	9202      	str	r2, [sp, #8]
 8005b12:	1b3a      	subs	r2, r7, r4
 8005b14:	3a15      	subs	r2, #21
 8005b16:	f022 0203 	bic.w	r2, r2, #3
 8005b1a:	3204      	adds	r2, #4
 8005b1c:	f104 0115 	add.w	r1, r4, #21
 8005b20:	428f      	cmp	r7, r1
 8005b22:	bf38      	it	cc
 8005b24:	2204      	movcc	r2, #4
 8005b26:	9201      	str	r2, [sp, #4]
 8005b28:	9a02      	ldr	r2, [sp, #8]
 8005b2a:	9303      	str	r3, [sp, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d80c      	bhi.n	8005b4a <__multiply+0x9e>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	dd03      	ble.n	8005b3c <__multiply+0x90>
 8005b34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05b      	beq.n	8005bf4 <__multiply+0x148>
 8005b3c:	6106      	str	r6, [r0, #16]
 8005b3e:	b005      	add	sp, #20
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	f843 2b04 	str.w	r2, [r3], #4
 8005b48:	e7d8      	b.n	8005afc <__multiply+0x50>
 8005b4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b4e:	f1ba 0f00 	cmp.w	sl, #0
 8005b52:	d024      	beq.n	8005b9e <__multiply+0xf2>
 8005b54:	f104 0e14 	add.w	lr, r4, #20
 8005b58:	46a9      	mov	r9, r5
 8005b5a:	f04f 0c00 	mov.w	ip, #0
 8005b5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b62:	f8d9 1000 	ldr.w	r1, [r9]
 8005b66:	fa1f fb82 	uxth.w	fp, r2
 8005b6a:	b289      	uxth	r1, r1
 8005b6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b74:	f8d9 2000 	ldr.w	r2, [r9]
 8005b78:	4461      	add	r1, ip
 8005b7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b86:	b289      	uxth	r1, r1
 8005b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b8c:	4577      	cmp	r7, lr
 8005b8e:	f849 1b04 	str.w	r1, [r9], #4
 8005b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b96:	d8e2      	bhi.n	8005b5e <__multiply+0xb2>
 8005b98:	9a01      	ldr	r2, [sp, #4]
 8005b9a:	f845 c002 	str.w	ip, [r5, r2]
 8005b9e:	9a03      	ldr	r2, [sp, #12]
 8005ba0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	d021      	beq.n	8005bf0 <__multiply+0x144>
 8005bac:	6829      	ldr	r1, [r5, #0]
 8005bae:	f104 0c14 	add.w	ip, r4, #20
 8005bb2:	46ae      	mov	lr, r5
 8005bb4:	f04f 0a00 	mov.w	sl, #0
 8005bb8:	f8bc b000 	ldrh.w	fp, [ip]
 8005bbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bc0:	fb09 220b 	mla	r2, r9, fp, r2
 8005bc4:	4452      	add	r2, sl
 8005bc6:	b289      	uxth	r1, r1
 8005bc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bcc:	f84e 1b04 	str.w	r1, [lr], #4
 8005bd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bd8:	f8be 1000 	ldrh.w	r1, [lr]
 8005bdc:	fb09 110a 	mla	r1, r9, sl, r1
 8005be0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005be4:	4567      	cmp	r7, ip
 8005be6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bea:	d8e5      	bhi.n	8005bb8 <__multiply+0x10c>
 8005bec:	9a01      	ldr	r2, [sp, #4]
 8005bee:	50a9      	str	r1, [r5, r2]
 8005bf0:	3504      	adds	r5, #4
 8005bf2:	e799      	b.n	8005b28 <__multiply+0x7c>
 8005bf4:	3e01      	subs	r6, #1
 8005bf6:	e79b      	b.n	8005b30 <__multiply+0x84>
 8005bf8:	08006bd4 	.word	0x08006bd4
 8005bfc:	08006be5 	.word	0x08006be5

08005c00 <__pow5mult>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	4615      	mov	r5, r2
 8005c06:	f012 0203 	ands.w	r2, r2, #3
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460f      	mov	r7, r1
 8005c0e:	d007      	beq.n	8005c20 <__pow5mult+0x20>
 8005c10:	4c25      	ldr	r4, [pc, #148]	; (8005ca8 <__pow5mult+0xa8>)
 8005c12:	3a01      	subs	r2, #1
 8005c14:	2300      	movs	r3, #0
 8005c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c1a:	f7ff fe9d 	bl	8005958 <__multadd>
 8005c1e:	4607      	mov	r7, r0
 8005c20:	10ad      	asrs	r5, r5, #2
 8005c22:	d03d      	beq.n	8005ca0 <__pow5mult+0xa0>
 8005c24:	69f4      	ldr	r4, [r6, #28]
 8005c26:	b97c      	cbnz	r4, 8005c48 <__pow5mult+0x48>
 8005c28:	2010      	movs	r0, #16
 8005c2a:	f7ff fd7f 	bl	800572c <malloc>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	61f0      	str	r0, [r6, #28]
 8005c32:	b928      	cbnz	r0, 8005c40 <__pow5mult+0x40>
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <__pow5mult+0xac>)
 8005c36:	481e      	ldr	r0, [pc, #120]	; (8005cb0 <__pow5mult+0xb0>)
 8005c38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c3c:	f000 fbe4 	bl	8006408 <__assert_func>
 8005c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c44:	6004      	str	r4, [r0, #0]
 8005c46:	60c4      	str	r4, [r0, #12]
 8005c48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c50:	b94c      	cbnz	r4, 8005c66 <__pow5mult+0x66>
 8005c52:	f240 2171 	movw	r1, #625	; 0x271
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ff12 	bl	8005a80 <__i2b>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c62:	4604      	mov	r4, r0
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	f04f 0900 	mov.w	r9, #0
 8005c6a:	07eb      	lsls	r3, r5, #31
 8005c6c:	d50a      	bpl.n	8005c84 <__pow5mult+0x84>
 8005c6e:	4639      	mov	r1, r7
 8005c70:	4622      	mov	r2, r4
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7ff ff1a 	bl	8005aac <__multiply>
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff fe49 	bl	8005914 <_Bfree>
 8005c82:	4647      	mov	r7, r8
 8005c84:	106d      	asrs	r5, r5, #1
 8005c86:	d00b      	beq.n	8005ca0 <__pow5mult+0xa0>
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	b938      	cbnz	r0, 8005c9c <__pow5mult+0x9c>
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff ff0b 	bl	8005aac <__multiply>
 8005c96:	6020      	str	r0, [r4, #0]
 8005c98:	f8c0 9000 	str.w	r9, [r0]
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	e7e4      	b.n	8005c6a <__pow5mult+0x6a>
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08006d30 	.word	0x08006d30
 8005cac:	08006b65 	.word	0x08006b65
 8005cb0:	08006be5 	.word	0x08006be5

08005cb4 <__lshift>:
 8005cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	460c      	mov	r4, r1
 8005cba:	6849      	ldr	r1, [r1, #4]
 8005cbc:	6923      	ldr	r3, [r4, #16]
 8005cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	4691      	mov	r9, r2
 8005cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ccc:	f108 0601 	add.w	r6, r8, #1
 8005cd0:	42b3      	cmp	r3, r6
 8005cd2:	db0b      	blt.n	8005cec <__lshift+0x38>
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f7ff fddd 	bl	8005894 <_Balloc>
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b948      	cbnz	r0, 8005cf2 <__lshift+0x3e>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <__lshift+0xd0>)
 8005ce2:	4829      	ldr	r0, [pc, #164]	; (8005d88 <__lshift+0xd4>)
 8005ce4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ce8:	f000 fb8e 	bl	8006408 <__assert_func>
 8005cec:	3101      	adds	r1, #1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	e7ee      	b.n	8005cd0 <__lshift+0x1c>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f100 0114 	add.w	r1, r0, #20
 8005cf8:	f100 0210 	add.w	r2, r0, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	4553      	cmp	r3, sl
 8005d00:	db33      	blt.n	8005d6a <__lshift+0xb6>
 8005d02:	6920      	ldr	r0, [r4, #16]
 8005d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d08:	f104 0314 	add.w	r3, r4, #20
 8005d0c:	f019 091f 	ands.w	r9, r9, #31
 8005d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d18:	d02b      	beq.n	8005d72 <__lshift+0xbe>
 8005d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8005d1e:	468a      	mov	sl, r1
 8005d20:	2200      	movs	r2, #0
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	fa00 f009 	lsl.w	r0, r0, r9
 8005d28:	4310      	orrs	r0, r2
 8005d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d32:	459c      	cmp	ip, r3
 8005d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d38:	d8f3      	bhi.n	8005d22 <__lshift+0x6e>
 8005d3a:	ebac 0304 	sub.w	r3, ip, r4
 8005d3e:	3b15      	subs	r3, #21
 8005d40:	f023 0303 	bic.w	r3, r3, #3
 8005d44:	3304      	adds	r3, #4
 8005d46:	f104 0015 	add.w	r0, r4, #21
 8005d4a:	4584      	cmp	ip, r0
 8005d4c:	bf38      	it	cc
 8005d4e:	2304      	movcc	r3, #4
 8005d50:	50ca      	str	r2, [r1, r3]
 8005d52:	b10a      	cbz	r2, 8005d58 <__lshift+0xa4>
 8005d54:	f108 0602 	add.w	r6, r8, #2
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	612e      	str	r6, [r5, #16]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	f7ff fdd8 	bl	8005914 <_Bfree>
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d6e:	3301      	adds	r3, #1
 8005d70:	e7c5      	b.n	8005cfe <__lshift+0x4a>
 8005d72:	3904      	subs	r1, #4
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d7c:	459c      	cmp	ip, r3
 8005d7e:	d8f9      	bhi.n	8005d74 <__lshift+0xc0>
 8005d80:	e7ea      	b.n	8005d58 <__lshift+0xa4>
 8005d82:	bf00      	nop
 8005d84:	08006bd4 	.word	0x08006bd4
 8005d88:	08006be5 	.word	0x08006be5

08005d8c <__mcmp>:
 8005d8c:	b530      	push	{r4, r5, lr}
 8005d8e:	6902      	ldr	r2, [r0, #16]
 8005d90:	690c      	ldr	r4, [r1, #16]
 8005d92:	1b12      	subs	r2, r2, r4
 8005d94:	d10e      	bne.n	8005db4 <__mcmp+0x28>
 8005d96:	f100 0314 	add.w	r3, r0, #20
 8005d9a:	3114      	adds	r1, #20
 8005d9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005da0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005da4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005da8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d003      	beq.n	8005db8 <__mcmp+0x2c>
 8005db0:	d305      	bcc.n	8005dbe <__mcmp+0x32>
 8005db2:	2201      	movs	r2, #1
 8005db4:	4610      	mov	r0, r2
 8005db6:	bd30      	pop	{r4, r5, pc}
 8005db8:	4283      	cmp	r3, r0
 8005dba:	d3f3      	bcc.n	8005da4 <__mcmp+0x18>
 8005dbc:	e7fa      	b.n	8005db4 <__mcmp+0x28>
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc2:	e7f7      	b.n	8005db4 <__mcmp+0x28>

08005dc4 <__mdiff>:
 8005dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460c      	mov	r4, r1
 8005dca:	4606      	mov	r6, r0
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4690      	mov	r8, r2
 8005dd2:	f7ff ffdb 	bl	8005d8c <__mcmp>
 8005dd6:	1e05      	subs	r5, r0, #0
 8005dd8:	d110      	bne.n	8005dfc <__mdiff+0x38>
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f7ff fd59 	bl	8005894 <_Balloc>
 8005de2:	b930      	cbnz	r0, 8005df2 <__mdiff+0x2e>
 8005de4:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <__mdiff+0x10c>)
 8005de6:	4602      	mov	r2, r0
 8005de8:	f240 2137 	movw	r1, #567	; 0x237
 8005dec:	4839      	ldr	r0, [pc, #228]	; (8005ed4 <__mdiff+0x110>)
 8005dee:	f000 fb0b 	bl	8006408 <__assert_func>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	bfa4      	itt	ge
 8005dfe:	4643      	movge	r3, r8
 8005e00:	46a0      	movge	r8, r4
 8005e02:	4630      	mov	r0, r6
 8005e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e08:	bfa6      	itte	ge
 8005e0a:	461c      	movge	r4, r3
 8005e0c:	2500      	movge	r5, #0
 8005e0e:	2501      	movlt	r5, #1
 8005e10:	f7ff fd40 	bl	8005894 <_Balloc>
 8005e14:	b920      	cbnz	r0, 8005e20 <__mdiff+0x5c>
 8005e16:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <__mdiff+0x10c>)
 8005e18:	4602      	mov	r2, r0
 8005e1a:	f240 2145 	movw	r1, #581	; 0x245
 8005e1e:	e7e5      	b.n	8005dec <__mdiff+0x28>
 8005e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e24:	6926      	ldr	r6, [r4, #16]
 8005e26:	60c5      	str	r5, [r0, #12]
 8005e28:	f104 0914 	add.w	r9, r4, #20
 8005e2c:	f108 0514 	add.w	r5, r8, #20
 8005e30:	f100 0e14 	add.w	lr, r0, #20
 8005e34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e3c:	f108 0210 	add.w	r2, r8, #16
 8005e40:	46f2      	mov	sl, lr
 8005e42:	2100      	movs	r1, #0
 8005e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e4c:	fa11 f88b 	uxtah	r8, r1, fp
 8005e50:	b299      	uxth	r1, r3
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	eba8 0801 	sub.w	r8, r8, r1
 8005e58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e60:	fa1f f888 	uxth.w	r8, r8
 8005e64:	1419      	asrs	r1, r3, #16
 8005e66:	454e      	cmp	r6, r9
 8005e68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e6c:	f84a 3b04 	str.w	r3, [sl], #4
 8005e70:	d8e8      	bhi.n	8005e44 <__mdiff+0x80>
 8005e72:	1b33      	subs	r3, r6, r4
 8005e74:	3b15      	subs	r3, #21
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	3415      	adds	r4, #21
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	bf38      	it	cc
 8005e82:	2304      	movcc	r3, #4
 8005e84:	441d      	add	r5, r3
 8005e86:	4473      	add	r3, lr
 8005e88:	469e      	mov	lr, r3
 8005e8a:	462e      	mov	r6, r5
 8005e8c:	4566      	cmp	r6, ip
 8005e8e:	d30e      	bcc.n	8005eae <__mdiff+0xea>
 8005e90:	f10c 0203 	add.w	r2, ip, #3
 8005e94:	1b52      	subs	r2, r2, r5
 8005e96:	f022 0203 	bic.w	r2, r2, #3
 8005e9a:	3d03      	subs	r5, #3
 8005e9c:	45ac      	cmp	ip, r5
 8005e9e:	bf38      	it	cc
 8005ea0:	2200      	movcc	r2, #0
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ea8:	b17a      	cbz	r2, 8005eca <__mdiff+0x106>
 8005eaa:	6107      	str	r7, [r0, #16]
 8005eac:	e7a4      	b.n	8005df8 <__mdiff+0x34>
 8005eae:	f856 8b04 	ldr.w	r8, [r6], #4
 8005eb2:	fa11 f288 	uxtah	r2, r1, r8
 8005eb6:	1414      	asrs	r4, r2, #16
 8005eb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ec2:	f84e 2b04 	str.w	r2, [lr], #4
 8005ec6:	1421      	asrs	r1, r4, #16
 8005ec8:	e7e0      	b.n	8005e8c <__mdiff+0xc8>
 8005eca:	3f01      	subs	r7, #1
 8005ecc:	e7ea      	b.n	8005ea4 <__mdiff+0xe0>
 8005ece:	bf00      	nop
 8005ed0:	08006bd4 	.word	0x08006bd4
 8005ed4:	08006be5 	.word	0x08006be5

08005ed8 <__d2b>:
 8005ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005edc:	460f      	mov	r7, r1
 8005ede:	2101      	movs	r1, #1
 8005ee0:	ec59 8b10 	vmov	r8, r9, d0
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	f7ff fcd5 	bl	8005894 <_Balloc>
 8005eea:	4604      	mov	r4, r0
 8005eec:	b930      	cbnz	r0, 8005efc <__d2b+0x24>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <__d2b+0xac>)
 8005ef2:	4825      	ldr	r0, [pc, #148]	; (8005f88 <__d2b+0xb0>)
 8005ef4:	f240 310f 	movw	r1, #783	; 0x30f
 8005ef8:	f000 fa86 	bl	8006408 <__assert_func>
 8005efc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f04:	bb2d      	cbnz	r5, 8005f52 <__d2b+0x7a>
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	f1b8 0300 	subs.w	r3, r8, #0
 8005f0c:	d026      	beq.n	8005f5c <__d2b+0x84>
 8005f0e:	4668      	mov	r0, sp
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f7ff fd87 	bl	8005a24 <__lo0bits>
 8005f16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f1a:	b1e8      	cbz	r0, 8005f58 <__d2b+0x80>
 8005f1c:	f1c0 0320 	rsb	r3, r0, #32
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	430b      	orrs	r3, r1
 8005f26:	40c2      	lsrs	r2, r0
 8005f28:	6163      	str	r3, [r4, #20]
 8005f2a:	9201      	str	r2, [sp, #4]
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	61a3      	str	r3, [r4, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf14      	ite	ne
 8005f34:	2202      	movne	r2, #2
 8005f36:	2201      	moveq	r2, #1
 8005f38:	6122      	str	r2, [r4, #16]
 8005f3a:	b1bd      	cbz	r5, 8005f6c <__d2b+0x94>
 8005f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f40:	4405      	add	r5, r0
 8005f42:	603d      	str	r5, [r7, #0]
 8005f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f48:	6030      	str	r0, [r6, #0]
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	b003      	add	sp, #12
 8005f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f56:	e7d6      	b.n	8005f06 <__d2b+0x2e>
 8005f58:	6161      	str	r1, [r4, #20]
 8005f5a:	e7e7      	b.n	8005f2c <__d2b+0x54>
 8005f5c:	a801      	add	r0, sp, #4
 8005f5e:	f7ff fd61 	bl	8005a24 <__lo0bits>
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	3020      	adds	r0, #32
 8005f68:	2201      	movs	r2, #1
 8005f6a:	e7e5      	b.n	8005f38 <__d2b+0x60>
 8005f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f74:	6038      	str	r0, [r7, #0]
 8005f76:	6918      	ldr	r0, [r3, #16]
 8005f78:	f7ff fd34 	bl	80059e4 <__hi0bits>
 8005f7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f80:	e7e2      	b.n	8005f48 <__d2b+0x70>
 8005f82:	bf00      	nop
 8005f84:	08006bd4 	.word	0x08006bd4
 8005f88:	08006be5 	.word	0x08006be5

08005f8c <__ssputs_r>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	688e      	ldr	r6, [r1, #8]
 8005f92:	461f      	mov	r7, r3
 8005f94:	42be      	cmp	r6, r7
 8005f96:	680b      	ldr	r3, [r1, #0]
 8005f98:	4682      	mov	sl, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4690      	mov	r8, r2
 8005f9e:	d82c      	bhi.n	8005ffa <__ssputs_r+0x6e>
 8005fa0:	898a      	ldrh	r2, [r1, #12]
 8005fa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fa6:	d026      	beq.n	8005ff6 <__ssputs_r+0x6a>
 8005fa8:	6965      	ldr	r5, [r4, #20]
 8005faa:	6909      	ldr	r1, [r1, #16]
 8005fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb0:	eba3 0901 	sub.w	r9, r3, r1
 8005fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fb8:	1c7b      	adds	r3, r7, #1
 8005fba:	444b      	add	r3, r9
 8005fbc:	106d      	asrs	r5, r5, #1
 8005fbe:	429d      	cmp	r5, r3
 8005fc0:	bf38      	it	cc
 8005fc2:	461d      	movcc	r5, r3
 8005fc4:	0553      	lsls	r3, r2, #21
 8005fc6:	d527      	bpl.n	8006018 <__ssputs_r+0x8c>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7ff fbd7 	bl	800577c <_malloc_r>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	b360      	cbz	r0, 800602c <__ssputs_r+0xa0>
 8005fd2:	6921      	ldr	r1, [r4, #16]
 8005fd4:	464a      	mov	r2, r9
 8005fd6:	f000 fa09 	bl	80063ec <memcpy>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	6126      	str	r6, [r4, #16]
 8005fe8:	6165      	str	r5, [r4, #20]
 8005fea:	444e      	add	r6, r9
 8005fec:	eba5 0509 	sub.w	r5, r5, r9
 8005ff0:	6026      	str	r6, [r4, #0]
 8005ff2:	60a5      	str	r5, [r4, #8]
 8005ff4:	463e      	mov	r6, r7
 8005ff6:	42be      	cmp	r6, r7
 8005ff8:	d900      	bls.n	8005ffc <__ssputs_r+0x70>
 8005ffa:	463e      	mov	r6, r7
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	4632      	mov	r2, r6
 8006000:	4641      	mov	r1, r8
 8006002:	f000 f9c9 	bl	8006398 <memmove>
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	1b9b      	subs	r3, r3, r6
 800600a:	60a3      	str	r3, [r4, #8]
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	4433      	add	r3, r6
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	2000      	movs	r0, #0
 8006014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006018:	462a      	mov	r2, r5
 800601a:	f000 fa3b 	bl	8006494 <_realloc_r>
 800601e:	4606      	mov	r6, r0
 8006020:	2800      	cmp	r0, #0
 8006022:	d1e0      	bne.n	8005fe6 <__ssputs_r+0x5a>
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	4650      	mov	r0, sl
 8006028:	f7ff fb34 	bl	8005694 <_free_r>
 800602c:	230c      	movs	r3, #12
 800602e:	f8ca 3000 	str.w	r3, [sl]
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	f04f 30ff 	mov.w	r0, #4294967295
 800603e:	e7e9      	b.n	8006014 <__ssputs_r+0x88>

08006040 <_svfiprintf_r>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	4698      	mov	r8, r3
 8006046:	898b      	ldrh	r3, [r1, #12]
 8006048:	061b      	lsls	r3, r3, #24
 800604a:	b09d      	sub	sp, #116	; 0x74
 800604c:	4607      	mov	r7, r0
 800604e:	460d      	mov	r5, r1
 8006050:	4614      	mov	r4, r2
 8006052:	d50e      	bpl.n	8006072 <_svfiprintf_r+0x32>
 8006054:	690b      	ldr	r3, [r1, #16]
 8006056:	b963      	cbnz	r3, 8006072 <_svfiprintf_r+0x32>
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	f7ff fb8f 	bl	800577c <_malloc_r>
 800605e:	6028      	str	r0, [r5, #0]
 8006060:	6128      	str	r0, [r5, #16]
 8006062:	b920      	cbnz	r0, 800606e <_svfiprintf_r+0x2e>
 8006064:	230c      	movs	r3, #12
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e0d0      	b.n	8006210 <_svfiprintf_r+0x1d0>
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	616b      	str	r3, [r5, #20]
 8006072:	2300      	movs	r3, #0
 8006074:	9309      	str	r3, [sp, #36]	; 0x24
 8006076:	2320      	movs	r3, #32
 8006078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800607c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006080:	2330      	movs	r3, #48	; 0x30
 8006082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006228 <_svfiprintf_r+0x1e8>
 8006086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800608a:	f04f 0901 	mov.w	r9, #1
 800608e:	4623      	mov	r3, r4
 8006090:	469a      	mov	sl, r3
 8006092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006096:	b10a      	cbz	r2, 800609c <_svfiprintf_r+0x5c>
 8006098:	2a25      	cmp	r2, #37	; 0x25
 800609a:	d1f9      	bne.n	8006090 <_svfiprintf_r+0x50>
 800609c:	ebba 0b04 	subs.w	fp, sl, r4
 80060a0:	d00b      	beq.n	80060ba <_svfiprintf_r+0x7a>
 80060a2:	465b      	mov	r3, fp
 80060a4:	4622      	mov	r2, r4
 80060a6:	4629      	mov	r1, r5
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7ff ff6f 	bl	8005f8c <__ssputs_r>
 80060ae:	3001      	adds	r0, #1
 80060b0:	f000 80a9 	beq.w	8006206 <_svfiprintf_r+0x1c6>
 80060b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b6:	445a      	add	r2, fp
 80060b8:	9209      	str	r2, [sp, #36]	; 0x24
 80060ba:	f89a 3000 	ldrb.w	r3, [sl]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80a1 	beq.w	8006206 <_svfiprintf_r+0x1c6>
 80060c4:	2300      	movs	r3, #0
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ce:	f10a 0a01 	add.w	sl, sl, #1
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	9307      	str	r3, [sp, #28]
 80060d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060da:	931a      	str	r3, [sp, #104]	; 0x68
 80060dc:	4654      	mov	r4, sl
 80060de:	2205      	movs	r2, #5
 80060e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e4:	4850      	ldr	r0, [pc, #320]	; (8006228 <_svfiprintf_r+0x1e8>)
 80060e6:	f7fa f873 	bl	80001d0 <memchr>
 80060ea:	9a04      	ldr	r2, [sp, #16]
 80060ec:	b9d8      	cbnz	r0, 8006126 <_svfiprintf_r+0xe6>
 80060ee:	06d0      	lsls	r0, r2, #27
 80060f0:	bf44      	itt	mi
 80060f2:	2320      	movmi	r3, #32
 80060f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f8:	0711      	lsls	r1, r2, #28
 80060fa:	bf44      	itt	mi
 80060fc:	232b      	movmi	r3, #43	; 0x2b
 80060fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006102:	f89a 3000 	ldrb.w	r3, [sl]
 8006106:	2b2a      	cmp	r3, #42	; 0x2a
 8006108:	d015      	beq.n	8006136 <_svfiprintf_r+0xf6>
 800610a:	9a07      	ldr	r2, [sp, #28]
 800610c:	4654      	mov	r4, sl
 800610e:	2000      	movs	r0, #0
 8006110:	f04f 0c0a 	mov.w	ip, #10
 8006114:	4621      	mov	r1, r4
 8006116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800611a:	3b30      	subs	r3, #48	; 0x30
 800611c:	2b09      	cmp	r3, #9
 800611e:	d94d      	bls.n	80061bc <_svfiprintf_r+0x17c>
 8006120:	b1b0      	cbz	r0, 8006150 <_svfiprintf_r+0x110>
 8006122:	9207      	str	r2, [sp, #28]
 8006124:	e014      	b.n	8006150 <_svfiprintf_r+0x110>
 8006126:	eba0 0308 	sub.w	r3, r0, r8
 800612a:	fa09 f303 	lsl.w	r3, r9, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	46a2      	mov	sl, r4
 8006134:	e7d2      	b.n	80060dc <_svfiprintf_r+0x9c>
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	9103      	str	r1, [sp, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfbb      	ittet	lt
 8006142:	425b      	neglt	r3, r3
 8006144:	f042 0202 	orrlt.w	r2, r2, #2
 8006148:	9307      	strge	r3, [sp, #28]
 800614a:	9307      	strlt	r3, [sp, #28]
 800614c:	bfb8      	it	lt
 800614e:	9204      	strlt	r2, [sp, #16]
 8006150:	7823      	ldrb	r3, [r4, #0]
 8006152:	2b2e      	cmp	r3, #46	; 0x2e
 8006154:	d10c      	bne.n	8006170 <_svfiprintf_r+0x130>
 8006156:	7863      	ldrb	r3, [r4, #1]
 8006158:	2b2a      	cmp	r3, #42	; 0x2a
 800615a:	d134      	bne.n	80061c6 <_svfiprintf_r+0x186>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	9203      	str	r2, [sp, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	bfb8      	it	lt
 8006168:	f04f 33ff 	movlt.w	r3, #4294967295
 800616c:	3402      	adds	r4, #2
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006238 <_svfiprintf_r+0x1f8>
 8006174:	7821      	ldrb	r1, [r4, #0]
 8006176:	2203      	movs	r2, #3
 8006178:	4650      	mov	r0, sl
 800617a:	f7fa f829 	bl	80001d0 <memchr>
 800617e:	b138      	cbz	r0, 8006190 <_svfiprintf_r+0x150>
 8006180:	9b04      	ldr	r3, [sp, #16]
 8006182:	eba0 000a 	sub.w	r0, r0, sl
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	4082      	lsls	r2, r0
 800618a:	4313      	orrs	r3, r2
 800618c:	3401      	adds	r4, #1
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006194:	4825      	ldr	r0, [pc, #148]	; (800622c <_svfiprintf_r+0x1ec>)
 8006196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800619a:	2206      	movs	r2, #6
 800619c:	f7fa f818 	bl	80001d0 <memchr>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d038      	beq.n	8006216 <_svfiprintf_r+0x1d6>
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <_svfiprintf_r+0x1f0>)
 80061a6:	bb1b      	cbnz	r3, 80061f0 <_svfiprintf_r+0x1b0>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	3307      	adds	r3, #7
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b6:	4433      	add	r3, r6
 80061b8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ba:	e768      	b.n	800608e <_svfiprintf_r+0x4e>
 80061bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c0:	460c      	mov	r4, r1
 80061c2:	2001      	movs	r0, #1
 80061c4:	e7a6      	b.n	8006114 <_svfiprintf_r+0xd4>
 80061c6:	2300      	movs	r3, #0
 80061c8:	3401      	adds	r4, #1
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f04f 0c0a 	mov.w	ip, #10
 80061d2:	4620      	mov	r0, r4
 80061d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d8:	3a30      	subs	r2, #48	; 0x30
 80061da:	2a09      	cmp	r2, #9
 80061dc:	d903      	bls.n	80061e6 <_svfiprintf_r+0x1a6>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c6      	beq.n	8006170 <_svfiprintf_r+0x130>
 80061e2:	9105      	str	r1, [sp, #20]
 80061e4:	e7c4      	b.n	8006170 <_svfiprintf_r+0x130>
 80061e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ea:	4604      	mov	r4, r0
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7f0      	b.n	80061d2 <_svfiprintf_r+0x192>
 80061f0:	ab03      	add	r3, sp, #12
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	462a      	mov	r2, r5
 80061f6:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <_svfiprintf_r+0x1f4>)
 80061f8:	a904      	add	r1, sp, #16
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7fd fe64 	bl	8003ec8 <_printf_float>
 8006200:	1c42      	adds	r2, r0, #1
 8006202:	4606      	mov	r6, r0
 8006204:	d1d6      	bne.n	80061b4 <_svfiprintf_r+0x174>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af2d 	bmi.w	8006068 <_svfiprintf_r+0x28>
 800620e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006210:	b01d      	add	sp, #116	; 0x74
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	ab03      	add	r3, sp, #12
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	462a      	mov	r2, r5
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <_svfiprintf_r+0x1f4>)
 800621e:	a904      	add	r1, sp, #16
 8006220:	4638      	mov	r0, r7
 8006222:	f7fe f8f5 	bl	8004410 <_printf_i>
 8006226:	e7eb      	b.n	8006200 <_svfiprintf_r+0x1c0>
 8006228:	08006d3c 	.word	0x08006d3c
 800622c:	08006d46 	.word	0x08006d46
 8006230:	08003ec9 	.word	0x08003ec9
 8006234:	08005f8d 	.word	0x08005f8d
 8006238:	08006d42 	.word	0x08006d42

0800623c <__sflush_r>:
 800623c:	898a      	ldrh	r2, [r1, #12]
 800623e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006242:	4605      	mov	r5, r0
 8006244:	0710      	lsls	r0, r2, #28
 8006246:	460c      	mov	r4, r1
 8006248:	d458      	bmi.n	80062fc <__sflush_r+0xc0>
 800624a:	684b      	ldr	r3, [r1, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dc05      	bgt.n	800625c <__sflush_r+0x20>
 8006250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	dc02      	bgt.n	800625c <__sflush_r+0x20>
 8006256:	2000      	movs	r0, #0
 8006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800625e:	2e00      	cmp	r6, #0
 8006260:	d0f9      	beq.n	8006256 <__sflush_r+0x1a>
 8006262:	2300      	movs	r3, #0
 8006264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006268:	682f      	ldr	r7, [r5, #0]
 800626a:	6a21      	ldr	r1, [r4, #32]
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	d032      	beq.n	80062d6 <__sflush_r+0x9a>
 8006270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	075a      	lsls	r2, r3, #29
 8006276:	d505      	bpl.n	8006284 <__sflush_r+0x48>
 8006278:	6863      	ldr	r3, [r4, #4]
 800627a:	1ac0      	subs	r0, r0, r3
 800627c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800627e:	b10b      	cbz	r3, 8006284 <__sflush_r+0x48>
 8006280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006282:	1ac0      	subs	r0, r0, r3
 8006284:	2300      	movs	r3, #0
 8006286:	4602      	mov	r2, r0
 8006288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800628a:	6a21      	ldr	r1, [r4, #32]
 800628c:	4628      	mov	r0, r5
 800628e:	47b0      	blx	r6
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	d106      	bne.n	80062a4 <__sflush_r+0x68>
 8006296:	6829      	ldr	r1, [r5, #0]
 8006298:	291d      	cmp	r1, #29
 800629a:	d82b      	bhi.n	80062f4 <__sflush_r+0xb8>
 800629c:	4a29      	ldr	r2, [pc, #164]	; (8006344 <__sflush_r+0x108>)
 800629e:	410a      	asrs	r2, r1
 80062a0:	07d6      	lsls	r6, r2, #31
 80062a2:	d427      	bmi.n	80062f4 <__sflush_r+0xb8>
 80062a4:	2200      	movs	r2, #0
 80062a6:	6062      	str	r2, [r4, #4]
 80062a8:	04d9      	lsls	r1, r3, #19
 80062aa:	6922      	ldr	r2, [r4, #16]
 80062ac:	6022      	str	r2, [r4, #0]
 80062ae:	d504      	bpl.n	80062ba <__sflush_r+0x7e>
 80062b0:	1c42      	adds	r2, r0, #1
 80062b2:	d101      	bne.n	80062b8 <__sflush_r+0x7c>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b903      	cbnz	r3, 80062ba <__sflush_r+0x7e>
 80062b8:	6560      	str	r0, [r4, #84]	; 0x54
 80062ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062bc:	602f      	str	r7, [r5, #0]
 80062be:	2900      	cmp	r1, #0
 80062c0:	d0c9      	beq.n	8006256 <__sflush_r+0x1a>
 80062c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d002      	beq.n	80062d0 <__sflush_r+0x94>
 80062ca:	4628      	mov	r0, r5
 80062cc:	f7ff f9e2 	bl	8005694 <_free_r>
 80062d0:	2000      	movs	r0, #0
 80062d2:	6360      	str	r0, [r4, #52]	; 0x34
 80062d4:	e7c0      	b.n	8006258 <__sflush_r+0x1c>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4628      	mov	r0, r5
 80062da:	47b0      	blx	r6
 80062dc:	1c41      	adds	r1, r0, #1
 80062de:	d1c8      	bne.n	8006272 <__sflush_r+0x36>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0c5      	beq.n	8006272 <__sflush_r+0x36>
 80062e6:	2b1d      	cmp	r3, #29
 80062e8:	d001      	beq.n	80062ee <__sflush_r+0xb2>
 80062ea:	2b16      	cmp	r3, #22
 80062ec:	d101      	bne.n	80062f2 <__sflush_r+0xb6>
 80062ee:	602f      	str	r7, [r5, #0]
 80062f0:	e7b1      	b.n	8006256 <__sflush_r+0x1a>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	e7ad      	b.n	8006258 <__sflush_r+0x1c>
 80062fc:	690f      	ldr	r7, [r1, #16]
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d0a9      	beq.n	8006256 <__sflush_r+0x1a>
 8006302:	0793      	lsls	r3, r2, #30
 8006304:	680e      	ldr	r6, [r1, #0]
 8006306:	bf08      	it	eq
 8006308:	694b      	ldreq	r3, [r1, #20]
 800630a:	600f      	str	r7, [r1, #0]
 800630c:	bf18      	it	ne
 800630e:	2300      	movne	r3, #0
 8006310:	eba6 0807 	sub.w	r8, r6, r7
 8006314:	608b      	str	r3, [r1, #8]
 8006316:	f1b8 0f00 	cmp.w	r8, #0
 800631a:	dd9c      	ble.n	8006256 <__sflush_r+0x1a>
 800631c:	6a21      	ldr	r1, [r4, #32]
 800631e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006320:	4643      	mov	r3, r8
 8006322:	463a      	mov	r2, r7
 8006324:	4628      	mov	r0, r5
 8006326:	47b0      	blx	r6
 8006328:	2800      	cmp	r0, #0
 800632a:	dc06      	bgt.n	800633a <__sflush_r+0xfe>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006332:	81a3      	strh	r3, [r4, #12]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	e78e      	b.n	8006258 <__sflush_r+0x1c>
 800633a:	4407      	add	r7, r0
 800633c:	eba8 0800 	sub.w	r8, r8, r0
 8006340:	e7e9      	b.n	8006316 <__sflush_r+0xda>
 8006342:	bf00      	nop
 8006344:	dfbffffe 	.word	0xdfbffffe

08006348 <_fflush_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	4605      	mov	r5, r0
 800634e:	460c      	mov	r4, r1
 8006350:	b913      	cbnz	r3, 8006358 <_fflush_r+0x10>
 8006352:	2500      	movs	r5, #0
 8006354:	4628      	mov	r0, r5
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	b118      	cbz	r0, 8006362 <_fflush_r+0x1a>
 800635a:	6a03      	ldr	r3, [r0, #32]
 800635c:	b90b      	cbnz	r3, 8006362 <_fflush_r+0x1a>
 800635e:	f7fe fa05 	bl	800476c <__sinit>
 8006362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f3      	beq.n	8006352 <_fflush_r+0xa>
 800636a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d404      	bmi.n	800637a <_fflush_r+0x32>
 8006370:	0599      	lsls	r1, r3, #22
 8006372:	d402      	bmi.n	800637a <_fflush_r+0x32>
 8006374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006376:	f7fe fb10 	bl	800499a <__retarget_lock_acquire_recursive>
 800637a:	4628      	mov	r0, r5
 800637c:	4621      	mov	r1, r4
 800637e:	f7ff ff5d 	bl	800623c <__sflush_r>
 8006382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006384:	07da      	lsls	r2, r3, #31
 8006386:	4605      	mov	r5, r0
 8006388:	d4e4      	bmi.n	8006354 <_fflush_r+0xc>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	059b      	lsls	r3, r3, #22
 800638e:	d4e1      	bmi.n	8006354 <_fflush_r+0xc>
 8006390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006392:	f7fe fb03 	bl	800499c <__retarget_lock_release_recursive>
 8006396:	e7dd      	b.n	8006354 <_fflush_r+0xc>

08006398 <memmove>:
 8006398:	4288      	cmp	r0, r1
 800639a:	b510      	push	{r4, lr}
 800639c:	eb01 0402 	add.w	r4, r1, r2
 80063a0:	d902      	bls.n	80063a8 <memmove+0x10>
 80063a2:	4284      	cmp	r4, r0
 80063a4:	4623      	mov	r3, r4
 80063a6:	d807      	bhi.n	80063b8 <memmove+0x20>
 80063a8:	1e43      	subs	r3, r0, #1
 80063aa:	42a1      	cmp	r1, r4
 80063ac:	d008      	beq.n	80063c0 <memmove+0x28>
 80063ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063b6:	e7f8      	b.n	80063aa <memmove+0x12>
 80063b8:	4402      	add	r2, r0
 80063ba:	4601      	mov	r1, r0
 80063bc:	428a      	cmp	r2, r1
 80063be:	d100      	bne.n	80063c2 <memmove+0x2a>
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063ca:	e7f7      	b.n	80063bc <memmove+0x24>

080063cc <_sbrk_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_sbrk_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fa ff72 	bl	80012c0 <_sbrk>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_sbrk_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_sbrk_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	200004a4 	.word	0x200004a4

080063ec <memcpy>:
 80063ec:	440a      	add	r2, r1
 80063ee:	4291      	cmp	r1, r2
 80063f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f4:	d100      	bne.n	80063f8 <memcpy+0xc>
 80063f6:	4770      	bx	lr
 80063f8:	b510      	push	{r4, lr}
 80063fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006402:	4291      	cmp	r1, r2
 8006404:	d1f9      	bne.n	80063fa <memcpy+0xe>
 8006406:	bd10      	pop	{r4, pc}

08006408 <__assert_func>:
 8006408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800640a:	4614      	mov	r4, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <__assert_func+0x2c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4605      	mov	r5, r0
 8006414:	68d8      	ldr	r0, [r3, #12]
 8006416:	b14c      	cbz	r4, 800642c <__assert_func+0x24>
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <__assert_func+0x30>)
 800641a:	9100      	str	r1, [sp, #0]
 800641c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <__assert_func+0x34>)
 8006422:	462b      	mov	r3, r5
 8006424:	f000 f872 	bl	800650c <fiprintf>
 8006428:	f000 f882 	bl	8006530 <abort>
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <__assert_func+0x38>)
 800642e:	461c      	mov	r4, r3
 8006430:	e7f3      	b.n	800641a <__assert_func+0x12>
 8006432:	bf00      	nop
 8006434:	200000e4 	.word	0x200000e4
 8006438:	08006d57 	.word	0x08006d57
 800643c:	08006d64 	.word	0x08006d64
 8006440:	08006d92 	.word	0x08006d92

08006444 <_calloc_r>:
 8006444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006446:	fba1 2402 	umull	r2, r4, r1, r2
 800644a:	b94c      	cbnz	r4, 8006460 <_calloc_r+0x1c>
 800644c:	4611      	mov	r1, r2
 800644e:	9201      	str	r2, [sp, #4]
 8006450:	f7ff f994 	bl	800577c <_malloc_r>
 8006454:	9a01      	ldr	r2, [sp, #4]
 8006456:	4605      	mov	r5, r0
 8006458:	b930      	cbnz	r0, 8006468 <_calloc_r+0x24>
 800645a:	4628      	mov	r0, r5
 800645c:	b003      	add	sp, #12
 800645e:	bd30      	pop	{r4, r5, pc}
 8006460:	220c      	movs	r2, #12
 8006462:	6002      	str	r2, [r0, #0]
 8006464:	2500      	movs	r5, #0
 8006466:	e7f8      	b.n	800645a <_calloc_r+0x16>
 8006468:	4621      	mov	r1, r4
 800646a:	f7fe fa18 	bl	800489e <memset>
 800646e:	e7f4      	b.n	800645a <_calloc_r+0x16>

08006470 <__ascii_mbtowc>:
 8006470:	b082      	sub	sp, #8
 8006472:	b901      	cbnz	r1, 8006476 <__ascii_mbtowc+0x6>
 8006474:	a901      	add	r1, sp, #4
 8006476:	b142      	cbz	r2, 800648a <__ascii_mbtowc+0x1a>
 8006478:	b14b      	cbz	r3, 800648e <__ascii_mbtowc+0x1e>
 800647a:	7813      	ldrb	r3, [r2, #0]
 800647c:	600b      	str	r3, [r1, #0]
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	1e10      	subs	r0, r2, #0
 8006482:	bf18      	it	ne
 8006484:	2001      	movne	r0, #1
 8006486:	b002      	add	sp, #8
 8006488:	4770      	bx	lr
 800648a:	4610      	mov	r0, r2
 800648c:	e7fb      	b.n	8006486 <__ascii_mbtowc+0x16>
 800648e:	f06f 0001 	mvn.w	r0, #1
 8006492:	e7f8      	b.n	8006486 <__ascii_mbtowc+0x16>

08006494 <_realloc_r>:
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	4680      	mov	r8, r0
 800649a:	4614      	mov	r4, r2
 800649c:	460e      	mov	r6, r1
 800649e:	b921      	cbnz	r1, 80064aa <_realloc_r+0x16>
 80064a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a4:	4611      	mov	r1, r2
 80064a6:	f7ff b969 	b.w	800577c <_malloc_r>
 80064aa:	b92a      	cbnz	r2, 80064b8 <_realloc_r+0x24>
 80064ac:	f7ff f8f2 	bl	8005694 <_free_r>
 80064b0:	4625      	mov	r5, r4
 80064b2:	4628      	mov	r0, r5
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b8:	f000 f841 	bl	800653e <_malloc_usable_size_r>
 80064bc:	4284      	cmp	r4, r0
 80064be:	4607      	mov	r7, r0
 80064c0:	d802      	bhi.n	80064c8 <_realloc_r+0x34>
 80064c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064c6:	d812      	bhi.n	80064ee <_realloc_r+0x5a>
 80064c8:	4621      	mov	r1, r4
 80064ca:	4640      	mov	r0, r8
 80064cc:	f7ff f956 	bl	800577c <_malloc_r>
 80064d0:	4605      	mov	r5, r0
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d0ed      	beq.n	80064b2 <_realloc_r+0x1e>
 80064d6:	42bc      	cmp	r4, r7
 80064d8:	4622      	mov	r2, r4
 80064da:	4631      	mov	r1, r6
 80064dc:	bf28      	it	cs
 80064de:	463a      	movcs	r2, r7
 80064e0:	f7ff ff84 	bl	80063ec <memcpy>
 80064e4:	4631      	mov	r1, r6
 80064e6:	4640      	mov	r0, r8
 80064e8:	f7ff f8d4 	bl	8005694 <_free_r>
 80064ec:	e7e1      	b.n	80064b2 <_realloc_r+0x1e>
 80064ee:	4635      	mov	r5, r6
 80064f0:	e7df      	b.n	80064b2 <_realloc_r+0x1e>

080064f2 <__ascii_wctomb>:
 80064f2:	b149      	cbz	r1, 8006508 <__ascii_wctomb+0x16>
 80064f4:	2aff      	cmp	r2, #255	; 0xff
 80064f6:	bf85      	ittet	hi
 80064f8:	238a      	movhi	r3, #138	; 0x8a
 80064fa:	6003      	strhi	r3, [r0, #0]
 80064fc:	700a      	strbls	r2, [r1, #0]
 80064fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8006502:	bf98      	it	ls
 8006504:	2001      	movls	r0, #1
 8006506:	4770      	bx	lr
 8006508:	4608      	mov	r0, r1
 800650a:	4770      	bx	lr

0800650c <fiprintf>:
 800650c:	b40e      	push	{r1, r2, r3}
 800650e:	b503      	push	{r0, r1, lr}
 8006510:	4601      	mov	r1, r0
 8006512:	ab03      	add	r3, sp, #12
 8006514:	4805      	ldr	r0, [pc, #20]	; (800652c <fiprintf+0x20>)
 8006516:	f853 2b04 	ldr.w	r2, [r3], #4
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	f000 f83f 	bl	80065a0 <_vfiprintf_r>
 8006522:	b002      	add	sp, #8
 8006524:	f85d eb04 	ldr.w	lr, [sp], #4
 8006528:	b003      	add	sp, #12
 800652a:	4770      	bx	lr
 800652c:	200000e4 	.word	0x200000e4

08006530 <abort>:
 8006530:	b508      	push	{r3, lr}
 8006532:	2006      	movs	r0, #6
 8006534:	f000 fa0c 	bl	8006950 <raise>
 8006538:	2001      	movs	r0, #1
 800653a:	f7fa fe49 	bl	80011d0 <_exit>

0800653e <_malloc_usable_size_r>:
 800653e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006542:	1f18      	subs	r0, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfbc      	itt	lt
 8006548:	580b      	ldrlt	r3, [r1, r0]
 800654a:	18c0      	addlt	r0, r0, r3
 800654c:	4770      	bx	lr

0800654e <__sfputc_r>:
 800654e:	6893      	ldr	r3, [r2, #8]
 8006550:	3b01      	subs	r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	b410      	push	{r4}
 8006556:	6093      	str	r3, [r2, #8]
 8006558:	da08      	bge.n	800656c <__sfputc_r+0x1e>
 800655a:	6994      	ldr	r4, [r2, #24]
 800655c:	42a3      	cmp	r3, r4
 800655e:	db01      	blt.n	8006564 <__sfputc_r+0x16>
 8006560:	290a      	cmp	r1, #10
 8006562:	d103      	bne.n	800656c <__sfputc_r+0x1e>
 8006564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006568:	f000 b934 	b.w	80067d4 <__swbuf_r>
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	1c58      	adds	r0, r3, #1
 8006570:	6010      	str	r0, [r2, #0]
 8006572:	7019      	strb	r1, [r3, #0]
 8006574:	4608      	mov	r0, r1
 8006576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800657a:	4770      	bx	lr

0800657c <__sfputs_r>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	4614      	mov	r4, r2
 8006584:	18d5      	adds	r5, r2, r3
 8006586:	42ac      	cmp	r4, r5
 8006588:	d101      	bne.n	800658e <__sfputs_r+0x12>
 800658a:	2000      	movs	r0, #0
 800658c:	e007      	b.n	800659e <__sfputs_r+0x22>
 800658e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006592:	463a      	mov	r2, r7
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff ffda 	bl	800654e <__sfputc_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d1f3      	bne.n	8006586 <__sfputs_r+0xa>
 800659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065a0 <_vfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460d      	mov	r5, r1
 80065a6:	b09d      	sub	sp, #116	; 0x74
 80065a8:	4614      	mov	r4, r2
 80065aa:	4698      	mov	r8, r3
 80065ac:	4606      	mov	r6, r0
 80065ae:	b118      	cbz	r0, 80065b8 <_vfiprintf_r+0x18>
 80065b0:	6a03      	ldr	r3, [r0, #32]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_vfiprintf_r+0x18>
 80065b4:	f7fe f8da 	bl	800476c <__sinit>
 80065b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ba:	07d9      	lsls	r1, r3, #31
 80065bc:	d405      	bmi.n	80065ca <_vfiprintf_r+0x2a>
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	059a      	lsls	r2, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_vfiprintf_r+0x2a>
 80065c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c6:	f7fe f9e8 	bl	800499a <__retarget_lock_acquire_recursive>
 80065ca:	89ab      	ldrh	r3, [r5, #12]
 80065cc:	071b      	lsls	r3, r3, #28
 80065ce:	d501      	bpl.n	80065d4 <_vfiprintf_r+0x34>
 80065d0:	692b      	ldr	r3, [r5, #16]
 80065d2:	b99b      	cbnz	r3, 80065fc <_vfiprintf_r+0x5c>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f93a 	bl	8006850 <__swsetup_r>
 80065dc:	b170      	cbz	r0, 80065fc <_vfiprintf_r+0x5c>
 80065de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e0:	07dc      	lsls	r4, r3, #31
 80065e2:	d504      	bpl.n	80065ee <_vfiprintf_r+0x4e>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b01d      	add	sp, #116	; 0x74
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d4f7      	bmi.n	80065e4 <_vfiprintf_r+0x44>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f7fe f9d1 	bl	800499c <__retarget_lock_release_recursive>
 80065fa:	e7f3      	b.n	80065e4 <_vfiprintf_r+0x44>
 80065fc:	2300      	movs	r3, #0
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	2320      	movs	r3, #32
 8006602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006606:	f8cd 800c 	str.w	r8, [sp, #12]
 800660a:	2330      	movs	r3, #48	; 0x30
 800660c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80067c0 <_vfiprintf_r+0x220>
 8006610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006614:	f04f 0901 	mov.w	r9, #1
 8006618:	4623      	mov	r3, r4
 800661a:	469a      	mov	sl, r3
 800661c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006620:	b10a      	cbz	r2, 8006626 <_vfiprintf_r+0x86>
 8006622:	2a25      	cmp	r2, #37	; 0x25
 8006624:	d1f9      	bne.n	800661a <_vfiprintf_r+0x7a>
 8006626:	ebba 0b04 	subs.w	fp, sl, r4
 800662a:	d00b      	beq.n	8006644 <_vfiprintf_r+0xa4>
 800662c:	465b      	mov	r3, fp
 800662e:	4622      	mov	r2, r4
 8006630:	4629      	mov	r1, r5
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ffa2 	bl	800657c <__sfputs_r>
 8006638:	3001      	adds	r0, #1
 800663a:	f000 80a9 	beq.w	8006790 <_vfiprintf_r+0x1f0>
 800663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006640:	445a      	add	r2, fp
 8006642:	9209      	str	r2, [sp, #36]	; 0x24
 8006644:	f89a 3000 	ldrb.w	r3, [sl]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a1 	beq.w	8006790 <_vfiprintf_r+0x1f0>
 800664e:	2300      	movs	r3, #0
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006658:	f10a 0a01 	add.w	sl, sl, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006664:	931a      	str	r3, [sp, #104]	; 0x68
 8006666:	4654      	mov	r4, sl
 8006668:	2205      	movs	r2, #5
 800666a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666e:	4854      	ldr	r0, [pc, #336]	; (80067c0 <_vfiprintf_r+0x220>)
 8006670:	f7f9 fdae 	bl	80001d0 <memchr>
 8006674:	9a04      	ldr	r2, [sp, #16]
 8006676:	b9d8      	cbnz	r0, 80066b0 <_vfiprintf_r+0x110>
 8006678:	06d1      	lsls	r1, r2, #27
 800667a:	bf44      	itt	mi
 800667c:	2320      	movmi	r3, #32
 800667e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006682:	0713      	lsls	r3, r2, #28
 8006684:	bf44      	itt	mi
 8006686:	232b      	movmi	r3, #43	; 0x2b
 8006688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668c:	f89a 3000 	ldrb.w	r3, [sl]
 8006690:	2b2a      	cmp	r3, #42	; 0x2a
 8006692:	d015      	beq.n	80066c0 <_vfiprintf_r+0x120>
 8006694:	9a07      	ldr	r2, [sp, #28]
 8006696:	4654      	mov	r4, sl
 8006698:	2000      	movs	r0, #0
 800669a:	f04f 0c0a 	mov.w	ip, #10
 800669e:	4621      	mov	r1, r4
 80066a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a4:	3b30      	subs	r3, #48	; 0x30
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d94d      	bls.n	8006746 <_vfiprintf_r+0x1a6>
 80066aa:	b1b0      	cbz	r0, 80066da <_vfiprintf_r+0x13a>
 80066ac:	9207      	str	r2, [sp, #28]
 80066ae:	e014      	b.n	80066da <_vfiprintf_r+0x13a>
 80066b0:	eba0 0308 	sub.w	r3, r0, r8
 80066b4:	fa09 f303 	lsl.w	r3, r9, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	46a2      	mov	sl, r4
 80066be:	e7d2      	b.n	8006666 <_vfiprintf_r+0xc6>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	1d19      	adds	r1, r3, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	9103      	str	r1, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfbb      	ittet	lt
 80066cc:	425b      	neglt	r3, r3
 80066ce:	f042 0202 	orrlt.w	r2, r2, #2
 80066d2:	9307      	strge	r3, [sp, #28]
 80066d4:	9307      	strlt	r3, [sp, #28]
 80066d6:	bfb8      	it	lt
 80066d8:	9204      	strlt	r2, [sp, #16]
 80066da:	7823      	ldrb	r3, [r4, #0]
 80066dc:	2b2e      	cmp	r3, #46	; 0x2e
 80066de:	d10c      	bne.n	80066fa <_vfiprintf_r+0x15a>
 80066e0:	7863      	ldrb	r3, [r4, #1]
 80066e2:	2b2a      	cmp	r3, #42	; 0x2a
 80066e4:	d134      	bne.n	8006750 <_vfiprintf_r+0x1b0>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	9203      	str	r2, [sp, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bfb8      	it	lt
 80066f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f6:	3402      	adds	r4, #2
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80067d0 <_vfiprintf_r+0x230>
 80066fe:	7821      	ldrb	r1, [r4, #0]
 8006700:	2203      	movs	r2, #3
 8006702:	4650      	mov	r0, sl
 8006704:	f7f9 fd64 	bl	80001d0 <memchr>
 8006708:	b138      	cbz	r0, 800671a <_vfiprintf_r+0x17a>
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	eba0 000a 	sub.w	r0, r0, sl
 8006710:	2240      	movs	r2, #64	; 0x40
 8006712:	4082      	lsls	r2, r0
 8006714:	4313      	orrs	r3, r2
 8006716:	3401      	adds	r4, #1
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671e:	4829      	ldr	r0, [pc, #164]	; (80067c4 <_vfiprintf_r+0x224>)
 8006720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006724:	2206      	movs	r2, #6
 8006726:	f7f9 fd53 	bl	80001d0 <memchr>
 800672a:	2800      	cmp	r0, #0
 800672c:	d03f      	beq.n	80067ae <_vfiprintf_r+0x20e>
 800672e:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <_vfiprintf_r+0x228>)
 8006730:	bb1b      	cbnz	r3, 800677a <_vfiprintf_r+0x1da>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	3307      	adds	r3, #7
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	3308      	adds	r3, #8
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006740:	443b      	add	r3, r7
 8006742:	9309      	str	r3, [sp, #36]	; 0x24
 8006744:	e768      	b.n	8006618 <_vfiprintf_r+0x78>
 8006746:	fb0c 3202 	mla	r2, ip, r2, r3
 800674a:	460c      	mov	r4, r1
 800674c:	2001      	movs	r0, #1
 800674e:	e7a6      	b.n	800669e <_vfiprintf_r+0xfe>
 8006750:	2300      	movs	r3, #0
 8006752:	3401      	adds	r4, #1
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	4619      	mov	r1, r3
 8006758:	f04f 0c0a 	mov.w	ip, #10
 800675c:	4620      	mov	r0, r4
 800675e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006762:	3a30      	subs	r2, #48	; 0x30
 8006764:	2a09      	cmp	r2, #9
 8006766:	d903      	bls.n	8006770 <_vfiprintf_r+0x1d0>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0c6      	beq.n	80066fa <_vfiprintf_r+0x15a>
 800676c:	9105      	str	r1, [sp, #20]
 800676e:	e7c4      	b.n	80066fa <_vfiprintf_r+0x15a>
 8006770:	fb0c 2101 	mla	r1, ip, r1, r2
 8006774:	4604      	mov	r4, r0
 8006776:	2301      	movs	r3, #1
 8006778:	e7f0      	b.n	800675c <_vfiprintf_r+0x1bc>
 800677a:	ab03      	add	r3, sp, #12
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <_vfiprintf_r+0x22c>)
 8006782:	a904      	add	r1, sp, #16
 8006784:	4630      	mov	r0, r6
 8006786:	f7fd fb9f 	bl	8003ec8 <_printf_float>
 800678a:	4607      	mov	r7, r0
 800678c:	1c78      	adds	r0, r7, #1
 800678e:	d1d6      	bne.n	800673e <_vfiprintf_r+0x19e>
 8006790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d405      	bmi.n	80067a2 <_vfiprintf_r+0x202>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_vfiprintf_r+0x202>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f7fe f8fd 	bl	800499c <__retarget_lock_release_recursive>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af1d 	bmi.w	80065e4 <_vfiprintf_r+0x44>
 80067aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ac:	e71c      	b.n	80065e8 <_vfiprintf_r+0x48>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <_vfiprintf_r+0x22c>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7fd fe29 	bl	8004410 <_printf_i>
 80067be:	e7e4      	b.n	800678a <_vfiprintf_r+0x1ea>
 80067c0:	08006d3c 	.word	0x08006d3c
 80067c4:	08006d46 	.word	0x08006d46
 80067c8:	08003ec9 	.word	0x08003ec9
 80067cc:	0800657d 	.word	0x0800657d
 80067d0:	08006d42 	.word	0x08006d42

080067d4 <__swbuf_r>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	460e      	mov	r6, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	4605      	mov	r5, r0
 80067dc:	b118      	cbz	r0, 80067e6 <__swbuf_r+0x12>
 80067de:	6a03      	ldr	r3, [r0, #32]
 80067e0:	b90b      	cbnz	r3, 80067e6 <__swbuf_r+0x12>
 80067e2:	f7fd ffc3 	bl	800476c <__sinit>
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	60a3      	str	r3, [r4, #8]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	071a      	lsls	r2, r3, #28
 80067ee:	d525      	bpl.n	800683c <__swbuf_r+0x68>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	b31b      	cbz	r3, 800683c <__swbuf_r+0x68>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	6922      	ldr	r2, [r4, #16]
 80067f8:	1a98      	subs	r0, r3, r2
 80067fa:	6963      	ldr	r3, [r4, #20]
 80067fc:	b2f6      	uxtb	r6, r6
 80067fe:	4283      	cmp	r3, r0
 8006800:	4637      	mov	r7, r6
 8006802:	dc04      	bgt.n	800680e <__swbuf_r+0x3a>
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f7ff fd9e 	bl	8006348 <_fflush_r>
 800680c:	b9e0      	cbnz	r0, 8006848 <__swbuf_r+0x74>
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	3b01      	subs	r3, #1
 8006812:	60a3      	str	r3, [r4, #8]
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	701e      	strb	r6, [r3, #0]
 800681c:	6962      	ldr	r2, [r4, #20]
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	429a      	cmp	r2, r3
 8006822:	d004      	beq.n	800682e <__swbuf_r+0x5a>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d506      	bpl.n	8006838 <__swbuf_r+0x64>
 800682a:	2e0a      	cmp	r6, #10
 800682c:	d104      	bne.n	8006838 <__swbuf_r+0x64>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f7ff fd89 	bl	8006348 <_fflush_r>
 8006836:	b938      	cbnz	r0, 8006848 <__swbuf_r+0x74>
 8006838:	4638      	mov	r0, r7
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f000 f806 	bl	8006850 <__swsetup_r>
 8006844:	2800      	cmp	r0, #0
 8006846:	d0d5      	beq.n	80067f4 <__swbuf_r+0x20>
 8006848:	f04f 37ff 	mov.w	r7, #4294967295
 800684c:	e7f4      	b.n	8006838 <__swbuf_r+0x64>
	...

08006850 <__swsetup_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <__swsetup_r+0xac>)
 8006854:	4605      	mov	r5, r0
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	460c      	mov	r4, r1
 800685a:	b118      	cbz	r0, 8006864 <__swsetup_r+0x14>
 800685c:	6a03      	ldr	r3, [r0, #32]
 800685e:	b90b      	cbnz	r3, 8006864 <__swsetup_r+0x14>
 8006860:	f7fd ff84 	bl	800476c <__sinit>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800686a:	0718      	lsls	r0, r3, #28
 800686c:	d422      	bmi.n	80068b4 <__swsetup_r+0x64>
 800686e:	06d9      	lsls	r1, r3, #27
 8006870:	d407      	bmi.n	8006882 <__swsetup_r+0x32>
 8006872:	2309      	movs	r3, #9
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e034      	b.n	80068ec <__swsetup_r+0x9c>
 8006882:	0758      	lsls	r0, r3, #29
 8006884:	d512      	bpl.n	80068ac <__swsetup_r+0x5c>
 8006886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006888:	b141      	cbz	r1, 800689c <__swsetup_r+0x4c>
 800688a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800688e:	4299      	cmp	r1, r3
 8006890:	d002      	beq.n	8006898 <__swsetup_r+0x48>
 8006892:	4628      	mov	r0, r5
 8006894:	f7fe fefe 	bl	8005694 <_free_r>
 8006898:	2300      	movs	r3, #0
 800689a:	6363      	str	r3, [r4, #52]	; 0x34
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	2300      	movs	r3, #0
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	b94b      	cbnz	r3, 80068cc <__swsetup_r+0x7c>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d003      	beq.n	80068cc <__swsetup_r+0x7c>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f884 	bl	80069d4 <__smakebuf_r>
 80068cc:	89a0      	ldrh	r0, [r4, #12]
 80068ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d2:	f010 0301 	ands.w	r3, r0, #1
 80068d6:	d00a      	beq.n	80068ee <__swsetup_r+0x9e>
 80068d8:	2300      	movs	r3, #0
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	6963      	ldr	r3, [r4, #20]
 80068de:	425b      	negs	r3, r3
 80068e0:	61a3      	str	r3, [r4, #24]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	b943      	cbnz	r3, 80068f8 <__swsetup_r+0xa8>
 80068e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068ea:	d1c4      	bne.n	8006876 <__swsetup_r+0x26>
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	0781      	lsls	r1, r0, #30
 80068f0:	bf58      	it	pl
 80068f2:	6963      	ldrpl	r3, [r4, #20]
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	e7f4      	b.n	80068e2 <__swsetup_r+0x92>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e7f7      	b.n	80068ec <__swsetup_r+0x9c>
 80068fc:	200000e4 	.word	0x200000e4

08006900 <_raise_r>:
 8006900:	291f      	cmp	r1, #31
 8006902:	b538      	push	{r3, r4, r5, lr}
 8006904:	4604      	mov	r4, r0
 8006906:	460d      	mov	r5, r1
 8006908:	d904      	bls.n	8006914 <_raise_r+0x14>
 800690a:	2316      	movs	r3, #22
 800690c:	6003      	str	r3, [r0, #0]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006916:	b112      	cbz	r2, 800691e <_raise_r+0x1e>
 8006918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800691c:	b94b      	cbnz	r3, 8006932 <_raise_r+0x32>
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f830 	bl	8006984 <_getpid_r>
 8006924:	462a      	mov	r2, r5
 8006926:	4601      	mov	r1, r0
 8006928:	4620      	mov	r0, r4
 800692a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692e:	f000 b817 	b.w	8006960 <_kill_r>
 8006932:	2b01      	cmp	r3, #1
 8006934:	d00a      	beq.n	800694c <_raise_r+0x4c>
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	d103      	bne.n	8006942 <_raise_r+0x42>
 800693a:	2316      	movs	r3, #22
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	2001      	movs	r0, #1
 8006940:	e7e7      	b.n	8006912 <_raise_r+0x12>
 8006942:	2400      	movs	r4, #0
 8006944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006948:	4628      	mov	r0, r5
 800694a:	4798      	blx	r3
 800694c:	2000      	movs	r0, #0
 800694e:	e7e0      	b.n	8006912 <_raise_r+0x12>

08006950 <raise>:
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <raise+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f7ff bfd3 	b.w	8006900 <_raise_r>
 800695a:	bf00      	nop
 800695c:	200000e4 	.word	0x200000e4

08006960 <_kill_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_kill_r+0x20>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	4611      	mov	r1, r2
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	f7fa fc1f 	bl	80011b0 <_kill>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d102      	bne.n	800697c <_kill_r+0x1c>
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	b103      	cbz	r3, 800697c <_kill_r+0x1c>
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	200004a4 	.word	0x200004a4

08006984 <_getpid_r>:
 8006984:	f7fa bc0c 	b.w	80011a0 <_getpid>

08006988 <__swhatbuf_r>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006990:	2900      	cmp	r1, #0
 8006992:	b096      	sub	sp, #88	; 0x58
 8006994:	4615      	mov	r5, r2
 8006996:	461e      	mov	r6, r3
 8006998:	da0d      	bge.n	80069b6 <__swhatbuf_r+0x2e>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069a0:	f04f 0100 	mov.w	r1, #0
 80069a4:	bf0c      	ite	eq
 80069a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069aa:	2340      	movne	r3, #64	; 0x40
 80069ac:	2000      	movs	r0, #0
 80069ae:	6031      	str	r1, [r6, #0]
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	b016      	add	sp, #88	; 0x58
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	466a      	mov	r2, sp
 80069b8:	f000 f848 	bl	8006a4c <_fstat_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	dbec      	blt.n	800699a <__swhatbuf_r+0x12>
 80069c0:	9901      	ldr	r1, [sp, #4]
 80069c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069ca:	4259      	negs	r1, r3
 80069cc:	4159      	adcs	r1, r3
 80069ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d2:	e7eb      	b.n	80069ac <__swhatbuf_r+0x24>

080069d4 <__smakebuf_r>:
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d8:	079d      	lsls	r5, r3, #30
 80069da:	4606      	mov	r6, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	d507      	bpl.n	80069f0 <__smakebuf_r+0x1c>
 80069e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	2301      	movs	r3, #1
 80069ea:	6163      	str	r3, [r4, #20]
 80069ec:	b002      	add	sp, #8
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	ab01      	add	r3, sp, #4
 80069f2:	466a      	mov	r2, sp
 80069f4:	f7ff ffc8 	bl	8006988 <__swhatbuf_r>
 80069f8:	9900      	ldr	r1, [sp, #0]
 80069fa:	4605      	mov	r5, r0
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7fe febd 	bl	800577c <_malloc_r>
 8006a02:	b948      	cbnz	r0, 8006a18 <__smakebuf_r+0x44>
 8006a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a08:	059a      	lsls	r2, r3, #22
 8006a0a:	d4ef      	bmi.n	80069ec <__smakebuf_r+0x18>
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	e7e3      	b.n	80069e0 <__smakebuf_r+0xc>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	6020      	str	r0, [r4, #0]
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	6120      	str	r0, [r4, #16]
 8006a2a:	b15b      	cbz	r3, 8006a44 <__smakebuf_r+0x70>
 8006a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f81d 	bl	8006a70 <_isatty_r>
 8006a36:	b128      	cbz	r0, 8006a44 <__smakebuf_r+0x70>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	431d      	orrs	r5, r3
 8006a48:	81a5      	strh	r5, [r4, #12]
 8006a4a:	e7cf      	b.n	80069ec <__smakebuf_r+0x18>

08006a4c <_fstat_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	; (8006a6c <_fstat_r+0x20>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	f7fa fc08 	bl	800126e <_fstat>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d102      	bne.n	8006a68 <_fstat_r+0x1c>
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	b103      	cbz	r3, 8006a68 <_fstat_r+0x1c>
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200004a4 	.word	0x200004a4

08006a70 <_isatty_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d06      	ldr	r5, [pc, #24]	; (8006a8c <_isatty_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fa fc07 	bl	800128e <_isatty>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_isatty_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_isatty_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	200004a4 	.word	0x200004a4

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
