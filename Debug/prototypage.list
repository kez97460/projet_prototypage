
prototypage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006b48  08006b48  00016b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  00020254  2**0
                  CONTENTS
  4 .ARM          00000000  08006f34  08006f34  00020254  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f34  08006f34  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000258  08007190  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08007190  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db73  00000000  00000000  000202c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c73  00000000  00000000  0002de3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d0  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001670d  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f679  00000000  00000000  0004781d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089855  00000000  00000000  00056e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e0  00000000  00000000  000e06ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e4ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b30 	.word	0x08006b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08006b30 	.word	0x08006b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fc49 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f877 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f921 	bl	8000dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8ef 	bl	8000d9c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000bbe:	f000 f8b7 	bl	8000d30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000bc2:	482e      	ldr	r0, [pc, #184]	; (8000c7c <main+0xd4>)
 8000bc4:	f002 fa7e 	bl	80030c4 <HAL_TIM_Base_Start_IT>
  // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

  HAL_UART_Transmit(&huart2, (unsigned char*) "\r\nInitialised successfully \r\n--- \r\n", 64, 500);
 8000bc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	492c      	ldr	r1, [pc, #176]	; (8000c80 <main+0xd8>)
 8000bd0:	482c      	ldr	r0, [pc, #176]	; (8000c84 <main+0xdc>)
 8000bd2:	f002 fd53 	bl	800367c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f000 fc99 	bl	8001510 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  measure();
 8000bde:	f000 fa59 	bl	8001094 <measure>
	  if(sensor_capacity_pF > 20)
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <main+0xe0>)
 8000be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0xe4>)
 8000bee:	f7ff ff93 	bl	8000b18 <__aeabi_dcmpgt>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <main+0x58>
	  {
		  led_active_time = 10;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <main+0xe8>)
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e008      	b.n	8000c12 <main+0x6a>
	  }
	  else
	  {
		  if(led_active_time)
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <main+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d004      	beq.n	8000c12 <main+0x6a>
			  led_active_time--;
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <main+0xe8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <main+0xe8>)
 8000c10:	6013      	str	r3, [r2, #0]
	  }

	  if(led_active_time)
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <main+0xe8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <main+0x8a>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 ff1d 	bl	8001a60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	481a      	ldr	r0, [pc, #104]	; (8000c94 <main+0xec>)
 8000c2c:	f000 ff18 	bl	8001a60 <HAL_GPIO_WritePin>
 8000c30:	e00a      	b.n	8000c48 <main+0xa0>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 ff11 	bl	8001a60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4814      	ldr	r0, [pc, #80]	; (8000c94 <main+0xec>)
 8000c44:	f000 ff0c 	bl	8001a60 <HAL_GPIO_WritePin>
	  }

	  // UART : debug
	  HAL_Delay(1000);
 8000c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4c:	f000 fc60 	bl	8001510 <HAL_Delay>
	  sprintf(uart_message, "Freq : %f Hz  - C : %f pF \r\n", sensor_input_frequency_hz, sensor_capacity_pF);
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <main+0xf0>)
 8000c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <main+0xe0>)
 8000c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	490d      	ldr	r1, [pc, #52]	; (8000c9c <main+0xf4>)
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <main+0xf8>)
 8000c68:	f003 fe06 	bl	8004878 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*) uart_message, 64, 500);
 8000c6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	490b      	ldr	r1, [pc, #44]	; (8000ca0 <main+0xf8>)
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <main+0xdc>)
 8000c76:	f002 fd01 	bl	800367c <HAL_UART_Transmit>
	  measure();
 8000c7a:	e7b0      	b.n	8000bde <main+0x36>
 8000c7c:	20000274 	.word	0x20000274
 8000c80:	08006b48 	.word	0x08006b48
 8000c84:	200002c0 	.word	0x200002c0
 8000c88:	20000350 	.word	0x20000350
 8000c8c:	40340000 	.word	0x40340000
 8000c90:	20000360 	.word	0x20000360
 8000c94:	48000400 	.word	0x48000400
 8000c98:	20000348 	.word	0x20000348
 8000c9c:	08006b6c 	.word	0x08006b6c
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	2228      	movs	r2, #40	; 0x28
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fe43 	bl	800493e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 feeb 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cf0:	f000 f99c 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 ff15 	bl	8002b3c <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d18:	f000 f988 	bl	800102c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000d22:	2000      	movs	r0, #0
 8000d24:	f002 f886 	bl	8002e34 <HAL_RCC_MCOConfig>
}
 8000d28:	bf00      	nop
 8000d2a:	3740      	adds	r7, #64	; 0x40
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_TIM6_Init+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d48:	2217      	movs	r2, #23
 8000d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d62:	f002 f957 	bl	8003014 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d6c:	f000 f95e 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM6_Init+0x64>)
 8000d7e:	f002 fbab 	bl	80034d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 f950 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000274 	.word	0x20000274
 8000d98:	40001000 	.word	0x40001000

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MX_USART2_UART_Init+0x5c>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART2_UART_Init+0x58>)
 8000de0:	f002 fbfe 	bl	80035e0 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f91f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200002c0 	.word	0x200002c0
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e12:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a3b      	ldr	r2, [pc, #236]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_GPIO_Init+0x108>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_output_GPIO_Port, LED_output_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fdfd 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4827      	ldr	r0, [pc, #156]	; (8000f08 <MX_GPIO_Init+0x10c>)
 8000e6c:	f000 fdf8 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C_input_Pin */
  GPIO_InitStruct.Pin = C_input_Pin;
 8000e70:	2301      	movs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(C_input_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f000 fc78 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_output_Pin */
  GPIO_InitStruct.Pin = LED_output_Pin;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_output_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f000 fc69 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f000 fc57 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_GPIO_Init+0x10c>)
 8000ee6:	f000 fc49 	bl	800177c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2006      	movs	r0, #6
 8000ef0:	f000 fc0d 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ef4:	2006      	movs	r0, #6
 8000ef6:	f000 fc26 	bl	8001746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) // TIM6 : counts to 1000 with increments every 1us, for a total 1ms
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d14e      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if(tim6_activate && !tim6_active)
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d011      	beq.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f083 0301 	eor.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d009      	beq.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			tim6_active = 1;
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
			rising_edge_count = 0; // reset count
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
			// Calculations
			sensor_input_frequency_hz = rising_edge_count * 1000;
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
		}
	}
}
 8000f4e:	e037      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		else if(tim6_active)
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d032      	beq.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			tim6_active = 0;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
			tim6_activate = 0;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
			sensor_input_frequency_hz = rising_edge_count * 1000;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fac6 	bl	8000504 <__aeabi_ui2d>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	491a      	ldr	r1, [pc, #104]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
			sensor_capacity_pF = (1 / sensor_input_frequency_hz) * PERIOD_CAPA_COEFF + PERIOD_CAPA_BASE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f04f 0000 	mov.w	r0, #0
 8000f8c:	4917      	ldr	r1, [pc, #92]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f8e:	f7ff fc5d 	bl	800084c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	a30b      	add	r3, pc, #44	; (adr r3, 8000fc8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	a308      	add	r3, pc, #32	; (adr r3, 8000fd0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff f969 	bl	8000288 <__aeabi_dsub>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000fbc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	412f88ea 	.word	0x412f88ea
 8000fd0:	b851eb85 	.word	0xb851eb85
 8000fd4:	402d051e 	.word	0x402d051e
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	20000359 	.word	0x20000359
 8000fe0:	20000358 	.word	0x20000358
 8000fe4:	2000035c 	.word	0x2000035c
 8000fe8:	20000348 	.word	0x20000348
 8000fec:	3ff00000 	.word	0x3ff00000
 8000ff0:	20000350 	.word	0x20000350

08000ff4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d109      	bne.n	8001018 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(tim6_active)
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_GPIO_EXTI_Callback+0x30>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <HAL_GPIO_EXTI_Callback+0x24>
		{
			rising_edge_count++;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_GPIO_EXTI_Callback+0x34>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_GPIO_EXTI_Callback+0x34>)
 8001016:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000358 	.word	0x20000358
 8001028:	2000035c 	.word	0x2000035c

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <startMeasure>:

#include "sensor.h"

// Starts a measure on next tim6 overflow
void startMeasure()
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	tim6_activate = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <startMeasure+0x1c>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
	rising_edge_count = 0;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <startMeasure+0x20>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000359 	.word	0x20000359
 8001058:	2000035c 	.word	0x2000035c

0800105c <isMeasuring>:

// Check if the system is currently measuring
_Bool isMeasuring()
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	return (tim6_activate || tim6_active);
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <isMeasuring+0x30>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <isMeasuring+0x18>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <isMeasuring+0x34>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <isMeasuring+0x1c>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <isMeasuring+0x1e>
 8001078:	2300      	movs	r3, #0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000359 	.word	0x20000359
 8001090:	20000358 	.word	0x20000358

08001094 <measure>:

void measure()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	startMeasure();
 8001098:	f7ff ffce 	bl	8001038 <startMeasure>
	while(isMeasuring()) {};
 800109c:	bf00      	nop
 800109e:	f7ff ffdd 	bl	800105c <isMeasuring>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1fa      	bne.n	800109e <measure+0xa>
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0x44>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d113      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_TIM_Base_MspInit+0x48>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_TIM_Base_MspInit+0x48>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x48>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2036      	movs	r0, #54	; 0x36
 8001128:	f000 faf1 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800112c:	2036      	movs	r0, #54	; 0x36
 800112e:	f000 fb0a 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40001000 	.word	0x40001000
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0x80>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_UART_MspInit+0x80>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001196:	230c      	movs	r3, #12
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f000 fae2 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40021000 	.word	0x40021000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f95c 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_input_Pin);
 8001220:	2001      	movs	r0, #1
 8001222:	f000 fc35 	bl	8001a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <TIM6_DAC_IRQHandler+0x10>)
 8001232:	f001 ff9b 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000274 	.word	0x20000274

08001240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return 1;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_kill>:

int _kill(int pid, int sig)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125a:	f003 fbc3 	bl	80049e4 <__errno>
 800125e:	4603      	mov	r3, r0
 8001260:	2216      	movs	r2, #22
 8001262:	601a      	str	r2, [r3, #0]
  return -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_exit>:

void _exit (int status)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffe7 	bl	8001250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001282:	e7fe      	b.n	8001282 <_exit+0x12>

08001284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e00a      	b.n	80012ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001296:	f3af 8000 	nop.w
 800129a:	4601      	mov	r1, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	b2ca      	uxtb	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf0      	blt.n	8001296 <_read+0x12>
  }

  return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e009      	b.n	80012e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf1      	blt.n	80012d0 <_write+0x12>
  }
  return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_close>:

int _close(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131e:	605a      	str	r2, [r3, #4]
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_isatty>:

int _isatty(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f003 fb28 	bl	80049e4 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20004000 	.word	0x20004000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000364 	.word	0x20000364
 80013c8:	200004b8 	.word	0x200004b8

080013cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f003 fae7 	bl	80049f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001422:	f7ff fbc1 	bl	8000ba8 <main>

08001426 <LoopForever>:

LoopForever:
    b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001428:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001434:	08006f3c 	.word	0x08006f3c
  ldr r2, =_sbss
 8001438:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800143c:	200004b8 	.word	0x200004b8

08001440 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_IRQHandler>
	...

08001444 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x28>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x28>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f94f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fe26 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f967 	bl	8001762 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f92f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000080 	.word	0x20000080
 80014c8:	20000088 	.word	0x20000088
 80014cc:	20000084 	.word	0x20000084

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000088 	.word	0x20000088
 80014f4:	20000368 	.word	0x20000368

080014f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000368 	.word	0x20000368

08001510 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000088 	.word	0x20000088

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e14e      	b.n	8001a2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8140 	beq.w	8001a24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x40>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d017      	beq.n	800185a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 809a 	beq.w	8001a24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x2d8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1d4>
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001950:	2305      	movs	r3, #5
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 800195c:	2300      	movs	r3, #0
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196e:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a0:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f aea9 	bne.w	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faa0 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f001 b823 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 817d 	beq.w	8001df6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001afc:	4bbc      	ldr	r3, [pc, #752]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b08:	4bb9      	ldr	r3, [pc, #740]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d15c      	bne.n	8001bce <HAL_RCC_OscConfig+0x10e>
 8001b14:	4bb6      	ldr	r3, [pc, #728]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d155      	bne.n	8001bce <HAL_RCC_OscConfig+0x10e>
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_OscConfig+0x94>
 8001b4e:	4ba8      	ldr	r3, [pc, #672]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e015      	b.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b8c:	fa92 f2a2 	rbit	r2, r2
 8001b90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 811f 	beq.w	8001df4 <HAL_RCC_OscConfig+0x334>
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8116 	bne.w	8001df4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f000 bfaf 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x12e>
 8001be0:	4b83      	ldr	r3, [pc, #524]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a82      	ldr	r2, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e036      	b.n	8001c5c <HAL_RCC_OscConfig+0x19c>
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x158>
 8001bfe:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7b      	ldr	r2, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b79      	ldr	r3, [pc, #484]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a78      	ldr	r2, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e021      	b.n	8001c5c <HAL_RCC_OscConfig+0x19c>
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x184>
 8001c2a:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a70      	ldr	r2, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6d      	ldr	r2, [pc, #436]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0x19c>
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a69      	ldr	r2, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5c:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f023 020f 	bic.w	r2, r3, #15
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	495f      	ldr	r1, [pc, #380]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d059      	beq.n	8001d3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fc37 	bl	80014f8 <HAL_GetTick>
 8001c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fc32 	bl	80014f8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bf43 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x218>
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0x244>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ab      	beq.n	8001c90 <HAL_RCC_OscConfig+0x1d0>
 8001d38:	e05d      	b.n	8001df6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fbdd 	bl	80014f8 <HAL_GetTick>
 8001d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fbd8 	bl	80014f8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d902      	bls.n	8001d5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	f000 bee9 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2cc>
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e015      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001da8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCC_OscConfig+0x330>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dbc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001dc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dc4:	fa92 f2a2 	rbit	r2, r2
 8001dc8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001dcc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ab      	bne.n	8001d44 <HAL_RCC_OscConfig+0x284>
 8001dec:	e003      	b.n	8001df6 <HAL_RCC_OscConfig+0x336>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 817d 	beq.w	8002106 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e0c:	4ba6      	ldr	r3, [pc, #664]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e18:	4ba3      	ldr	r3, [pc, #652]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d172      	bne.n	8001f0a <HAL_RCC_OscConfig+0x44a>
 8001e24:	4ba0      	ldr	r3, [pc, #640]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d16c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x44a>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3a0>
 8001e5a:	4b93      	ldr	r3, [pc, #588]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c8>
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e84:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f002 021f 	and.w	r2, r2, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x410>
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f000 be2e 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	21f8      	movs	r1, #248	; 0xf8
 8001ee6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001eee:	fa91 f1a1 	rbit	r1, r1
 8001ef2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ef6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001efa:	fab1 f181 	clz	r1, r1
 8001efe:	b2c9      	uxtb	r1, r1
 8001f00:	408b      	lsls	r3, r1
 8001f02:	4969      	ldr	r1, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f08:	e0fd      	b.n	8002106 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8088 	beq.w	800202c <HAL_RCC_OscConfig+0x56c>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2301      	movs	r3, #1
 8001f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fad6 	bl	80014f8 <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f52:	f7ff fad1 	bl	80014f8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 bde2 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d8>
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e013      	b.n	8001fc0 <HAL_RCC_OscConfig+0x500>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f002 021f 	and.w	r2, r2, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0af      	beq.n	8001f52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	21f8      	movs	r1, #248	; 0xf8
 8002008:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002010:	fa91 f1a1 	rbit	r1, r1
 8002014:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002018:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800201c:	fab1 f181 	clz	r1, r1
 8002020:	b2c9      	uxtb	r1, r1
 8002022:	408b      	lsls	r3, r1
 8002024:	4920      	ldr	r1, [pc, #128]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
 800202a:	e06c      	b.n	8002106 <HAL_RCC_OscConfig+0x646>
 800202c:	2301      	movs	r3, #1
 800202e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800203e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	461a      	mov	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fa4e 	bl	80014f8 <HAL_GetTick>
 800205c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff fa49 	bl	80014f8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	f000 bd5a 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800208a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <HAL_RCC_OscConfig+0x5ec>
 80020a2:	4b01      	ldr	r3, [pc, #4]	; (80020a8 <HAL_RCC_OscConfig+0x5e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e015      	b.n	80020d4 <HAL_RCC_OscConfig+0x614>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020d0:	4bc8      	ldr	r3, [pc, #800]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2202      	movs	r2, #2
 80020d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f042 0220 	orr.w	r2, r2, #32
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ad      	bne.n	8002062 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8110 	beq.w	800233c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d079      	beq.n	8002220 <HAL_RCC_OscConfig+0x760>
 800212c:	2301      	movs	r3, #1
 800212e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800213e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4bab      	ldr	r3, [pc, #684]	; (80023f8 <HAL_RCC_OscConfig+0x938>)
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	461a      	mov	r2, r3
 8002152:	2301      	movs	r3, #1
 8002154:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff f9cf 	bl	80014f8 <HAL_GetTick>
 800215a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff f9ca 	bl	80014f8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d902      	bls.n	8002176 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	f000 bcdb 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 80021d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021dc:	2102      	movs	r1, #2
 80021de:	6019      	str	r1, [r3, #0]
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f1a3 	rbit	r1, r3
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021f6:	6019      	str	r1, [r3, #0]
  return result;
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0a0      	beq.n	8002160 <HAL_RCC_OscConfig+0x6a0>
 800221e:	e08d      	b.n	800233c <HAL_RCC_OscConfig+0x87c>
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800224c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <HAL_RCC_OscConfig+0x938>)
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	461a      	mov	r2, r3
 800225e:	2300      	movs	r3, #0
 8002260:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff f949 	bl	80014f8 <HAL_GetTick>
 8002266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff f944 	bl	80014f8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d902      	bls.n	8002282 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	f000 bc55 	b.w	8002b2c <HAL_RCC_OscConfig+0x106c>
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800228a:	2202      	movs	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 80022f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022fa:	2102      	movs	r1, #2
 80022fc:	6019      	str	r1, [r3, #0]
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f1a3 	rbit	r1, r3
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002314:	6019      	str	r1, [r3, #0]
  return result;
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d197      	bne.n	800226c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 81a1 	beq.w	8002694 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d116      	bne.n	8002392 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800238a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x93c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11a      	bne.n	80023d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x93c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_RCC_OscConfig+0x93c>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7ff f8a5 	bl	80014f8 <HAL_GetTick>
 80023ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	e009      	b.n	80023c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7ff f8a0 	bl	80014f8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e3b1      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x93c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10d      	bne.n	8002400 <HAL_RCC_OscConfig+0x940>
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <HAL_RCC_OscConfig+0x934>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e03c      	b.n	800246c <HAL_RCC_OscConfig+0x9ac>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	10908120 	.word	0x10908120
 80023fc:	40007000 	.word	0x40007000
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x96a>
 8002410:	4bc1      	ldr	r3, [pc, #772]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4ac0      	ldr	r2, [pc, #768]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	4bbe      	ldr	r3, [pc, #760]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4abd      	ldr	r2, [pc, #756]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e020      	b.n	800246c <HAL_RCC_OscConfig+0x9ac>
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x994>
 800243a:	4bb7      	ldr	r3, [pc, #732]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4ab6      	ldr	r2, [pc, #728]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4bb4      	ldr	r3, [pc, #720]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4ab3      	ldr	r2, [pc, #716]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0x9ac>
 8002454:	4bb0      	ldr	r3, [pc, #704]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4aaf      	ldr	r2, [pc, #700]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	4bad      	ldr	r3, [pc, #692]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4aac      	ldr	r2, [pc, #688]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002466:	f023 0304 	bic.w	r3, r3, #4
 800246a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8081 	beq.w	8002580 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7ff f83b 	bl	80014f8 <HAL_GetTick>
 8002482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7ff f836 	bl	80014f8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e345      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024a8:	2202      	movs	r2, #2
 80024aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024cc:	2202      	movs	r2, #2
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024e6:	601a      	str	r2, [r3, #0]
  return result;
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0xa4c>
 8002506:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	e013      	b.n	8002534 <HAL_RCC_OscConfig+0xa74>
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002514:	2202      	movs	r2, #2
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	4b79      	ldr	r3, [pc, #484]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002538:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800253c:	2102      	movs	r1, #2
 800253e:	6011      	str	r1, [r2, #0]
 8002540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002544:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	fa92 f1a2 	rbit	r1, r2
 800254e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002552:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002556:	6011      	str	r1, [r2, #0]
  return result;
 8002558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d084      	beq.n	8002488 <HAL_RCC_OscConfig+0x9c8>
 800257e:	e07f      	b.n	8002680 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe ffba 	bl	80014f8 <HAL_GetTick>
 8002584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe ffb5 	bl	80014f8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e2c4      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025aa:	2202      	movs	r2, #2
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025e8:	601a      	str	r2, [r3, #0]
  return result;
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d102      	bne.n	800260e <HAL_RCC_OscConfig+0xb4e>
 8002608:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	e013      	b.n	8002636 <HAL_RCC_OscConfig+0xb76>
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002616:	2202      	movs	r2, #2
 8002618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800263e:	2102      	movs	r1, #2
 8002640:	6011      	str	r1, [r2, #0]
 8002642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002646:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002654:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d184      	bne.n	800258a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002680:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8242 	beq.w	8002b2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_RCC_OscConfig+0xc58>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	f000 8213 	beq.w	8002ada <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	f040 8162 	bne.w	800298a <HAL_RCC_OscConfig+0xeca>
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002700:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	2300      	movs	r3, #0
 800270a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fef4 	bl	80014f8 <HAL_GetTick>
 8002710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	e00c      	b.n	8002730 <HAL_RCC_OscConfig+0xc70>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe feec 	bl	80014f8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1fd      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800275e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0xcba>
 8002774:	4bb0      	ldr	r3, [pc, #704]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	e027      	b.n	80027ca <HAL_RCC_OscConfig+0xd0a>
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b9c      	ldr	r3, [pc, #624]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d6:	6011      	str	r1, [r2, #0]
 80027d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	fa92 f1a2 	rbit	r1, r2
 80027e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027ee:	6011      	str	r1, [r2, #0]
  return result;
 80027f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f042 0220 	orr.w	r2, r2, #32
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f002 021f 	and.w	r2, r2, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d182      	bne.n	800271c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	430b      	orrs	r3, r1
 8002838:	497f      	ldr	r1, [pc, #508]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002862:	601a      	str	r2, [r3, #0]
  return result;
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800286c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fe38 	bl	80014f8 <HAL_GetTick>
 8002888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	e009      	b.n	80028a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fe33 	bl	80014f8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e144      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028c6:	601a      	str	r2, [r3, #0]
  return result;
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0xe2c>
 80028e6:	4b54      	ldr	r3, [pc, #336]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e027      	b.n	800293c <HAL_RCC_OscConfig+0xe7c>
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800291a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002940:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002948:	6011      	str	r1, [r2, #0]
 800294a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	fa92 f1a2 	rbit	r1, r2
 8002958:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002960:	6011      	str	r1, [r2, #0]
  return result;
 8002962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002966:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d082      	beq.n	800288e <HAL_RCC_OscConfig+0xdce>
 8002988:	e0cf      	b.n	8002b2a <HAL_RCC_OscConfig+0x106a>
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029ae:	601a      	str	r2, [r3, #0]
  return result;
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fd92 	bl	80014f8 <HAL_GetTick>
 80029d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d8:	e009      	b.n	80029ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fd8d 	bl	80014f8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e09e      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a12:	601a      	str	r2, [r3, #0]
  return result;
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d104      	bne.n	8002a3c <HAL_RCC_OscConfig+0xf7c>
 8002a32:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <HAL_RCC_OscConfig+0xf78>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e029      	b.n	8002a8c <HAL_RCC_OscConfig+0xfcc>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x1078>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a98:	6011      	str	r1, [r2, #0]
 8002a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fa92 f1a2 	rbit	r1, r2
 8002aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ab0:	6011      	str	r1, [r2, #0]
  return result;
 8002ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f042 0220 	orr.w	r2, r2, #32
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f002 021f 	and.w	r2, r2, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d180      	bne.n	80029da <HAL_RCC_OscConfig+0xf1a>
 8002ad8:	e027      	b.n	8002b2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01e      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_OscConfig+0x1078>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002af6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002afa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09e      	sub	sp, #120	; 0x78
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e162      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b90      	ldr	r3, [pc, #576]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b8d      	ldr	r3, [pc, #564]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0207 	bic.w	r2, r3, #7
 8002b6a:	498b      	ldr	r1, [pc, #556]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e14a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	497f      	ldr	r1, [pc, #508]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80dc 	beq.w	8002d68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d13c      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xf6>
 8002bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xa6>
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	e00f      	b.n	8002c02 <HAL_RCC_ClockConfig+0xc6>
 8002be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f002 021f 	and.w	r2, r2, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d17b      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0f3      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d13c      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x178>
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x128>
 8002c5e:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e00f      	b.n	8002c84 <HAL_RCC_ClockConfig+0x148>
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
 8002c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
 8002c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c88:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d13a      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b2      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x1a0>
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e00d      	b.n	8002cf8 <HAL_RCC_ClockConfig+0x1bc>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	2302      	movs	r3, #2
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	61ba      	str	r2, [r7, #24]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	617a      	str	r2, [r7, #20]
  return result;
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f002 021f 	and.w	r2, r2, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e079      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	491a      	ldr	r1, [pc, #104]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fbde 	bl	80014f8 <HAL_GetTick>
 8002d3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe fbda 	bl	80014f8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e061      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d214      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4906      	ldr	r1, [pc, #24]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e040      	b.n	8002e1a <HAL_RCC_ClockConfig+0x2de>
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_ClockConfig+0x2e8>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	491a      	ldr	r1, [pc, #104]	; (8002e24 <HAL_RCC_ClockConfig+0x2e8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_RCC_ClockConfig+0x2e8>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4912      	ldr	r1, [pc, #72]	; (8002e24 <HAL_RCC_ClockConfig+0x2e8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dde:	f000 f85d 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002de2:	4601      	mov	r1, r0
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dec:	22f0      	movs	r2, #240	; 0xf0
 8002dee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	fa92 f2a2 	rbit	r2, r2
 8002df6:	60fa      	str	r2, [r7, #12]
  return result;
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	40d3      	lsrs	r3, r2
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x2ec>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_RCC_ClockConfig+0x2f0>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_RCC_ClockConfig+0x2f4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fb2c 	bl	8001470 <HAL_InitTick>
  
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3778      	adds	r7, #120	; 0x78
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08006b8c 	.word	0x08006b8c
 8002e2c:	20000080 	.word	0x20000080
 8002e30:	20000084 	.word	0x20000084

08002e34 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e50:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_MCOConfig+0x64>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_RCC_MCOConfig+0x64>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6153      	str	r3, [r2, #20]
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_RCC_MCOConfig+0x64>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e78:	f7fe fc80 	bl	800177c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_MCOConfig+0x64>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_MCOConfig+0x64>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x30>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eca:	e03c      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ece:	623b      	str	r3, [r7, #32]
      break;
 8002ed0:	e03c      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ed8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002edc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	607a      	str	r2, [r7, #4]
  return result;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	fab2 f282 	clz	r2, r2
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	40d3      	lsrs	r3, r2
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	220f      	movs	r2, #15
 8002f00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	60fa      	str	r2, [r7, #12]
  return result;
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	40d3      	lsrs	r3, r2
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	e004      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	623b      	str	r3, [r7, #32]
      break;
 8002f44:	e002      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f48:	623b      	str	r3, [r7, #32]
      break;
 8002f4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	372c      	adds	r7, #44	; 0x2c
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	016e3600 	.word	0x016e3600
 8002f64:	08006ba4 	.word	0x08006ba4
 8002f68:	08006bb4 	.word	0x08006bb4
 8002f6c:	003d0900 	.word	0x003d0900
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000080 	.word	0x20000080

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f92:	f7ff ffef 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f96:	4601      	mov	r1, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	fa92 f2a2 	rbit	r2, r2
 8002fac:	603a      	str	r2, [r7, #0]
  return result;
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	40d3      	lsrs	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08006b9c 	.word	0x08006b9c

08002fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fd6:	f7ff ffcd 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fe4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fe8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	603a      	str	r2, [r7, #0]
  return result;
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	fab2 f282 	clz	r2, r2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	40d3      	lsrs	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08006b9c 	.word	0x08006b9c

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e049      	b.n	80030ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe f85c 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f9d2 	bl	80033fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d001      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e03b      	b.n	8003154 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_TIM_Base_Start_IT+0x9c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d004      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_TIM_Base_Start_IT+0xa0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d115      	bne.n	800313e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_TIM_Base_Start_IT+0xa4>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d015      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d011      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e008      	b.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	00010007 	.word	0x00010007

0800316c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0202 	mvn.w	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f905 	bl	80033be <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8f7 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f908 	bl	80033d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0204 	mvn.w	r2, #4
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8db 	bl	80033be <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8cd 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8de 	bl	80033d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b08      	cmp	r3, #8
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0208 	mvn.w	r2, #8
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8b1 	bl	80033be <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8a3 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8b4 	bl	80033d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d122      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d11b      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f887 	bl	80033be <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f879 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f88a 	bl	80033d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0201 	mvn.w	r2, #1
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fe10 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f94e 	bl	80035b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332a:	d10e      	bne.n	800334a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d107      	bne.n	800334a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f941 	bl	80035cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d10e      	bne.n	8003376 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d107      	bne.n	8003376 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f838 	bl	80033e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d10e      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d107      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0220 	mvn.w	r2, #32
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f901 	bl	80035a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a2e      	ldr	r2, [pc, #184]	; (80034c8 <TIM_Base_SetConfig+0xcc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_Base_SetConfig+0x20>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d108      	bne.n	800342e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <TIM_Base_SetConfig+0xcc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00f      	beq.n	8003456 <TIM_Base_SetConfig+0x5a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d00b      	beq.n	8003456 <TIM_Base_SetConfig+0x5a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a22      	ldr	r2, [pc, #136]	; (80034cc <TIM_Base_SetConfig+0xd0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <TIM_Base_SetConfig+0x5a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <TIM_Base_SetConfig+0xd4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <TIM_Base_SetConfig+0x5a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <TIM_Base_SetConfig+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <TIM_Base_SetConfig+0xcc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <TIM_Base_SetConfig+0xd0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <TIM_Base_SetConfig+0xd4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <TIM_Base_SetConfig+0xd8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800

080034d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e04f      	b.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d004      	beq.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40014000 	.word	0x40014000

080035a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e040      	b.n	8003674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fd9e 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8b6 	bl	8003790 <UART_SetConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e022      	b.n	8003674 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9e0 	bl	80039fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fa67 	bl	8003b40 <UART_CheckIdleState>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003690:	2b20      	cmp	r3, #32
 8003692:	d178      	bne.n	8003786 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Transmit+0x24>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e071      	b.n	8003788 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2221      	movs	r2, #33	; 0x21
 80036b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b2:	f7fd ff21 	bl	80014f8 <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x68>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ec:	e030      	b.n	8003750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fac9 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e03c      	b.n	8003788 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003720:	b292      	uxth	r2, r2
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3302      	adds	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e008      	b.n	800373e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b292      	uxth	r2, r2
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1c8      	bne.n	80036ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	2140      	movs	r1, #64	; 0x40
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa92 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e005      	b.n	8003788 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003786:	2302      	movs	r3, #2
  }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b8a      	ldr	r3, [pc, #552]	; (80039e4 <UART_SetConfig+0x254>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a78      	ldr	r2, [pc, #480]	; (80039e8 <UART_SetConfig+0x258>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d120      	bne.n	800384e <UART_SetConfig+0xbe>
 800380c:	4b77      	ldr	r3, [pc, #476]	; (80039ec <UART_SetConfig+0x25c>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b03      	cmp	r3, #3
 8003816:	d817      	bhi.n	8003848 <UART_SetConfig+0xb8>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x90>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003831 	.word	0x08003831
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003843 	.word	0x08003843
 800382c:	08003837 	.word	0x08003837
 8003830:	2300      	movs	r3, #0
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e01d      	b.n	8003872 <UART_SetConfig+0xe2>
 8003836:	2302      	movs	r3, #2
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e01a      	b.n	8003872 <UART_SetConfig+0xe2>
 800383c:	2304      	movs	r3, #4
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e017      	b.n	8003872 <UART_SetConfig+0xe2>
 8003842:	2308      	movs	r3, #8
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e014      	b.n	8003872 <UART_SetConfig+0xe2>
 8003848:	2310      	movs	r3, #16
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e011      	b.n	8003872 <UART_SetConfig+0xe2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <UART_SetConfig+0x260>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d102      	bne.n	800385e <UART_SetConfig+0xce>
 8003858:	2300      	movs	r3, #0
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e009      	b.n	8003872 <UART_SetConfig+0xe2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a64      	ldr	r2, [pc, #400]	; (80039f4 <UART_SetConfig+0x264>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d102      	bne.n	800386e <UART_SetConfig+0xde>
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e001      	b.n	8003872 <UART_SetConfig+0xe2>
 800386e:	2310      	movs	r3, #16
 8003870:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d15a      	bne.n	8003932 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800387c:	7ffb      	ldrb	r3, [r7, #31]
 800387e:	2b08      	cmp	r3, #8
 8003880:	d827      	bhi.n	80038d2 <UART_SetConfig+0x142>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0xf8>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7ff fb6e 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 80038b0:	61b8      	str	r0, [r7, #24]
        break;
 80038b2:	e013      	b.n	80038dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7ff fb8c 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 80038b8:	61b8      	str	r0, [r7, #24]
        break;
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <UART_SetConfig+0x268>)
 80038be:	61bb      	str	r3, [r7, #24]
        break;
 80038c0:	e00c      	b.n	80038dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7ff faeb 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80038c6:	61b8      	str	r0, [r7, #24]
        break;
 80038c8:	e008      	b.n	80038dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e004      	b.n	80038dc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77bb      	strb	r3, [r7, #30]
        break;
 80038da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d074      	beq.n	80039cc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	005a      	lsls	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d916      	bls.n	800392c <UART_SetConfig+0x19c>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d212      	bcs.n	800392c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f023 030f 	bic.w	r3, r3, #15
 800390e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	b29b      	uxth	r3, r3
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b29a      	uxth	r2, r3
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	4313      	orrs	r3, r2
 8003920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	89fa      	ldrh	r2, [r7, #14]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	e04f      	b.n	80039cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	77bb      	strb	r3, [r7, #30]
 8003930:	e04c      	b.n	80039cc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003932:	7ffb      	ldrb	r3, [r7, #31]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d828      	bhi.n	800398a <UART_SetConfig+0x1fa>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0x1b0>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7ff fb12 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003968:	61b8      	str	r0, [r7, #24]
        break;
 800396a:	e013      	b.n	8003994 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fb30 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e00f      	b.n	8003994 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <UART_SetConfig+0x268>)
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e00c      	b.n	8003994 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff fa8f 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800397e:	61b8      	str	r0, [r7, #24]
        break;
 8003980:	e008      	b.n	8003994 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	61bb      	str	r3, [r7, #24]
        break;
 8003988:	e004      	b.n	8003994 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	77bb      	strb	r3, [r7, #30]
        break;
 8003992:	bf00      	nop
    }

    if (pclk != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085a      	lsrs	r2, r3, #1
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d909      	bls.n	80039c8 <UART_SetConfig+0x238>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d205      	bcs.n	80039c8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	e001      	b.n	80039cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	efff69f3 	.word	0xefff69f3
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40004400 	.word	0x40004400
 80039f4:	40004800 	.word	0x40004800
 80039f8:	007a1200 	.word	0x007a1200

080039fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afa:	d10a      	bne.n	8003b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b098      	sub	sp, #96	; 0x60
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b50:	f7fd fcd2 	bl	80014f8 <HAL_GetTick>
 8003b54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d12e      	bne.n	8003bc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f88c 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d021      	beq.n	8003bc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e6      	bne.n	8003b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e062      	b.n	8003c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d149      	bne.n	8003c64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f856 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03c      	beq.n	8003c64 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e6      	bne.n	8003bea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3308      	adds	r3, #8
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e011      	b.n	8003c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3758      	adds	r7, #88	; 0x58
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	e049      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d045      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fd fc25 	bl	80014f8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e048      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d031      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d110      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f838 	bl	8003d5e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e029      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d111      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f81e 	bl	8003d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e00f      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d0a6      	beq.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b095      	sub	sp, #84	; 0x54
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d84:	643b      	str	r3, [r7, #64]	; 0x40
 8003d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d118      	bne.n	8003e06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0310 	bic.w	r3, r3, #16
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e1a:	bf00      	nop
 8003e1c:	3754      	adds	r7, #84	; 0x54
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <__cvt>:
 8003e26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2a:	ec55 4b10 	vmov	r4, r5, d0
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	460e      	mov	r6, r1
 8003e32:	4619      	mov	r1, r3
 8003e34:	462b      	mov	r3, r5
 8003e36:	bfbb      	ittet	lt
 8003e38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e3c:	461d      	movlt	r5, r3
 8003e3e:	2300      	movge	r3, #0
 8003e40:	232d      	movlt	r3, #45	; 0x2d
 8003e42:	700b      	strb	r3, [r1, #0]
 8003e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	f023 0820 	bic.w	r8, r3, #32
 8003e50:	bfbc      	itt	lt
 8003e52:	4622      	movlt	r2, r4
 8003e54:	4614      	movlt	r4, r2
 8003e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e5a:	d005      	beq.n	8003e68 <__cvt+0x42>
 8003e5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e60:	d100      	bne.n	8003e64 <__cvt+0x3e>
 8003e62:	3601      	adds	r6, #1
 8003e64:	2102      	movs	r1, #2
 8003e66:	e000      	b.n	8003e6a <__cvt+0x44>
 8003e68:	2103      	movs	r1, #3
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	ab02      	add	r3, sp, #8
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	ec45 4b10 	vmov	d0, r4, r5
 8003e76:	4653      	mov	r3, sl
 8003e78:	4632      	mov	r2, r6
 8003e7a:	f000 fe69 	bl	8004b50 <_dtoa_r>
 8003e7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e82:	4607      	mov	r7, r0
 8003e84:	d102      	bne.n	8003e8c <__cvt+0x66>
 8003e86:	f019 0f01 	tst.w	r9, #1
 8003e8a:	d022      	beq.n	8003ed2 <__cvt+0xac>
 8003e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e90:	eb07 0906 	add.w	r9, r7, r6
 8003e94:	d110      	bne.n	8003eb8 <__cvt+0x92>
 8003e96:	783b      	ldrb	r3, [r7, #0]
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d10a      	bne.n	8003eb2 <__cvt+0x8c>
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	f7fc fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ea8:	b918      	cbnz	r0, 8003eb2 <__cvt+0x8c>
 8003eaa:	f1c6 0601 	rsb	r6, r6, #1
 8003eae:	f8ca 6000 	str.w	r6, [sl]
 8003eb2:	f8da 3000 	ldr.w	r3, [sl]
 8003eb6:	4499      	add	r9, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ec4:	b108      	cbz	r0, 8003eca <__cvt+0xa4>
 8003ec6:	f8cd 900c 	str.w	r9, [sp, #12]
 8003eca:	2230      	movs	r2, #48	; 0x30
 8003ecc:	9b03      	ldr	r3, [sp, #12]
 8003ece:	454b      	cmp	r3, r9
 8003ed0:	d307      	bcc.n	8003ee2 <__cvt+0xbc>
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ed6:	1bdb      	subs	r3, r3, r7
 8003ed8:	4638      	mov	r0, r7
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	b004      	add	sp, #16
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	9103      	str	r1, [sp, #12]
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e7f0      	b.n	8003ecc <__cvt+0xa6>

08003eea <__exponent>:
 8003eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eec:	4603      	mov	r3, r0
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	4249      	neglt	r1, r1
 8003ef4:	f803 2b02 	strb.w	r2, [r3], #2
 8003ef8:	bfb4      	ite	lt
 8003efa:	222d      	movlt	r2, #45	; 0x2d
 8003efc:	222b      	movge	r2, #43	; 0x2b
 8003efe:	2909      	cmp	r1, #9
 8003f00:	7042      	strb	r2, [r0, #1]
 8003f02:	dd2a      	ble.n	8003f5a <__exponent+0x70>
 8003f04:	f10d 0207 	add.w	r2, sp, #7
 8003f08:	4617      	mov	r7, r2
 8003f0a:	260a      	movs	r6, #10
 8003f0c:	4694      	mov	ip, r2
 8003f0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f12:	fb06 1415 	mls	r4, r6, r5, r1
 8003f16:	3430      	adds	r4, #48	; 0x30
 8003f18:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	2c63      	cmp	r4, #99	; 0x63
 8003f20:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f24:	4629      	mov	r1, r5
 8003f26:	dcf1      	bgt.n	8003f0c <__exponent+0x22>
 8003f28:	3130      	adds	r1, #48	; 0x30
 8003f2a:	f1ac 0402 	sub.w	r4, ip, #2
 8003f2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f32:	1c41      	adds	r1, r0, #1
 8003f34:	4622      	mov	r2, r4
 8003f36:	42ba      	cmp	r2, r7
 8003f38:	d30a      	bcc.n	8003f50 <__exponent+0x66>
 8003f3a:	f10d 0209 	add.w	r2, sp, #9
 8003f3e:	eba2 020c 	sub.w	r2, r2, ip
 8003f42:	42bc      	cmp	r4, r7
 8003f44:	bf88      	it	hi
 8003f46:	2200      	movhi	r2, #0
 8003f48:	4413      	add	r3, r2
 8003f4a:	1a18      	subs	r0, r3, r0
 8003f4c:	b003      	add	sp, #12
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f54:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003f58:	e7ed      	b.n	8003f36 <__exponent+0x4c>
 8003f5a:	2330      	movs	r3, #48	; 0x30
 8003f5c:	3130      	adds	r1, #48	; 0x30
 8003f5e:	7083      	strb	r3, [r0, #2]
 8003f60:	70c1      	strb	r1, [r0, #3]
 8003f62:	1d03      	adds	r3, r0, #4
 8003f64:	e7f1      	b.n	8003f4a <__exponent+0x60>
	...

08003f68 <_printf_float>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	ed2d 8b02 	vpush	{d8}
 8003f70:	b08d      	sub	sp, #52	; 0x34
 8003f72:	460c      	mov	r4, r1
 8003f74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f78:	4616      	mov	r6, r2
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	f000 fce7 	bl	8004950 <_localeconv_r>
 8003f82:	f8d0 a000 	ldr.w	sl, [r0]
 8003f86:	4650      	mov	r0, sl
 8003f88:	f7fc f972 	bl	8000270 <strlen>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	f8d8 3000 	ldr.w	r3, [r8]
 8003f98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	f103 0208 	add.w	r2, r3, #8
 8003fa6:	f8c8 2000 	str.w	r2, [r8]
 8003faa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fb2:	9307      	str	r3, [sp, #28]
 8003fb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8003fb8:	ee08 0a10 	vmov	s16, r0
 8003fbc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fc4:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <_printf_float+0x2d8>)
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	f7fc fdaf 	bl	8000b2c <__aeabi_dcmpun>
 8003fce:	bb88      	cbnz	r0, 8004034 <_printf_float+0xcc>
 8003fd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fd4:	4b9a      	ldr	r3, [pc, #616]	; (8004240 <_printf_float+0x2d8>)
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	f7fc fd89 	bl	8000af0 <__aeabi_dcmple>
 8003fde:	bb48      	cbnz	r0, 8004034 <_printf_float+0xcc>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	f7fc fd78 	bl	8000adc <__aeabi_dcmplt>
 8003fec:	b110      	cbz	r0, 8003ff4 <_printf_float+0x8c>
 8003fee:	232d      	movs	r3, #45	; 0x2d
 8003ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff4:	4a93      	ldr	r2, [pc, #588]	; (8004244 <_printf_float+0x2dc>)
 8003ff6:	4b94      	ldr	r3, [pc, #592]	; (8004248 <_printf_float+0x2e0>)
 8003ff8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ffc:	bf94      	ite	ls
 8003ffe:	4690      	movls	r8, r2
 8004000:	4698      	movhi	r8, r3
 8004002:	2303      	movs	r3, #3
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	9b05      	ldr	r3, [sp, #20]
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	f04f 0900 	mov.w	r9, #0
 8004012:	9700      	str	r7, [sp, #0]
 8004014:	4633      	mov	r3, r6
 8004016:	aa0b      	add	r2, sp, #44	; 0x2c
 8004018:	4621      	mov	r1, r4
 800401a:	4628      	mov	r0, r5
 800401c:	f000 f9da 	bl	80043d4 <_printf_common>
 8004020:	3001      	adds	r0, #1
 8004022:	f040 8090 	bne.w	8004146 <_printf_float+0x1de>
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	b00d      	add	sp, #52	; 0x34
 800402c:	ecbd 8b02 	vpop	{d8}
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	4640      	mov	r0, r8
 800403a:	4649      	mov	r1, r9
 800403c:	f7fc fd76 	bl	8000b2c <__aeabi_dcmpun>
 8004040:	b140      	cbz	r0, 8004054 <_printf_float+0xec>
 8004042:	464b      	mov	r3, r9
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfbc      	itt	lt
 8004048:	232d      	movlt	r3, #45	; 0x2d
 800404a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800404e:	4a7f      	ldr	r2, [pc, #508]	; (800424c <_printf_float+0x2e4>)
 8004050:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <_printf_float+0x2e8>)
 8004052:	e7d1      	b.n	8003ff8 <_printf_float+0x90>
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800405a:	9206      	str	r2, [sp, #24]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	d13f      	bne.n	80040e0 <_printf_float+0x178>
 8004060:	2306      	movs	r3, #6
 8004062:	6063      	str	r3, [r4, #4]
 8004064:	9b05      	ldr	r3, [sp, #20]
 8004066:	6861      	ldr	r1, [r4, #4]
 8004068:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800406c:	2300      	movs	r3, #0
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	ab0a      	add	r3, sp, #40	; 0x28
 8004072:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004076:	ab09      	add	r3, sp, #36	; 0x24
 8004078:	ec49 8b10 	vmov	d0, r8, r9
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff fece 	bl	8003e26 <__cvt>
 800408a:	9b06      	ldr	r3, [sp, #24]
 800408c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800408e:	2b47      	cmp	r3, #71	; 0x47
 8004090:	4680      	mov	r8, r0
 8004092:	d108      	bne.n	80040a6 <_printf_float+0x13e>
 8004094:	1cc8      	adds	r0, r1, #3
 8004096:	db02      	blt.n	800409e <_printf_float+0x136>
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	4299      	cmp	r1, r3
 800409c:	dd41      	ble.n	8004122 <_printf_float+0x1ba>
 800409e:	f1ab 0302 	sub.w	r3, fp, #2
 80040a2:	fa5f fb83 	uxtb.w	fp, r3
 80040a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040aa:	d820      	bhi.n	80040ee <_printf_float+0x186>
 80040ac:	3901      	subs	r1, #1
 80040ae:	465a      	mov	r2, fp
 80040b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040b4:	9109      	str	r1, [sp, #36]	; 0x24
 80040b6:	f7ff ff18 	bl	8003eea <__exponent>
 80040ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040bc:	1813      	adds	r3, r2, r0
 80040be:	2a01      	cmp	r2, #1
 80040c0:	4681      	mov	r9, r0
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	dc02      	bgt.n	80040cc <_printf_float+0x164>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	07d2      	lsls	r2, r2, #31
 80040ca:	d501      	bpl.n	80040d0 <_printf_float+0x168>
 80040cc:	3301      	adds	r3, #1
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d09c      	beq.n	8004012 <_printf_float+0xaa>
 80040d8:	232d      	movs	r3, #45	; 0x2d
 80040da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040de:	e798      	b.n	8004012 <_printf_float+0xaa>
 80040e0:	9a06      	ldr	r2, [sp, #24]
 80040e2:	2a47      	cmp	r2, #71	; 0x47
 80040e4:	d1be      	bne.n	8004064 <_printf_float+0xfc>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1bc      	bne.n	8004064 <_printf_float+0xfc>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e7b9      	b.n	8004062 <_printf_float+0xfa>
 80040ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80040f2:	d118      	bne.n	8004126 <_printf_float+0x1be>
 80040f4:	2900      	cmp	r1, #0
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	dd0b      	ble.n	8004112 <_printf_float+0x1aa>
 80040fa:	6121      	str	r1, [r4, #16]
 80040fc:	b913      	cbnz	r3, 8004104 <_printf_float+0x19c>
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	07d0      	lsls	r0, r2, #31
 8004102:	d502      	bpl.n	800410a <_printf_float+0x1a2>
 8004104:	3301      	adds	r3, #1
 8004106:	440b      	add	r3, r1
 8004108:	6123      	str	r3, [r4, #16]
 800410a:	65a1      	str	r1, [r4, #88]	; 0x58
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	e7de      	b.n	80040d0 <_printf_float+0x168>
 8004112:	b913      	cbnz	r3, 800411a <_printf_float+0x1b2>
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	07d2      	lsls	r2, r2, #31
 8004118:	d501      	bpl.n	800411e <_printf_float+0x1b6>
 800411a:	3302      	adds	r3, #2
 800411c:	e7f4      	b.n	8004108 <_printf_float+0x1a0>
 800411e:	2301      	movs	r3, #1
 8004120:	e7f2      	b.n	8004108 <_printf_float+0x1a0>
 8004122:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004128:	4299      	cmp	r1, r3
 800412a:	db05      	blt.n	8004138 <_printf_float+0x1d0>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	6121      	str	r1, [r4, #16]
 8004130:	07d8      	lsls	r0, r3, #31
 8004132:	d5ea      	bpl.n	800410a <_printf_float+0x1a2>
 8004134:	1c4b      	adds	r3, r1, #1
 8004136:	e7e7      	b.n	8004108 <_printf_float+0x1a0>
 8004138:	2900      	cmp	r1, #0
 800413a:	bfd4      	ite	le
 800413c:	f1c1 0202 	rsble	r2, r1, #2
 8004140:	2201      	movgt	r2, #1
 8004142:	4413      	add	r3, r2
 8004144:	e7e0      	b.n	8004108 <_printf_float+0x1a0>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	055a      	lsls	r2, r3, #21
 800414a:	d407      	bmi.n	800415c <_printf_float+0x1f4>
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	4642      	mov	r2, r8
 8004150:	4631      	mov	r1, r6
 8004152:	4628      	mov	r0, r5
 8004154:	47b8      	blx	r7
 8004156:	3001      	adds	r0, #1
 8004158:	d12c      	bne.n	80041b4 <_printf_float+0x24c>
 800415a:	e764      	b.n	8004026 <_printf_float+0xbe>
 800415c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004160:	f240 80e0 	bls.w	8004324 <_printf_float+0x3bc>
 8004164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004168:	2200      	movs	r2, #0
 800416a:	2300      	movs	r3, #0
 800416c:	f7fc fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8004170:	2800      	cmp	r0, #0
 8004172:	d034      	beq.n	80041de <_printf_float+0x276>
 8004174:	4a37      	ldr	r2, [pc, #220]	; (8004254 <_printf_float+0x2ec>)
 8004176:	2301      	movs	r3, #1
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f af51 	beq.w	8004026 <_printf_float+0xbe>
 8004184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004188:	429a      	cmp	r2, r3
 800418a:	db02      	blt.n	8004192 <_printf_float+0x22a>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07d8      	lsls	r0, r3, #31
 8004190:	d510      	bpl.n	80041b4 <_printf_float+0x24c>
 8004192:	ee18 3a10 	vmov	r3, s16
 8004196:	4652      	mov	r2, sl
 8004198:	4631      	mov	r1, r6
 800419a:	4628      	mov	r0, r5
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	f43f af41 	beq.w	8004026 <_printf_float+0xbe>
 80041a4:	f04f 0800 	mov.w	r8, #0
 80041a8:	f104 091a 	add.w	r9, r4, #26
 80041ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	4543      	cmp	r3, r8
 80041b2:	dc09      	bgt.n	80041c8 <_printf_float+0x260>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	079b      	lsls	r3, r3, #30
 80041b8:	f100 8107 	bmi.w	80043ca <_printf_float+0x462>
 80041bc:	68e0      	ldr	r0, [r4, #12]
 80041be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c0:	4298      	cmp	r0, r3
 80041c2:	bfb8      	it	lt
 80041c4:	4618      	movlt	r0, r3
 80041c6:	e730      	b.n	800402a <_printf_float+0xc2>
 80041c8:	2301      	movs	r3, #1
 80041ca:	464a      	mov	r2, r9
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f af27 	beq.w	8004026 <_printf_float+0xbe>
 80041d8:	f108 0801 	add.w	r8, r8, #1
 80041dc:	e7e6      	b.n	80041ac <_printf_float+0x244>
 80041de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dc39      	bgt.n	8004258 <_printf_float+0x2f0>
 80041e4:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <_printf_float+0x2ec>)
 80041e6:	2301      	movs	r3, #1
 80041e8:	4631      	mov	r1, r6
 80041ea:	4628      	mov	r0, r5
 80041ec:	47b8      	blx	r7
 80041ee:	3001      	adds	r0, #1
 80041f0:	f43f af19 	beq.w	8004026 <_printf_float+0xbe>
 80041f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d102      	bne.n	8004202 <_printf_float+0x29a>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07d9      	lsls	r1, r3, #31
 8004200:	d5d8      	bpl.n	80041b4 <_printf_float+0x24c>
 8004202:	ee18 3a10 	vmov	r3, s16
 8004206:	4652      	mov	r2, sl
 8004208:	4631      	mov	r1, r6
 800420a:	4628      	mov	r0, r5
 800420c:	47b8      	blx	r7
 800420e:	3001      	adds	r0, #1
 8004210:	f43f af09 	beq.w	8004026 <_printf_float+0xbe>
 8004214:	f04f 0900 	mov.w	r9, #0
 8004218:	f104 0a1a 	add.w	sl, r4, #26
 800421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421e:	425b      	negs	r3, r3
 8004220:	454b      	cmp	r3, r9
 8004222:	dc01      	bgt.n	8004228 <_printf_float+0x2c0>
 8004224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004226:	e792      	b.n	800414e <_printf_float+0x1e6>
 8004228:	2301      	movs	r3, #1
 800422a:	4652      	mov	r2, sl
 800422c:	4631      	mov	r1, r6
 800422e:	4628      	mov	r0, r5
 8004230:	47b8      	blx	r7
 8004232:	3001      	adds	r0, #1
 8004234:	f43f aef7 	beq.w	8004026 <_printf_float+0xbe>
 8004238:	f109 0901 	add.w	r9, r9, #1
 800423c:	e7ee      	b.n	800421c <_printf_float+0x2b4>
 800423e:	bf00      	nop
 8004240:	7fefffff 	.word	0x7fefffff
 8004244:	08006bc4 	.word	0x08006bc4
 8004248:	08006bc8 	.word	0x08006bc8
 800424c:	08006bcc 	.word	0x08006bcc
 8004250:	08006bd0 	.word	0x08006bd0
 8004254:	08006bd4 	.word	0x08006bd4
 8004258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800425c:	429a      	cmp	r2, r3
 800425e:	bfa8      	it	ge
 8004260:	461a      	movge	r2, r3
 8004262:	2a00      	cmp	r2, #0
 8004264:	4691      	mov	r9, r2
 8004266:	dc37      	bgt.n	80042d8 <_printf_float+0x370>
 8004268:	f04f 0b00 	mov.w	fp, #0
 800426c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004270:	f104 021a 	add.w	r2, r4, #26
 8004274:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004276:	9305      	str	r3, [sp, #20]
 8004278:	eba3 0309 	sub.w	r3, r3, r9
 800427c:	455b      	cmp	r3, fp
 800427e:	dc33      	bgt.n	80042e8 <_printf_float+0x380>
 8004280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004284:	429a      	cmp	r2, r3
 8004286:	db3b      	blt.n	8004300 <_printf_float+0x398>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	07da      	lsls	r2, r3, #31
 800428c:	d438      	bmi.n	8004300 <_printf_float+0x398>
 800428e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004292:	eba2 0903 	sub.w	r9, r2, r3
 8004296:	9b05      	ldr	r3, [sp, #20]
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	4591      	cmp	r9, r2
 800429c:	bfa8      	it	ge
 800429e:	4691      	movge	r9, r2
 80042a0:	f1b9 0f00 	cmp.w	r9, #0
 80042a4:	dc35      	bgt.n	8004312 <_printf_float+0x3aa>
 80042a6:	f04f 0800 	mov.w	r8, #0
 80042aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ae:	f104 0a1a 	add.w	sl, r4, #26
 80042b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	eba3 0309 	sub.w	r3, r3, r9
 80042bc:	4543      	cmp	r3, r8
 80042be:	f77f af79 	ble.w	80041b4 <_printf_float+0x24c>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4652      	mov	r2, sl
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f aeaa 	beq.w	8004026 <_printf_float+0xbe>
 80042d2:	f108 0801 	add.w	r8, r8, #1
 80042d6:	e7ec      	b.n	80042b2 <_printf_float+0x34a>
 80042d8:	4613      	mov	r3, r2
 80042da:	4631      	mov	r1, r6
 80042dc:	4642      	mov	r2, r8
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	d1c0      	bne.n	8004268 <_printf_float+0x300>
 80042e6:	e69e      	b.n	8004026 <_printf_float+0xbe>
 80042e8:	2301      	movs	r3, #1
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	9205      	str	r2, [sp, #20]
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	f43f ae97 	beq.w	8004026 <_printf_float+0xbe>
 80042f8:	9a05      	ldr	r2, [sp, #20]
 80042fa:	f10b 0b01 	add.w	fp, fp, #1
 80042fe:	e7b9      	b.n	8004274 <_printf_float+0x30c>
 8004300:	ee18 3a10 	vmov	r3, s16
 8004304:	4652      	mov	r2, sl
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	d1be      	bne.n	800428e <_printf_float+0x326>
 8004310:	e689      	b.n	8004026 <_printf_float+0xbe>
 8004312:	9a05      	ldr	r2, [sp, #20]
 8004314:	464b      	mov	r3, r9
 8004316:	4442      	add	r2, r8
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	d1c1      	bne.n	80042a6 <_printf_float+0x33e>
 8004322:	e680      	b.n	8004026 <_printf_float+0xbe>
 8004324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004326:	2a01      	cmp	r2, #1
 8004328:	dc01      	bgt.n	800432e <_printf_float+0x3c6>
 800432a:	07db      	lsls	r3, r3, #31
 800432c:	d53a      	bpl.n	80043a4 <_printf_float+0x43c>
 800432e:	2301      	movs	r3, #1
 8004330:	4642      	mov	r2, r8
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f ae74 	beq.w	8004026 <_printf_float+0xbe>
 800433e:	ee18 3a10 	vmov	r3, s16
 8004342:	4652      	mov	r2, sl
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f ae6b 	beq.w	8004026 <_printf_float+0xbe>
 8004350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004354:	2200      	movs	r2, #0
 8004356:	2300      	movs	r3, #0
 8004358:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800435c:	f7fc fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004360:	b9d8      	cbnz	r0, 800439a <_printf_float+0x432>
 8004362:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004366:	f108 0201 	add.w	r2, r8, #1
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	d10e      	bne.n	8004392 <_printf_float+0x42a>
 8004374:	e657      	b.n	8004026 <_printf_float+0xbe>
 8004376:	2301      	movs	r3, #1
 8004378:	4652      	mov	r2, sl
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f ae50 	beq.w	8004026 <_printf_float+0xbe>
 8004386:	f108 0801 	add.w	r8, r8, #1
 800438a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	4543      	cmp	r3, r8
 8004390:	dcf1      	bgt.n	8004376 <_printf_float+0x40e>
 8004392:	464b      	mov	r3, r9
 8004394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004398:	e6da      	b.n	8004150 <_printf_float+0x1e8>
 800439a:	f04f 0800 	mov.w	r8, #0
 800439e:	f104 0a1a 	add.w	sl, r4, #26
 80043a2:	e7f2      	b.n	800438a <_printf_float+0x422>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4642      	mov	r2, r8
 80043a8:	e7df      	b.n	800436a <_printf_float+0x402>
 80043aa:	2301      	movs	r3, #1
 80043ac:	464a      	mov	r2, r9
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f ae36 	beq.w	8004026 <_printf_float+0xbe>
 80043ba:	f108 0801 	add.w	r8, r8, #1
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043c2:	1a5b      	subs	r3, r3, r1
 80043c4:	4543      	cmp	r3, r8
 80043c6:	dcf0      	bgt.n	80043aa <_printf_float+0x442>
 80043c8:	e6f8      	b.n	80041bc <_printf_float+0x254>
 80043ca:	f04f 0800 	mov.w	r8, #0
 80043ce:	f104 0919 	add.w	r9, r4, #25
 80043d2:	e7f4      	b.n	80043be <_printf_float+0x456>

080043d4 <_printf_common>:
 80043d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	4616      	mov	r6, r2
 80043da:	4699      	mov	r9, r3
 80043dc:	688a      	ldr	r2, [r1, #8]
 80043de:	690b      	ldr	r3, [r1, #16]
 80043e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bfb8      	it	lt
 80043e8:	4613      	movlt	r3, r2
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f0:	4607      	mov	r7, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	b10a      	cbz	r2, 80043fa <_printf_common+0x26>
 80043f6:	3301      	adds	r3, #1
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	0699      	lsls	r1, r3, #26
 80043fe:	bf42      	ittt	mi
 8004400:	6833      	ldrmi	r3, [r6, #0]
 8004402:	3302      	addmi	r3, #2
 8004404:	6033      	strmi	r3, [r6, #0]
 8004406:	6825      	ldr	r5, [r4, #0]
 8004408:	f015 0506 	ands.w	r5, r5, #6
 800440c:	d106      	bne.n	800441c <_printf_common+0x48>
 800440e:	f104 0a19 	add.w	sl, r4, #25
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	6832      	ldr	r2, [r6, #0]
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	42ab      	cmp	r3, r5
 800441a:	dc26      	bgt.n	800446a <_printf_common+0x96>
 800441c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004420:	1e13      	subs	r3, r2, #0
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	bf18      	it	ne
 8004426:	2301      	movne	r3, #1
 8004428:	0692      	lsls	r2, r2, #26
 800442a:	d42b      	bmi.n	8004484 <_printf_common+0xb0>
 800442c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004430:	4649      	mov	r1, r9
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d01e      	beq.n	8004478 <_printf_common+0xa4>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	f003 0306 	and.w	r3, r3, #6
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf02      	ittt	eq
 8004446:	68e5      	ldreq	r5, [r4, #12]
 8004448:	6833      	ldreq	r3, [r6, #0]
 800444a:	1aed      	subeq	r5, r5, r3
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	bf0c      	ite	eq
 8004450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004454:	2500      	movne	r5, #0
 8004456:	4293      	cmp	r3, r2
 8004458:	bfc4      	itt	gt
 800445a:	1a9b      	subgt	r3, r3, r2
 800445c:	18ed      	addgt	r5, r5, r3
 800445e:	2600      	movs	r6, #0
 8004460:	341a      	adds	r4, #26
 8004462:	42b5      	cmp	r5, r6
 8004464:	d11a      	bne.n	800449c <_printf_common+0xc8>
 8004466:	2000      	movs	r0, #0
 8004468:	e008      	b.n	800447c <_printf_common+0xa8>
 800446a:	2301      	movs	r3, #1
 800446c:	4652      	mov	r2, sl
 800446e:	4649      	mov	r1, r9
 8004470:	4638      	mov	r0, r7
 8004472:	47c0      	blx	r8
 8004474:	3001      	adds	r0, #1
 8004476:	d103      	bne.n	8004480 <_printf_common+0xac>
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004480:	3501      	adds	r5, #1
 8004482:	e7c6      	b.n	8004412 <_printf_common+0x3e>
 8004484:	18e1      	adds	r1, r4, r3
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	2030      	movs	r0, #48	; 0x30
 800448a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800448e:	4422      	add	r2, r4
 8004490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004498:	3302      	adds	r3, #2
 800449a:	e7c7      	b.n	800442c <_printf_common+0x58>
 800449c:	2301      	movs	r3, #1
 800449e:	4622      	mov	r2, r4
 80044a0:	4649      	mov	r1, r9
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d0e6      	beq.n	8004478 <_printf_common+0xa4>
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7d9      	b.n	8004462 <_printf_common+0x8e>
	...

080044b0 <_printf_i>:
 80044b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	7e0f      	ldrb	r7, [r1, #24]
 80044b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044b8:	2f78      	cmp	r7, #120	; 0x78
 80044ba:	4691      	mov	r9, r2
 80044bc:	4680      	mov	r8, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	469a      	mov	sl, r3
 80044c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044c6:	d807      	bhi.n	80044d8 <_printf_i+0x28>
 80044c8:	2f62      	cmp	r7, #98	; 0x62
 80044ca:	d80a      	bhi.n	80044e2 <_printf_i+0x32>
 80044cc:	2f00      	cmp	r7, #0
 80044ce:	f000 80d4 	beq.w	800467a <_printf_i+0x1ca>
 80044d2:	2f58      	cmp	r7, #88	; 0x58
 80044d4:	f000 80c0 	beq.w	8004658 <_printf_i+0x1a8>
 80044d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e0:	e03a      	b.n	8004558 <_printf_i+0xa8>
 80044e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044e6:	2b15      	cmp	r3, #21
 80044e8:	d8f6      	bhi.n	80044d8 <_printf_i+0x28>
 80044ea:	a101      	add	r1, pc, #4	; (adr r1, 80044f0 <_printf_i+0x40>)
 80044ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f0:	08004549 	.word	0x08004549
 80044f4:	0800455d 	.word	0x0800455d
 80044f8:	080044d9 	.word	0x080044d9
 80044fc:	080044d9 	.word	0x080044d9
 8004500:	080044d9 	.word	0x080044d9
 8004504:	080044d9 	.word	0x080044d9
 8004508:	0800455d 	.word	0x0800455d
 800450c:	080044d9 	.word	0x080044d9
 8004510:	080044d9 	.word	0x080044d9
 8004514:	080044d9 	.word	0x080044d9
 8004518:	080044d9 	.word	0x080044d9
 800451c:	08004661 	.word	0x08004661
 8004520:	08004589 	.word	0x08004589
 8004524:	0800461b 	.word	0x0800461b
 8004528:	080044d9 	.word	0x080044d9
 800452c:	080044d9 	.word	0x080044d9
 8004530:	08004683 	.word	0x08004683
 8004534:	080044d9 	.word	0x080044d9
 8004538:	08004589 	.word	0x08004589
 800453c:	080044d9 	.word	0x080044d9
 8004540:	080044d9 	.word	0x080044d9
 8004544:	08004623 	.word	0x08004623
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	602a      	str	r2, [r5, #0]
 8004550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004558:	2301      	movs	r3, #1
 800455a:	e09f      	b.n	800469c <_printf_i+0x1ec>
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	0607      	lsls	r7, r0, #24
 8004562:	f103 0104 	add.w	r1, r3, #4
 8004566:	6029      	str	r1, [r5, #0]
 8004568:	d501      	bpl.n	800456e <_printf_i+0xbe>
 800456a:	681e      	ldr	r6, [r3, #0]
 800456c:	e003      	b.n	8004576 <_printf_i+0xc6>
 800456e:	0646      	lsls	r6, r0, #25
 8004570:	d5fb      	bpl.n	800456a <_printf_i+0xba>
 8004572:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004576:	2e00      	cmp	r6, #0
 8004578:	da03      	bge.n	8004582 <_printf_i+0xd2>
 800457a:	232d      	movs	r3, #45	; 0x2d
 800457c:	4276      	negs	r6, r6
 800457e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004582:	485a      	ldr	r0, [pc, #360]	; (80046ec <_printf_i+0x23c>)
 8004584:	230a      	movs	r3, #10
 8004586:	e012      	b.n	80045ae <_printf_i+0xfe>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	1d19      	adds	r1, r3, #4
 800458e:	6029      	str	r1, [r5, #0]
 8004590:	0605      	lsls	r5, r0, #24
 8004592:	d501      	bpl.n	8004598 <_printf_i+0xe8>
 8004594:	681e      	ldr	r6, [r3, #0]
 8004596:	e002      	b.n	800459e <_printf_i+0xee>
 8004598:	0641      	lsls	r1, r0, #25
 800459a:	d5fb      	bpl.n	8004594 <_printf_i+0xe4>
 800459c:	881e      	ldrh	r6, [r3, #0]
 800459e:	4853      	ldr	r0, [pc, #332]	; (80046ec <_printf_i+0x23c>)
 80045a0:	2f6f      	cmp	r7, #111	; 0x6f
 80045a2:	bf0c      	ite	eq
 80045a4:	2308      	moveq	r3, #8
 80045a6:	230a      	movne	r3, #10
 80045a8:	2100      	movs	r1, #0
 80045aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ae:	6865      	ldr	r5, [r4, #4]
 80045b0:	60a5      	str	r5, [r4, #8]
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	bfa2      	ittt	ge
 80045b6:	6821      	ldrge	r1, [r4, #0]
 80045b8:	f021 0104 	bicge.w	r1, r1, #4
 80045bc:	6021      	strge	r1, [r4, #0]
 80045be:	b90e      	cbnz	r6, 80045c4 <_printf_i+0x114>
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	d04b      	beq.n	800465c <_printf_i+0x1ac>
 80045c4:	4615      	mov	r5, r2
 80045c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ca:	fb03 6711 	mls	r7, r3, r1, r6
 80045ce:	5dc7      	ldrb	r7, [r0, r7]
 80045d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045d4:	4637      	mov	r7, r6
 80045d6:	42bb      	cmp	r3, r7
 80045d8:	460e      	mov	r6, r1
 80045da:	d9f4      	bls.n	80045c6 <_printf_i+0x116>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d10b      	bne.n	80045f8 <_printf_i+0x148>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	07de      	lsls	r6, r3, #31
 80045e4:	d508      	bpl.n	80045f8 <_printf_i+0x148>
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	6861      	ldr	r1, [r4, #4]
 80045ea:	4299      	cmp	r1, r3
 80045ec:	bfde      	ittt	le
 80045ee:	2330      	movle	r3, #48	; 0x30
 80045f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045f8:	1b52      	subs	r2, r2, r5
 80045fa:	6122      	str	r2, [r4, #16]
 80045fc:	f8cd a000 	str.w	sl, [sp]
 8004600:	464b      	mov	r3, r9
 8004602:	aa03      	add	r2, sp, #12
 8004604:	4621      	mov	r1, r4
 8004606:	4640      	mov	r0, r8
 8004608:	f7ff fee4 	bl	80043d4 <_printf_common>
 800460c:	3001      	adds	r0, #1
 800460e:	d14a      	bne.n	80046a6 <_printf_i+0x1f6>
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	b004      	add	sp, #16
 8004616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f043 0320 	orr.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	4833      	ldr	r0, [pc, #204]	; (80046f0 <_printf_i+0x240>)
 8004624:	2778      	movs	r7, #120	; 0x78
 8004626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	6829      	ldr	r1, [r5, #0]
 800462e:	061f      	lsls	r7, r3, #24
 8004630:	f851 6b04 	ldr.w	r6, [r1], #4
 8004634:	d402      	bmi.n	800463c <_printf_i+0x18c>
 8004636:	065f      	lsls	r7, r3, #25
 8004638:	bf48      	it	mi
 800463a:	b2b6      	uxthmi	r6, r6
 800463c:	07df      	lsls	r7, r3, #31
 800463e:	bf48      	it	mi
 8004640:	f043 0320 	orrmi.w	r3, r3, #32
 8004644:	6029      	str	r1, [r5, #0]
 8004646:	bf48      	it	mi
 8004648:	6023      	strmi	r3, [r4, #0]
 800464a:	b91e      	cbnz	r6, 8004654 <_printf_i+0x1a4>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	f023 0320 	bic.w	r3, r3, #32
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	2310      	movs	r3, #16
 8004656:	e7a7      	b.n	80045a8 <_printf_i+0xf8>
 8004658:	4824      	ldr	r0, [pc, #144]	; (80046ec <_printf_i+0x23c>)
 800465a:	e7e4      	b.n	8004626 <_printf_i+0x176>
 800465c:	4615      	mov	r5, r2
 800465e:	e7bd      	b.n	80045dc <_printf_i+0x12c>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	6826      	ldr	r6, [r4, #0]
 8004664:	6961      	ldr	r1, [r4, #20]
 8004666:	1d18      	adds	r0, r3, #4
 8004668:	6028      	str	r0, [r5, #0]
 800466a:	0635      	lsls	r5, r6, #24
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	d501      	bpl.n	8004674 <_printf_i+0x1c4>
 8004670:	6019      	str	r1, [r3, #0]
 8004672:	e002      	b.n	800467a <_printf_i+0x1ca>
 8004674:	0670      	lsls	r0, r6, #25
 8004676:	d5fb      	bpl.n	8004670 <_printf_i+0x1c0>
 8004678:	8019      	strh	r1, [r3, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	4615      	mov	r5, r2
 8004680:	e7bc      	b.n	80045fc <_printf_i+0x14c>
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	602a      	str	r2, [r5, #0]
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	6862      	ldr	r2, [r4, #4]
 800468c:	2100      	movs	r1, #0
 800468e:	4628      	mov	r0, r5
 8004690:	f7fb fd9e 	bl	80001d0 <memchr>
 8004694:	b108      	cbz	r0, 800469a <_printf_i+0x1ea>
 8004696:	1b40      	subs	r0, r0, r5
 8004698:	6060      	str	r0, [r4, #4]
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	2300      	movs	r3, #0
 80046a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a4:	e7aa      	b.n	80045fc <_printf_i+0x14c>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	462a      	mov	r2, r5
 80046aa:	4649      	mov	r1, r9
 80046ac:	4640      	mov	r0, r8
 80046ae:	47d0      	blx	sl
 80046b0:	3001      	adds	r0, #1
 80046b2:	d0ad      	beq.n	8004610 <_printf_i+0x160>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	079b      	lsls	r3, r3, #30
 80046b8:	d413      	bmi.n	80046e2 <_printf_i+0x232>
 80046ba:	68e0      	ldr	r0, [r4, #12]
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	4298      	cmp	r0, r3
 80046c0:	bfb8      	it	lt
 80046c2:	4618      	movlt	r0, r3
 80046c4:	e7a6      	b.n	8004614 <_printf_i+0x164>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4632      	mov	r2, r6
 80046ca:	4649      	mov	r1, r9
 80046cc:	4640      	mov	r0, r8
 80046ce:	47d0      	blx	sl
 80046d0:	3001      	adds	r0, #1
 80046d2:	d09d      	beq.n	8004610 <_printf_i+0x160>
 80046d4:	3501      	adds	r5, #1
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	9903      	ldr	r1, [sp, #12]
 80046da:	1a5b      	subs	r3, r3, r1
 80046dc:	42ab      	cmp	r3, r5
 80046de:	dcf2      	bgt.n	80046c6 <_printf_i+0x216>
 80046e0:	e7eb      	b.n	80046ba <_printf_i+0x20a>
 80046e2:	2500      	movs	r5, #0
 80046e4:	f104 0619 	add.w	r6, r4, #25
 80046e8:	e7f5      	b.n	80046d6 <_printf_i+0x226>
 80046ea:	bf00      	nop
 80046ec:	08006bd6 	.word	0x08006bd6
 80046f0:	08006be7 	.word	0x08006be7

080046f4 <std>:
 80046f4:	2300      	movs	r3, #0
 80046f6:	b510      	push	{r4, lr}
 80046f8:	4604      	mov	r4, r0
 80046fa:	e9c0 3300 	strd	r3, r3, [r0]
 80046fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004702:	6083      	str	r3, [r0, #8]
 8004704:	8181      	strh	r1, [r0, #12]
 8004706:	6643      	str	r3, [r0, #100]	; 0x64
 8004708:	81c2      	strh	r2, [r0, #14]
 800470a:	6183      	str	r3, [r0, #24]
 800470c:	4619      	mov	r1, r3
 800470e:	2208      	movs	r2, #8
 8004710:	305c      	adds	r0, #92	; 0x5c
 8004712:	f000 f914 	bl	800493e <memset>
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <std+0x58>)
 8004718:	6263      	str	r3, [r4, #36]	; 0x24
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <std+0x5c>)
 800471c:	62a3      	str	r3, [r4, #40]	; 0x28
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <std+0x60>)
 8004720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <std+0x64>)
 8004724:	6323      	str	r3, [r4, #48]	; 0x30
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <std+0x68>)
 8004728:	6224      	str	r4, [r4, #32]
 800472a:	429c      	cmp	r4, r3
 800472c:	d006      	beq.n	800473c <std+0x48>
 800472e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004732:	4294      	cmp	r4, r2
 8004734:	d002      	beq.n	800473c <std+0x48>
 8004736:	33d0      	adds	r3, #208	; 0xd0
 8004738:	429c      	cmp	r4, r3
 800473a:	d105      	bne.n	8004748 <std+0x54>
 800473c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004744:	f000 b978 	b.w	8004a38 <__retarget_lock_init_recursive>
 8004748:	bd10      	pop	{r4, pc}
 800474a:	bf00      	nop
 800474c:	080048b9 	.word	0x080048b9
 8004750:	080048db 	.word	0x080048db
 8004754:	08004913 	.word	0x08004913
 8004758:	08004937 	.word	0x08004937
 800475c:	2000036c 	.word	0x2000036c

08004760 <stdio_exit_handler>:
 8004760:	4a02      	ldr	r2, [pc, #8]	; (800476c <stdio_exit_handler+0xc>)
 8004762:	4903      	ldr	r1, [pc, #12]	; (8004770 <stdio_exit_handler+0x10>)
 8004764:	4803      	ldr	r0, [pc, #12]	; (8004774 <stdio_exit_handler+0x14>)
 8004766:	f000 b869 	b.w	800483c <_fwalk_sglue>
 800476a:	bf00      	nop
 800476c:	2000008c 	.word	0x2000008c
 8004770:	080063e9 	.word	0x080063e9
 8004774:	20000098 	.word	0x20000098

08004778 <cleanup_stdio>:
 8004778:	6841      	ldr	r1, [r0, #4]
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <cleanup_stdio+0x34>)
 800477c:	4299      	cmp	r1, r3
 800477e:	b510      	push	{r4, lr}
 8004780:	4604      	mov	r4, r0
 8004782:	d001      	beq.n	8004788 <cleanup_stdio+0x10>
 8004784:	f001 fe30 	bl	80063e8 <_fflush_r>
 8004788:	68a1      	ldr	r1, [r4, #8]
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <cleanup_stdio+0x38>)
 800478c:	4299      	cmp	r1, r3
 800478e:	d002      	beq.n	8004796 <cleanup_stdio+0x1e>
 8004790:	4620      	mov	r0, r4
 8004792:	f001 fe29 	bl	80063e8 <_fflush_r>
 8004796:	68e1      	ldr	r1, [r4, #12]
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <cleanup_stdio+0x3c>)
 800479a:	4299      	cmp	r1, r3
 800479c:	d004      	beq.n	80047a8 <cleanup_stdio+0x30>
 800479e:	4620      	mov	r0, r4
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a4:	f001 be20 	b.w	80063e8 <_fflush_r>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	2000036c 	.word	0x2000036c
 80047b0:	200003d4 	.word	0x200003d4
 80047b4:	2000043c 	.word	0x2000043c

080047b8 <global_stdio_init.part.0>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <global_stdio_init.part.0+0x30>)
 80047bc:	4c0b      	ldr	r4, [pc, #44]	; (80047ec <global_stdio_init.part.0+0x34>)
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <global_stdio_init.part.0+0x38>)
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	4620      	mov	r0, r4
 80047c4:	2200      	movs	r2, #0
 80047c6:	2104      	movs	r1, #4
 80047c8:	f7ff ff94 	bl	80046f4 <std>
 80047cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047d0:	2201      	movs	r2, #1
 80047d2:	2109      	movs	r1, #9
 80047d4:	f7ff ff8e 	bl	80046f4 <std>
 80047d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047dc:	2202      	movs	r2, #2
 80047de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e2:	2112      	movs	r1, #18
 80047e4:	f7ff bf86 	b.w	80046f4 <std>
 80047e8:	200004a4 	.word	0x200004a4
 80047ec:	2000036c 	.word	0x2000036c
 80047f0:	08004761 	.word	0x08004761

080047f4 <__sfp_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sfp_lock_acquire+0x8>)
 80047f6:	f000 b920 	b.w	8004a3a <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200004ad 	.word	0x200004ad

08004800 <__sfp_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sfp_lock_release+0x8>)
 8004802:	f000 b91b 	b.w	8004a3c <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200004ad 	.word	0x200004ad

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sfp_lock_acquire>
 8004814:	6a23      	ldr	r3, [r4, #32]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sfp_lock_release>
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <__sinit+0x28>)
 8004822:	6223      	str	r3, [r4, #32]
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <__sinit+0x2c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f5      	bne.n	8004818 <__sinit+0xc>
 800482c:	f7ff ffc4 	bl	80047b8 <global_stdio_init.part.0>
 8004830:	e7f2      	b.n	8004818 <__sinit+0xc>
 8004832:	bf00      	nop
 8004834:	08004779 	.word	0x08004779
 8004838:	200004a4 	.word	0x200004a4

0800483c <_fwalk_sglue>:
 800483c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004840:	4607      	mov	r7, r0
 8004842:	4688      	mov	r8, r1
 8004844:	4614      	mov	r4, r2
 8004846:	2600      	movs	r6, #0
 8004848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800484c:	f1b9 0901 	subs.w	r9, r9, #1
 8004850:	d505      	bpl.n	800485e <_fwalk_sglue+0x22>
 8004852:	6824      	ldr	r4, [r4, #0]
 8004854:	2c00      	cmp	r4, #0
 8004856:	d1f7      	bne.n	8004848 <_fwalk_sglue+0xc>
 8004858:	4630      	mov	r0, r6
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485e:	89ab      	ldrh	r3, [r5, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d907      	bls.n	8004874 <_fwalk_sglue+0x38>
 8004864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004868:	3301      	adds	r3, #1
 800486a:	d003      	beq.n	8004874 <_fwalk_sglue+0x38>
 800486c:	4629      	mov	r1, r5
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	4306      	orrs	r6, r0
 8004874:	3568      	adds	r5, #104	; 0x68
 8004876:	e7e9      	b.n	800484c <_fwalk_sglue+0x10>

08004878 <siprintf>:
 8004878:	b40e      	push	{r1, r2, r3}
 800487a:	b500      	push	{lr}
 800487c:	b09c      	sub	sp, #112	; 0x70
 800487e:	ab1d      	add	r3, sp, #116	; 0x74
 8004880:	9002      	str	r0, [sp, #8]
 8004882:	9006      	str	r0, [sp, #24]
 8004884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004888:	4809      	ldr	r0, [pc, #36]	; (80048b0 <siprintf+0x38>)
 800488a:	9107      	str	r1, [sp, #28]
 800488c:	9104      	str	r1, [sp, #16]
 800488e:	4909      	ldr	r1, [pc, #36]	; (80048b4 <siprintf+0x3c>)
 8004890:	f853 2b04 	ldr.w	r2, [r3], #4
 8004894:	9105      	str	r1, [sp, #20]
 8004896:	6800      	ldr	r0, [r0, #0]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	a902      	add	r1, sp, #8
 800489c:	f001 fc20 	bl	80060e0 <_svfiprintf_r>
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	b01c      	add	sp, #112	; 0x70
 80048a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ac:	b003      	add	sp, #12
 80048ae:	4770      	bx	lr
 80048b0:	200000e4 	.word	0x200000e4
 80048b4:	ffff0208 	.word	0xffff0208

080048b8 <__sread>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	f000 f86c 	bl	800499c <_read_r>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	bfab      	itete	ge
 80048c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ca:	89a3      	ldrhlt	r3, [r4, #12]
 80048cc:	181b      	addge	r3, r3, r0
 80048ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048d2:	bfac      	ite	ge
 80048d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048d6:	81a3      	strhlt	r3, [r4, #12]
 80048d8:	bd10      	pop	{r4, pc}

080048da <__swrite>:
 80048da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	461f      	mov	r7, r3
 80048e0:	898b      	ldrh	r3, [r1, #12]
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	4605      	mov	r5, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4616      	mov	r6, r2
 80048ea:	d505      	bpl.n	80048f8 <__swrite+0x1e>
 80048ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f0:	2302      	movs	r3, #2
 80048f2:	2200      	movs	r2, #0
 80048f4:	f000 f840 	bl	8004978 <_lseek_r>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	4632      	mov	r2, r6
 8004906:	463b      	mov	r3, r7
 8004908:	4628      	mov	r0, r5
 800490a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800490e:	f000 b857 	b.w	80049c0 <_write_r>

08004912 <__sseek>:
 8004912:	b510      	push	{r4, lr}
 8004914:	460c      	mov	r4, r1
 8004916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491a:	f000 f82d 	bl	8004978 <_lseek_r>
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	bf15      	itete	ne
 8004924:	6560      	strne	r0, [r4, #84]	; 0x54
 8004926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800492a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800492e:	81a3      	strheq	r3, [r4, #12]
 8004930:	bf18      	it	ne
 8004932:	81a3      	strhne	r3, [r4, #12]
 8004934:	bd10      	pop	{r4, pc}

08004936 <__sclose>:
 8004936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493a:	f000 b80d 	b.w	8004958 <_close_r>

0800493e <memset>:
 800493e:	4402      	add	r2, r0
 8004940:	4603      	mov	r3, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	d100      	bne.n	8004948 <memset+0xa>
 8004946:	4770      	bx	lr
 8004948:	f803 1b01 	strb.w	r1, [r3], #1
 800494c:	e7f9      	b.n	8004942 <memset+0x4>
	...

08004950 <_localeconv_r>:
 8004950:	4800      	ldr	r0, [pc, #0]	; (8004954 <_localeconv_r+0x4>)
 8004952:	4770      	bx	lr
 8004954:	200001d8 	.word	0x200001d8

08004958 <_close_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d06      	ldr	r5, [pc, #24]	; (8004974 <_close_r+0x1c>)
 800495c:	2300      	movs	r3, #0
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	f7fc fcc7 	bl	80012f6 <_close>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_close_r+0x1a>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_close_r+0x1a>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	200004a8 	.word	0x200004a8

08004978 <_lseek_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d07      	ldr	r5, [pc, #28]	; (8004998 <_lseek_r+0x20>)
 800497c:	4604      	mov	r4, r0
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	2200      	movs	r2, #0
 8004984:	602a      	str	r2, [r5, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f7fc fcdc 	bl	8001344 <_lseek>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_lseek_r+0x1e>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_lseek_r+0x1e>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	200004a8 	.word	0x200004a8

0800499c <_read_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d07      	ldr	r5, [pc, #28]	; (80049bc <_read_r+0x20>)
 80049a0:	4604      	mov	r4, r0
 80049a2:	4608      	mov	r0, r1
 80049a4:	4611      	mov	r1, r2
 80049a6:	2200      	movs	r2, #0
 80049a8:	602a      	str	r2, [r5, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f7fc fc6a 	bl	8001284 <_read>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_read_r+0x1e>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_read_r+0x1e>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	200004a8 	.word	0x200004a8

080049c0 <_write_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	; (80049e0 <_write_r+0x20>)
 80049c4:	4604      	mov	r4, r0
 80049c6:	4608      	mov	r0, r1
 80049c8:	4611      	mov	r1, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	602a      	str	r2, [r5, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7fc fc75 	bl	80012be <_write>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_write_r+0x1e>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_write_r+0x1e>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	200004a8 	.word	0x200004a8

080049e4 <__errno>:
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <__errno+0x8>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	200000e4 	.word	0x200000e4

080049f0 <__libc_init_array>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4d0d      	ldr	r5, [pc, #52]	; (8004a28 <__libc_init_array+0x38>)
 80049f4:	4c0d      	ldr	r4, [pc, #52]	; (8004a2c <__libc_init_array+0x3c>)
 80049f6:	1b64      	subs	r4, r4, r5
 80049f8:	10a4      	asrs	r4, r4, #2
 80049fa:	2600      	movs	r6, #0
 80049fc:	42a6      	cmp	r6, r4
 80049fe:	d109      	bne.n	8004a14 <__libc_init_array+0x24>
 8004a00:	4d0b      	ldr	r5, [pc, #44]	; (8004a30 <__libc_init_array+0x40>)
 8004a02:	4c0c      	ldr	r4, [pc, #48]	; (8004a34 <__libc_init_array+0x44>)
 8004a04:	f002 f894 	bl	8006b30 <_init>
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	42a6      	cmp	r6, r4
 8004a10:	d105      	bne.n	8004a1e <__libc_init_array+0x2e>
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a18:	4798      	blx	r3
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	e7ee      	b.n	80049fc <__libc_init_array+0xc>
 8004a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a22:	4798      	blx	r3
 8004a24:	3601      	adds	r6, #1
 8004a26:	e7f2      	b.n	8004a0e <__libc_init_array+0x1e>
 8004a28:	08006f34 	.word	0x08006f34
 8004a2c:	08006f34 	.word	0x08006f34
 8004a30:	08006f34 	.word	0x08006f34
 8004a34:	08006f38 	.word	0x08006f38

08004a38 <__retarget_lock_init_recursive>:
 8004a38:	4770      	bx	lr

08004a3a <__retarget_lock_acquire_recursive>:
 8004a3a:	4770      	bx	lr

08004a3c <__retarget_lock_release_recursive>:
 8004a3c:	4770      	bx	lr

08004a3e <quorem>:
 8004a3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a42:	6903      	ldr	r3, [r0, #16]
 8004a44:	690c      	ldr	r4, [r1, #16]
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	4607      	mov	r7, r0
 8004a4a:	db7e      	blt.n	8004b4a <quorem+0x10c>
 8004a4c:	3c01      	subs	r4, #1
 8004a4e:	f101 0814 	add.w	r8, r1, #20
 8004a52:	f100 0514 	add.w	r5, r0, #20
 8004a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a64:	3301      	adds	r3, #1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a74:	d331      	bcc.n	8004ada <quorem+0x9c>
 8004a76:	f04f 0e00 	mov.w	lr, #0
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	46ac      	mov	ip, r5
 8004a7e:	46f2      	mov	sl, lr
 8004a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a84:	b293      	uxth	r3, r2
 8004a86:	fb06 e303 	mla	r3, r6, r3, lr
 8004a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a8e:	0c1a      	lsrs	r2, r3, #16
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	ebaa 0303 	sub.w	r3, sl, r3
 8004a96:	f8dc a000 	ldr.w	sl, [ip]
 8004a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8004a9e:	fb06 220e 	mla	r2, r6, lr, r2
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	9b00      	ldr	r3, [sp, #0]
 8004aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ab4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ab8:	4581      	cmp	r9, r0
 8004aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004abe:	f84c 3b04 	str.w	r3, [ip], #4
 8004ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ac6:	d2db      	bcs.n	8004a80 <quorem+0x42>
 8004ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004acc:	b92b      	cbnz	r3, 8004ada <quorem+0x9c>
 8004ace:	9b01      	ldr	r3, [sp, #4]
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	d32c      	bcc.n	8004b32 <quorem+0xf4>
 8004ad8:	613c      	str	r4, [r7, #16]
 8004ada:	4638      	mov	r0, r7
 8004adc:	f001 f9a6 	bl	8005e2c <__mcmp>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	db22      	blt.n	8004b2a <quorem+0xec>
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f858 2b04 	ldr.w	r2, [r8], #4
 8004aee:	f8d1 c000 	ldr.w	ip, [r1]
 8004af2:	b293      	uxth	r3, r2
 8004af4:	1ac3      	subs	r3, r0, r3
 8004af6:	0c12      	lsrs	r2, r2, #16
 8004af8:	fa13 f38c 	uxtah	r3, r3, ip
 8004afc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b0a:	45c1      	cmp	r9, r8
 8004b0c:	f841 3b04 	str.w	r3, [r1], #4
 8004b10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b14:	d2e9      	bcs.n	8004aea <quorem+0xac>
 8004b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b1e:	b922      	cbnz	r2, 8004b2a <quorem+0xec>
 8004b20:	3b04      	subs	r3, #4
 8004b22:	429d      	cmp	r5, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	d30a      	bcc.n	8004b3e <quorem+0x100>
 8004b28:	613c      	str	r4, [r7, #16]
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	b003      	add	sp, #12
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1ce      	bne.n	8004ad8 <quorem+0x9a>
 8004b3a:	3c01      	subs	r4, #1
 8004b3c:	e7c9      	b.n	8004ad2 <quorem+0x94>
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	d1f0      	bne.n	8004b28 <quorem+0xea>
 8004b46:	3c01      	subs	r4, #1
 8004b48:	e7eb      	b.n	8004b22 <quorem+0xe4>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	e7ee      	b.n	8004b2c <quorem+0xee>
	...

08004b50 <_dtoa_r>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ed2d 8b04 	vpush	{d8-d9}
 8004b58:	69c5      	ldr	r5, [r0, #28]
 8004b5a:	b093      	sub	sp, #76	; 0x4c
 8004b5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004b60:	ec57 6b10 	vmov	r6, r7, d0
 8004b64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b68:	9107      	str	r1, [sp, #28]
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	920a      	str	r2, [sp, #40]	; 0x28
 8004b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b70:	b975      	cbnz	r5, 8004b90 <_dtoa_r+0x40>
 8004b72:	2010      	movs	r0, #16
 8004b74:	f000 fe2a 	bl	80057cc <malloc>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	61e0      	str	r0, [r4, #28]
 8004b7c:	b920      	cbnz	r0, 8004b88 <_dtoa_r+0x38>
 8004b7e:	4bae      	ldr	r3, [pc, #696]	; (8004e38 <_dtoa_r+0x2e8>)
 8004b80:	21ef      	movs	r1, #239	; 0xef
 8004b82:	48ae      	ldr	r0, [pc, #696]	; (8004e3c <_dtoa_r+0x2ec>)
 8004b84:	f001 fc90 	bl	80064a8 <__assert_func>
 8004b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b8c:	6005      	str	r5, [r0, #0]
 8004b8e:	60c5      	str	r5, [r0, #12]
 8004b90:	69e3      	ldr	r3, [r4, #28]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	b151      	cbz	r1, 8004bac <_dtoa_r+0x5c>
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	604a      	str	r2, [r1, #4]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 ff07 	bl	80059b4 <_Bfree>
 8004ba6:	69e3      	ldr	r3, [r4, #28]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	1e3b      	subs	r3, r7, #0
 8004bae:	bfbb      	ittet	lt
 8004bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bb4:	9303      	strlt	r3, [sp, #12]
 8004bb6:	2300      	movge	r3, #0
 8004bb8:	2201      	movlt	r2, #1
 8004bba:	bfac      	ite	ge
 8004bbc:	f8c8 3000 	strge.w	r3, [r8]
 8004bc0:	f8c8 2000 	strlt.w	r2, [r8]
 8004bc4:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <_dtoa_r+0x2f0>)
 8004bc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bca:	ea33 0308 	bics.w	r3, r3, r8
 8004bce:	d11b      	bne.n	8004c08 <_dtoa_r+0xb8>
 8004bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004bdc:	4333      	orrs	r3, r6
 8004bde:	f000 8593 	beq.w	8005708 <_dtoa_r+0xbb8>
 8004be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004be4:	b963      	cbnz	r3, 8004c00 <_dtoa_r+0xb0>
 8004be6:	4b97      	ldr	r3, [pc, #604]	; (8004e44 <_dtoa_r+0x2f4>)
 8004be8:	e027      	b.n	8004c3a <_dtoa_r+0xea>
 8004bea:	4b97      	ldr	r3, [pc, #604]	; (8004e48 <_dtoa_r+0x2f8>)
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	9800      	ldr	r0, [sp, #0]
 8004bf6:	b013      	add	sp, #76	; 0x4c
 8004bf8:	ecbd 8b04 	vpop	{d8-d9}
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c00:	4b90      	ldr	r3, [pc, #576]	; (8004e44 <_dtoa_r+0x2f4>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	3303      	adds	r3, #3
 8004c06:	e7f3      	b.n	8004bf0 <_dtoa_r+0xa0>
 8004c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	ec51 0b17 	vmov	r0, r1, d7
 8004c12:	eeb0 8a47 	vmov.f32	s16, s14
 8004c16:	eef0 8a67 	vmov.f32	s17, s15
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f7fb ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c20:	4681      	mov	r9, r0
 8004c22:	b160      	cbz	r0, 8004c3e <_dtoa_r+0xee>
 8004c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c26:	2301      	movs	r3, #1
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8568 	beq.w	8005702 <_dtoa_r+0xbb2>
 8004c32:	4b86      	ldr	r3, [pc, #536]	; (8004e4c <_dtoa_r+0x2fc>)
 8004c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	e7da      	b.n	8004bf4 <_dtoa_r+0xa4>
 8004c3e:	aa10      	add	r2, sp, #64	; 0x40
 8004c40:	a911      	add	r1, sp, #68	; 0x44
 8004c42:	4620      	mov	r0, r4
 8004c44:	eeb0 0a48 	vmov.f32	s0, s16
 8004c48:	eef0 0a68 	vmov.f32	s1, s17
 8004c4c:	f001 f994 	bl	8005f78 <__d2b>
 8004c50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c54:	4682      	mov	sl, r0
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	d07f      	beq.n	8004d5a <_dtoa_r+0x20a>
 8004c5a:	ee18 3a90 	vmov	r3, s17
 8004c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c66:	ec51 0b18 	vmov	r0, r1, d8
 8004c6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004c76:	4619      	mov	r1, r3
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4b75      	ldr	r3, [pc, #468]	; (8004e50 <_dtoa_r+0x300>)
 8004c7c:	f7fb fb04 	bl	8000288 <__aeabi_dsub>
 8004c80:	a367      	add	r3, pc, #412	; (adr r3, 8004e20 <_dtoa_r+0x2d0>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f7fb fcb7 	bl	80005f8 <__aeabi_dmul>
 8004c8a:	a367      	add	r3, pc, #412	; (adr r3, 8004e28 <_dtoa_r+0x2d8>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb fafc 	bl	800028c <__adddf3>
 8004c94:	4606      	mov	r6, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	460f      	mov	r7, r1
 8004c9a:	f7fb fc43 	bl	8000524 <__aeabi_i2d>
 8004c9e:	a364      	add	r3, pc, #400	; (adr r3, 8004e30 <_dtoa_r+0x2e0>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fca8 	bl	80005f8 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4630      	mov	r0, r6
 8004cae:	4639      	mov	r1, r7
 8004cb0:	f7fb faec 	bl	800028c <__adddf3>
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	f7fb ff4e 	bl	8000b58 <__aeabi_d2iz>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4683      	mov	fp, r0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	f7fb ff09 	bl	8000adc <__aeabi_dcmplt>
 8004cca:	b148      	cbz	r0, 8004ce0 <_dtoa_r+0x190>
 8004ccc:	4658      	mov	r0, fp
 8004cce:	f7fb fc29 	bl	8000524 <__aeabi_i2d>
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	f7fb fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cda:	b908      	cbnz	r0, 8004ce0 <_dtoa_r+0x190>
 8004cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ce0:	f1bb 0f16 	cmp.w	fp, #22
 8004ce4:	d857      	bhi.n	8004d96 <_dtoa_r+0x246>
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <_dtoa_r+0x304>)
 8004ce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	ec51 0b18 	vmov	r0, r1, d8
 8004cf4:	f7fb fef2 	bl	8000adc <__aeabi_dcmplt>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d04e      	beq.n	8004d9a <_dtoa_r+0x24a>
 8004cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d00:	2300      	movs	r3, #0
 8004d02:	930c      	str	r3, [sp, #48]	; 0x30
 8004d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d06:	1b5b      	subs	r3, r3, r5
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	bf45      	ittet	mi
 8004d0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d10:	9305      	strmi	r3, [sp, #20]
 8004d12:	2300      	movpl	r3, #0
 8004d14:	2300      	movmi	r3, #0
 8004d16:	9206      	str	r2, [sp, #24]
 8004d18:	bf54      	ite	pl
 8004d1a:	9305      	strpl	r3, [sp, #20]
 8004d1c:	9306      	strmi	r3, [sp, #24]
 8004d1e:	f1bb 0f00 	cmp.w	fp, #0
 8004d22:	db3c      	blt.n	8004d9e <_dtoa_r+0x24e>
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004d2a:	445b      	add	r3, fp
 8004d2c:	9306      	str	r3, [sp, #24]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9308      	str	r3, [sp, #32]
 8004d32:	9b07      	ldr	r3, [sp, #28]
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d868      	bhi.n	8004e0a <_dtoa_r+0x2ba>
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	bfc4      	itt	gt
 8004d3c:	3b04      	subgt	r3, #4
 8004d3e:	9307      	strgt	r3, [sp, #28]
 8004d40:	9b07      	ldr	r3, [sp, #28]
 8004d42:	f1a3 0302 	sub.w	r3, r3, #2
 8004d46:	bfcc      	ite	gt
 8004d48:	2500      	movgt	r5, #0
 8004d4a:	2501      	movle	r5, #1
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	f200 8085 	bhi.w	8004e5c <_dtoa_r+0x30c>
 8004d52:	e8df f003 	tbb	[pc, r3]
 8004d56:	3b2e      	.short	0x3b2e
 8004d58:	5839      	.short	0x5839
 8004d5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d5e:	441d      	add	r5, r3
 8004d60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	bfc1      	itttt	gt
 8004d68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004d74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004d78:	bfd6      	itet	le
 8004d7a:	f1c3 0320 	rsble	r3, r3, #32
 8004d7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d82:	fa06 f003 	lslle.w	r0, r6, r3
 8004d86:	f7fb fbbd 	bl	8000504 <__aeabi_ui2d>
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004d90:	3d01      	subs	r5, #1
 8004d92:	920e      	str	r2, [sp, #56]	; 0x38
 8004d94:	e76f      	b.n	8004c76 <_dtoa_r+0x126>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e7b3      	b.n	8004d02 <_dtoa_r+0x1b2>
 8004d9a:	900c      	str	r0, [sp, #48]	; 0x30
 8004d9c:	e7b2      	b.n	8004d04 <_dtoa_r+0x1b4>
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	eba3 030b 	sub.w	r3, r3, fp
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	f1cb 0300 	rsb	r3, fp, #0
 8004daa:	9308      	str	r3, [sp, #32]
 8004dac:	2300      	movs	r3, #0
 8004dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db0:	e7bf      	b.n	8004d32 <_dtoa_r+0x1e2>
 8004db2:	2300      	movs	r3, #0
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dc52      	bgt.n	8004e62 <_dtoa_r+0x312>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	9304      	str	r3, [sp, #16]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8004dc6:	e00b      	b.n	8004de0 <_dtoa_r+0x290>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e7f3      	b.n	8004db4 <_dtoa_r+0x264>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd2:	445b      	add	r3, fp
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	bfb8      	it	lt
 8004dde:	2301      	movlt	r3, #1
 8004de0:	69e0      	ldr	r0, [r4, #28]
 8004de2:	2100      	movs	r1, #0
 8004de4:	2204      	movs	r2, #4
 8004de6:	f102 0614 	add.w	r6, r2, #20
 8004dea:	429e      	cmp	r6, r3
 8004dec:	d93d      	bls.n	8004e6a <_dtoa_r+0x31a>
 8004dee:	6041      	str	r1, [r0, #4]
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fd9f 	bl	8005934 <_Balloc>
 8004df6:	9000      	str	r0, [sp, #0]
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d139      	bne.n	8004e70 <_dtoa_r+0x320>
 8004dfc:	4b16      	ldr	r3, [pc, #88]	; (8004e58 <_dtoa_r+0x308>)
 8004dfe:	4602      	mov	r2, r0
 8004e00:	f240 11af 	movw	r1, #431	; 0x1af
 8004e04:	e6bd      	b.n	8004b82 <_dtoa_r+0x32>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e7e1      	b.n	8004dce <_dtoa_r+0x27e>
 8004e0a:	2501      	movs	r5, #1
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	9509      	str	r5, [sp, #36]	; 0x24
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2312      	movs	r3, #18
 8004e1e:	e7d1      	b.n	8004dc4 <_dtoa_r+0x274>
 8004e20:	636f4361 	.word	0x636f4361
 8004e24:	3fd287a7 	.word	0x3fd287a7
 8004e28:	8b60c8b3 	.word	0x8b60c8b3
 8004e2c:	3fc68a28 	.word	0x3fc68a28
 8004e30:	509f79fb 	.word	0x509f79fb
 8004e34:	3fd34413 	.word	0x3fd34413
 8004e38:	08006c05 	.word	0x08006c05
 8004e3c:	08006c1c 	.word	0x08006c1c
 8004e40:	7ff00000 	.word	0x7ff00000
 8004e44:	08006c01 	.word	0x08006c01
 8004e48:	08006bf8 	.word	0x08006bf8
 8004e4c:	08006bd5 	.word	0x08006bd5
 8004e50:	3ff80000 	.word	0x3ff80000
 8004e54:	08006d08 	.word	0x08006d08
 8004e58:	08006c74 	.word	0x08006c74
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e60:	e7d7      	b.n	8004e12 <_dtoa_r+0x2c2>
 8004e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	e7ba      	b.n	8004de0 <_dtoa_r+0x290>
 8004e6a:	3101      	adds	r1, #1
 8004e6c:	0052      	lsls	r2, r2, #1
 8004e6e:	e7ba      	b.n	8004de6 <_dtoa_r+0x296>
 8004e70:	69e3      	ldr	r3, [r4, #28]
 8004e72:	9a00      	ldr	r2, [sp, #0]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	2b0e      	cmp	r3, #14
 8004e7a:	f200 80a8 	bhi.w	8004fce <_dtoa_r+0x47e>
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	f000 80a5 	beq.w	8004fce <_dtoa_r+0x47e>
 8004e84:	f1bb 0f00 	cmp.w	fp, #0
 8004e88:	dd38      	ble.n	8004efc <_dtoa_r+0x3ac>
 8004e8a:	4bc0      	ldr	r3, [pc, #768]	; (800518c <_dtoa_r+0x63c>)
 8004e8c:	f00b 020f 	and.w	r2, fp, #15
 8004e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004e98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004ea0:	d019      	beq.n	8004ed6 <_dtoa_r+0x386>
 8004ea2:	4bbb      	ldr	r3, [pc, #748]	; (8005190 <_dtoa_r+0x640>)
 8004ea4:	ec51 0b18 	vmov	r0, r1, d8
 8004ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eac:	f7fb fcce 	bl	800084c <__aeabi_ddiv>
 8004eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb4:	f008 080f 	and.w	r8, r8, #15
 8004eb8:	2503      	movs	r5, #3
 8004eba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005190 <_dtoa_r+0x640>
 8004ebe:	f1b8 0f00 	cmp.w	r8, #0
 8004ec2:	d10a      	bne.n	8004eda <_dtoa_r+0x38a>
 8004ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	463b      	mov	r3, r7
 8004ecc:	f7fb fcbe 	bl	800084c <__aeabi_ddiv>
 8004ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed4:	e02b      	b.n	8004f2e <_dtoa_r+0x3de>
 8004ed6:	2502      	movs	r5, #2
 8004ed8:	e7ef      	b.n	8004eba <_dtoa_r+0x36a>
 8004eda:	f018 0f01 	tst.w	r8, #1
 8004ede:	d008      	beq.n	8004ef2 <_dtoa_r+0x3a2>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004ee8:	f7fb fb86 	bl	80005f8 <__aeabi_dmul>
 8004eec:	3501      	adds	r5, #1
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460f      	mov	r7, r1
 8004ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004ef6:	f109 0908 	add.w	r9, r9, #8
 8004efa:	e7e0      	b.n	8004ebe <_dtoa_r+0x36e>
 8004efc:	f000 809f 	beq.w	800503e <_dtoa_r+0x4ee>
 8004f00:	f1cb 0600 	rsb	r6, fp, #0
 8004f04:	4ba1      	ldr	r3, [pc, #644]	; (800518c <_dtoa_r+0x63c>)
 8004f06:	4fa2      	ldr	r7, [pc, #648]	; (8005190 <_dtoa_r+0x640>)
 8004f08:	f006 020f 	and.w	r2, r6, #15
 8004f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	ec51 0b18 	vmov	r0, r1, d8
 8004f18:	f7fb fb6e 	bl	80005f8 <__aeabi_dmul>
 8004f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f20:	1136      	asrs	r6, r6, #4
 8004f22:	2300      	movs	r3, #0
 8004f24:	2502      	movs	r5, #2
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	d17e      	bne.n	8005028 <_dtoa_r+0x4d8>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1d0      	bne.n	8004ed0 <_dtoa_r+0x380>
 8004f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8084 	beq.w	8005042 <_dtoa_r+0x4f2>
 8004f3a:	4b96      	ldr	r3, [pc, #600]	; (8005194 <_dtoa_r+0x644>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4649      	mov	r1, r9
 8004f42:	f7fb fdcb 	bl	8000adc <__aeabi_dcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d07b      	beq.n	8005042 <_dtoa_r+0x4f2>
 8004f4a:	9b04      	ldr	r3, [sp, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d078      	beq.n	8005042 <_dtoa_r+0x4f2>
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dd39      	ble.n	8004fca <_dtoa_r+0x47a>
 8004f56:	4b90      	ldr	r3, [pc, #576]	; (8005198 <_dtoa_r+0x648>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	f7fb fb4b 	bl	80005f8 <__aeabi_dmul>
 8004f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f66:	9e01      	ldr	r6, [sp, #4]
 8004f68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7fb fad6 	bl	8000524 <__aeabi_i2d>
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f7fb fb3c 	bl	80005f8 <__aeabi_dmul>
 8004f80:	4b86      	ldr	r3, [pc, #536]	; (800519c <_dtoa_r+0x64c>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	f7fb f982 	bl	800028c <__adddf3>
 8004f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d158      	bne.n	8005048 <_dtoa_r+0x4f8>
 8004f96:	4b82      	ldr	r3, [pc, #520]	; (80051a0 <_dtoa_r+0x650>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb f973 	bl	8000288 <__aeabi_dsub>
 8004fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	4689      	mov	r9, r1
 8004faa:	f7fb fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f040 8296 	bne.w	80054e0 <_dtoa_r+0x990>
 8004fb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004fb8:	4640      	mov	r0, r8
 8004fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	f7fb fd8c 	bl	8000adc <__aeabi_dcmplt>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f040 8289 	bne.w	80054dc <_dtoa_r+0x98c>
 8004fca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f2c0 814e 	blt.w	8005272 <_dtoa_r+0x722>
 8004fd6:	f1bb 0f0e 	cmp.w	fp, #14
 8004fda:	f300 814a 	bgt.w	8005272 <_dtoa_r+0x722>
 8004fde:	4b6b      	ldr	r3, [pc, #428]	; (800518c <_dtoa_r+0x63c>)
 8004fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f280 80dc 	bge.w	80051a8 <_dtoa_r+0x658>
 8004ff0:	9b04      	ldr	r3, [sp, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f300 80d8 	bgt.w	80051a8 <_dtoa_r+0x658>
 8004ff8:	f040 826f 	bne.w	80054da <_dtoa_r+0x98a>
 8004ffc:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <_dtoa_r+0x650>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	4640      	mov	r0, r8
 8005002:	4649      	mov	r1, r9
 8005004:	f7fb faf8 	bl	80005f8 <__aeabi_dmul>
 8005008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800500c:	f7fb fd7a 	bl	8000b04 <__aeabi_dcmpge>
 8005010:	9e04      	ldr	r6, [sp, #16]
 8005012:	4637      	mov	r7, r6
 8005014:	2800      	cmp	r0, #0
 8005016:	f040 8245 	bne.w	80054a4 <_dtoa_r+0x954>
 800501a:	9d00      	ldr	r5, [sp, #0]
 800501c:	2331      	movs	r3, #49	; 0x31
 800501e:	f805 3b01 	strb.w	r3, [r5], #1
 8005022:	f10b 0b01 	add.w	fp, fp, #1
 8005026:	e241      	b.n	80054ac <_dtoa_r+0x95c>
 8005028:	07f2      	lsls	r2, r6, #31
 800502a:	d505      	bpl.n	8005038 <_dtoa_r+0x4e8>
 800502c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005030:	f7fb fae2 	bl	80005f8 <__aeabi_dmul>
 8005034:	3501      	adds	r5, #1
 8005036:	2301      	movs	r3, #1
 8005038:	1076      	asrs	r6, r6, #1
 800503a:	3708      	adds	r7, #8
 800503c:	e773      	b.n	8004f26 <_dtoa_r+0x3d6>
 800503e:	2502      	movs	r5, #2
 8005040:	e775      	b.n	8004f2e <_dtoa_r+0x3de>
 8005042:	9e04      	ldr	r6, [sp, #16]
 8005044:	465f      	mov	r7, fp
 8005046:	e792      	b.n	8004f6e <_dtoa_r+0x41e>
 8005048:	9900      	ldr	r1, [sp, #0]
 800504a:	4b50      	ldr	r3, [pc, #320]	; (800518c <_dtoa_r+0x63c>)
 800504c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005050:	4431      	add	r1, r6
 8005052:	9102      	str	r1, [sp, #8]
 8005054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005056:	eeb0 9a47 	vmov.f32	s18, s14
 800505a:	eef0 9a67 	vmov.f32	s19, s15
 800505e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005066:	2900      	cmp	r1, #0
 8005068:	d044      	beq.n	80050f4 <_dtoa_r+0x5a4>
 800506a:	494e      	ldr	r1, [pc, #312]	; (80051a4 <_dtoa_r+0x654>)
 800506c:	2000      	movs	r0, #0
 800506e:	f7fb fbed 	bl	800084c <__aeabi_ddiv>
 8005072:	ec53 2b19 	vmov	r2, r3, d9
 8005076:	f7fb f907 	bl	8000288 <__aeabi_dsub>
 800507a:	9d00      	ldr	r5, [sp, #0]
 800507c:	ec41 0b19 	vmov	d9, r0, r1
 8005080:	4649      	mov	r1, r9
 8005082:	4640      	mov	r0, r8
 8005084:	f7fb fd68 	bl	8000b58 <__aeabi_d2iz>
 8005088:	4606      	mov	r6, r0
 800508a:	f7fb fa4b 	bl	8000524 <__aeabi_i2d>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f8f7 	bl	8000288 <__aeabi_dsub>
 800509a:	3630      	adds	r6, #48	; 0x30
 800509c:	f805 6b01 	strb.w	r6, [r5], #1
 80050a0:	ec53 2b19 	vmov	r2, r3, d9
 80050a4:	4680      	mov	r8, r0
 80050a6:	4689      	mov	r9, r1
 80050a8:	f7fb fd18 	bl	8000adc <__aeabi_dcmplt>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d164      	bne.n	800517a <_dtoa_r+0x62a>
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	4937      	ldr	r1, [pc, #220]	; (8005194 <_dtoa_r+0x644>)
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7fb f8e6 	bl	8000288 <__aeabi_dsub>
 80050bc:	ec53 2b19 	vmov	r2, r3, d9
 80050c0:	f7fb fd0c 	bl	8000adc <__aeabi_dcmplt>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f040 80b6 	bne.w	8005236 <_dtoa_r+0x6e6>
 80050ca:	9b02      	ldr	r3, [sp, #8]
 80050cc:	429d      	cmp	r5, r3
 80050ce:	f43f af7c 	beq.w	8004fca <_dtoa_r+0x47a>
 80050d2:	4b31      	ldr	r3, [pc, #196]	; (8005198 <_dtoa_r+0x648>)
 80050d4:	ec51 0b19 	vmov	r0, r1, d9
 80050d8:	2200      	movs	r2, #0
 80050da:	f7fb fa8d 	bl	80005f8 <__aeabi_dmul>
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <_dtoa_r+0x648>)
 80050e0:	ec41 0b19 	vmov	d9, r0, r1
 80050e4:	2200      	movs	r2, #0
 80050e6:	4640      	mov	r0, r8
 80050e8:	4649      	mov	r1, r9
 80050ea:	f7fb fa85 	bl	80005f8 <__aeabi_dmul>
 80050ee:	4680      	mov	r8, r0
 80050f0:	4689      	mov	r9, r1
 80050f2:	e7c5      	b.n	8005080 <_dtoa_r+0x530>
 80050f4:	ec51 0b17 	vmov	r0, r1, d7
 80050f8:	f7fb fa7e 	bl	80005f8 <__aeabi_dmul>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	9d00      	ldr	r5, [sp, #0]
 8005100:	930f      	str	r3, [sp, #60]	; 0x3c
 8005102:	ec41 0b19 	vmov	d9, r0, r1
 8005106:	4649      	mov	r1, r9
 8005108:	4640      	mov	r0, r8
 800510a:	f7fb fd25 	bl	8000b58 <__aeabi_d2iz>
 800510e:	4606      	mov	r6, r0
 8005110:	f7fb fa08 	bl	8000524 <__aeabi_i2d>
 8005114:	3630      	adds	r6, #48	; 0x30
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4640      	mov	r0, r8
 800511c:	4649      	mov	r1, r9
 800511e:	f7fb f8b3 	bl	8000288 <__aeabi_dsub>
 8005122:	f805 6b01 	strb.w	r6, [r5], #1
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	429d      	cmp	r5, r3
 800512a:	4680      	mov	r8, r0
 800512c:	4689      	mov	r9, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	d124      	bne.n	800517e <_dtoa_r+0x62e>
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <_dtoa_r+0x654>)
 8005136:	ec51 0b19 	vmov	r0, r1, d9
 800513a:	f7fb f8a7 	bl	800028c <__adddf3>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb fce7 	bl	8000b18 <__aeabi_dcmpgt>
 800514a:	2800      	cmp	r0, #0
 800514c:	d173      	bne.n	8005236 <_dtoa_r+0x6e6>
 800514e:	ec53 2b19 	vmov	r2, r3, d9
 8005152:	4914      	ldr	r1, [pc, #80]	; (80051a4 <_dtoa_r+0x654>)
 8005154:	2000      	movs	r0, #0
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb fcbb 	bl	8000adc <__aeabi_dcmplt>
 8005166:	2800      	cmp	r0, #0
 8005168:	f43f af2f 	beq.w	8004fca <_dtoa_r+0x47a>
 800516c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800516e:	1e6b      	subs	r3, r5, #1
 8005170:	930f      	str	r3, [sp, #60]	; 0x3c
 8005172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005176:	2b30      	cmp	r3, #48	; 0x30
 8005178:	d0f8      	beq.n	800516c <_dtoa_r+0x61c>
 800517a:	46bb      	mov	fp, r7
 800517c:	e04a      	b.n	8005214 <_dtoa_r+0x6c4>
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <_dtoa_r+0x648>)
 8005180:	f7fb fa3a 	bl	80005f8 <__aeabi_dmul>
 8005184:	4680      	mov	r8, r0
 8005186:	4689      	mov	r9, r1
 8005188:	e7bd      	b.n	8005106 <_dtoa_r+0x5b6>
 800518a:	bf00      	nop
 800518c:	08006d08 	.word	0x08006d08
 8005190:	08006ce0 	.word	0x08006ce0
 8005194:	3ff00000 	.word	0x3ff00000
 8005198:	40240000 	.word	0x40240000
 800519c:	401c0000 	.word	0x401c0000
 80051a0:	40140000 	.word	0x40140000
 80051a4:	3fe00000 	.word	0x3fe00000
 80051a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051ac:	9d00      	ldr	r5, [sp, #0]
 80051ae:	4642      	mov	r2, r8
 80051b0:	464b      	mov	r3, r9
 80051b2:	4630      	mov	r0, r6
 80051b4:	4639      	mov	r1, r7
 80051b6:	f7fb fb49 	bl	800084c <__aeabi_ddiv>
 80051ba:	f7fb fccd 	bl	8000b58 <__aeabi_d2iz>
 80051be:	9001      	str	r0, [sp, #4]
 80051c0:	f7fb f9b0 	bl	8000524 <__aeabi_i2d>
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	f7fb fa16 	bl	80005f8 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4630      	mov	r0, r6
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb f858 	bl	8000288 <__aeabi_dsub>
 80051d8:	9e01      	ldr	r6, [sp, #4]
 80051da:	9f04      	ldr	r7, [sp, #16]
 80051dc:	3630      	adds	r6, #48	; 0x30
 80051de:	f805 6b01 	strb.w	r6, [r5], #1
 80051e2:	9e00      	ldr	r6, [sp, #0]
 80051e4:	1bae      	subs	r6, r5, r6
 80051e6:	42b7      	cmp	r7, r6
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	d134      	bne.n	8005258 <_dtoa_r+0x708>
 80051ee:	f7fb f84d 	bl	800028c <__adddf3>
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	4606      	mov	r6, r0
 80051f8:	460f      	mov	r7, r1
 80051fa:	f7fb fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 80051fe:	b9c8      	cbnz	r0, 8005234 <_dtoa_r+0x6e4>
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800520c:	b110      	cbz	r0, 8005214 <_dtoa_r+0x6c4>
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	07db      	lsls	r3, r3, #31
 8005212:	d40f      	bmi.n	8005234 <_dtoa_r+0x6e4>
 8005214:	4651      	mov	r1, sl
 8005216:	4620      	mov	r0, r4
 8005218:	f000 fbcc 	bl	80059b4 <_Bfree>
 800521c:	2300      	movs	r3, #0
 800521e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005220:	702b      	strb	r3, [r5, #0]
 8005222:	f10b 0301 	add.w	r3, fp, #1
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800522a:	2b00      	cmp	r3, #0
 800522c:	f43f ace2 	beq.w	8004bf4 <_dtoa_r+0xa4>
 8005230:	601d      	str	r5, [r3, #0]
 8005232:	e4df      	b.n	8004bf4 <_dtoa_r+0xa4>
 8005234:	465f      	mov	r7, fp
 8005236:	462b      	mov	r3, r5
 8005238:	461d      	mov	r5, r3
 800523a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800523e:	2a39      	cmp	r2, #57	; 0x39
 8005240:	d106      	bne.n	8005250 <_dtoa_r+0x700>
 8005242:	9a00      	ldr	r2, [sp, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1f7      	bne.n	8005238 <_dtoa_r+0x6e8>
 8005248:	9900      	ldr	r1, [sp, #0]
 800524a:	2230      	movs	r2, #48	; 0x30
 800524c:	3701      	adds	r7, #1
 800524e:	700a      	strb	r2, [r1, #0]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	3201      	adds	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e790      	b.n	800517a <_dtoa_r+0x62a>
 8005258:	4ba3      	ldr	r3, [pc, #652]	; (80054e8 <_dtoa_r+0x998>)
 800525a:	2200      	movs	r2, #0
 800525c:	f7fb f9cc 	bl	80005f8 <__aeabi_dmul>
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	4606      	mov	r6, r0
 8005266:	460f      	mov	r7, r1
 8005268:	f7fb fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800526c:	2800      	cmp	r0, #0
 800526e:	d09e      	beq.n	80051ae <_dtoa_r+0x65e>
 8005270:	e7d0      	b.n	8005214 <_dtoa_r+0x6c4>
 8005272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005274:	2a00      	cmp	r2, #0
 8005276:	f000 80ca 	beq.w	800540e <_dtoa_r+0x8be>
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	2a01      	cmp	r2, #1
 800527e:	f300 80ad 	bgt.w	80053dc <_dtoa_r+0x88c>
 8005282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005284:	2a00      	cmp	r2, #0
 8005286:	f000 80a5 	beq.w	80053d4 <_dtoa_r+0x884>
 800528a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800528e:	9e08      	ldr	r6, [sp, #32]
 8005290:	9d05      	ldr	r5, [sp, #20]
 8005292:	9a05      	ldr	r2, [sp, #20]
 8005294:	441a      	add	r2, r3
 8005296:	9205      	str	r2, [sp, #20]
 8005298:	9a06      	ldr	r2, [sp, #24]
 800529a:	2101      	movs	r1, #1
 800529c:	441a      	add	r2, r3
 800529e:	4620      	mov	r0, r4
 80052a0:	9206      	str	r2, [sp, #24]
 80052a2:	f000 fc3d 	bl	8005b20 <__i2b>
 80052a6:	4607      	mov	r7, r0
 80052a8:	b165      	cbz	r5, 80052c4 <_dtoa_r+0x774>
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dd09      	ble.n	80052c4 <_dtoa_r+0x774>
 80052b0:	42ab      	cmp	r3, r5
 80052b2:	9a05      	ldr	r2, [sp, #20]
 80052b4:	bfa8      	it	ge
 80052b6:	462b      	movge	r3, r5
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	9205      	str	r2, [sp, #20]
 80052bc:	9a06      	ldr	r2, [sp, #24]
 80052be:	1aed      	subs	r5, r5, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	9b08      	ldr	r3, [sp, #32]
 80052c6:	b1f3      	cbz	r3, 8005306 <_dtoa_r+0x7b6>
 80052c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a3 	beq.w	8005416 <_dtoa_r+0x8c6>
 80052d0:	2e00      	cmp	r6, #0
 80052d2:	dd10      	ble.n	80052f6 <_dtoa_r+0x7a6>
 80052d4:	4639      	mov	r1, r7
 80052d6:	4632      	mov	r2, r6
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fce1 	bl	8005ca0 <__pow5mult>
 80052de:	4652      	mov	r2, sl
 80052e0:	4601      	mov	r1, r0
 80052e2:	4607      	mov	r7, r0
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fc31 	bl	8005b4c <__multiply>
 80052ea:	4651      	mov	r1, sl
 80052ec:	4680      	mov	r8, r0
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 fb60 	bl	80059b4 <_Bfree>
 80052f4:	46c2      	mov	sl, r8
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	1b9a      	subs	r2, r3, r6
 80052fa:	d004      	beq.n	8005306 <_dtoa_r+0x7b6>
 80052fc:	4651      	mov	r1, sl
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 fcce 	bl	8005ca0 <__pow5mult>
 8005304:	4682      	mov	sl, r0
 8005306:	2101      	movs	r1, #1
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fc09 	bl	8005b20 <__i2b>
 800530e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	4606      	mov	r6, r0
 8005314:	f340 8081 	ble.w	800541a <_dtoa_r+0x8ca>
 8005318:	461a      	mov	r2, r3
 800531a:	4601      	mov	r1, r0
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fcbf 	bl	8005ca0 <__pow5mult>
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	2b01      	cmp	r3, #1
 8005326:	4606      	mov	r6, r0
 8005328:	dd7a      	ble.n	8005420 <_dtoa_r+0x8d0>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	6933      	ldr	r3, [r6, #16]
 8005330:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005334:	6918      	ldr	r0, [r3, #16]
 8005336:	f000 fba5 	bl	8005a84 <__hi0bits>
 800533a:	f1c0 0020 	rsb	r0, r0, #32
 800533e:	9b06      	ldr	r3, [sp, #24]
 8005340:	4418      	add	r0, r3
 8005342:	f010 001f 	ands.w	r0, r0, #31
 8005346:	f000 8094 	beq.w	8005472 <_dtoa_r+0x922>
 800534a:	f1c0 0320 	rsb	r3, r0, #32
 800534e:	2b04      	cmp	r3, #4
 8005350:	f340 8085 	ble.w	800545e <_dtoa_r+0x90e>
 8005354:	9b05      	ldr	r3, [sp, #20]
 8005356:	f1c0 001c 	rsb	r0, r0, #28
 800535a:	4403      	add	r3, r0
 800535c:	9305      	str	r3, [sp, #20]
 800535e:	9b06      	ldr	r3, [sp, #24]
 8005360:	4403      	add	r3, r0
 8005362:	4405      	add	r5, r0
 8005364:	9306      	str	r3, [sp, #24]
 8005366:	9b05      	ldr	r3, [sp, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	dd05      	ble.n	8005378 <_dtoa_r+0x828>
 800536c:	4651      	mov	r1, sl
 800536e:	461a      	mov	r2, r3
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fcef 	bl	8005d54 <__lshift>
 8005376:	4682      	mov	sl, r0
 8005378:	9b06      	ldr	r3, [sp, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd05      	ble.n	800538a <_dtoa_r+0x83a>
 800537e:	4631      	mov	r1, r6
 8005380:	461a      	mov	r2, r3
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fce6 	bl	8005d54 <__lshift>
 8005388:	4606      	mov	r6, r0
 800538a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d072      	beq.n	8005476 <_dtoa_r+0x926>
 8005390:	4631      	mov	r1, r6
 8005392:	4650      	mov	r0, sl
 8005394:	f000 fd4a 	bl	8005e2c <__mcmp>
 8005398:	2800      	cmp	r0, #0
 800539a:	da6c      	bge.n	8005476 <_dtoa_r+0x926>
 800539c:	2300      	movs	r3, #0
 800539e:	4651      	mov	r1, sl
 80053a0:	220a      	movs	r2, #10
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 fb28 	bl	80059f8 <__multadd>
 80053a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053ae:	4682      	mov	sl, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 81b0 	beq.w	8005716 <_dtoa_r+0xbc6>
 80053b6:	2300      	movs	r3, #0
 80053b8:	4639      	mov	r1, r7
 80053ba:	220a      	movs	r2, #10
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 fb1b 	bl	80059f8 <__multadd>
 80053c2:	9b01      	ldr	r3, [sp, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	4607      	mov	r7, r0
 80053c8:	f300 8096 	bgt.w	80054f8 <_dtoa_r+0x9a8>
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	dc59      	bgt.n	8005486 <_dtoa_r+0x936>
 80053d2:	e091      	b.n	80054f8 <_dtoa_r+0x9a8>
 80053d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053da:	e758      	b.n	800528e <_dtoa_r+0x73e>
 80053dc:	9b04      	ldr	r3, [sp, #16]
 80053de:	1e5e      	subs	r6, r3, #1
 80053e0:	9b08      	ldr	r3, [sp, #32]
 80053e2:	42b3      	cmp	r3, r6
 80053e4:	bfbf      	itttt	lt
 80053e6:	9b08      	ldrlt	r3, [sp, #32]
 80053e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80053ea:	9608      	strlt	r6, [sp, #32]
 80053ec:	1af3      	sublt	r3, r6, r3
 80053ee:	bfb4      	ite	lt
 80053f0:	18d2      	addlt	r2, r2, r3
 80053f2:	1b9e      	subge	r6, r3, r6
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	bfbc      	itt	lt
 80053f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80053fa:	2600      	movlt	r6, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bfb7      	itett	lt
 8005400:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005404:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005408:	1a9d      	sublt	r5, r3, r2
 800540a:	2300      	movlt	r3, #0
 800540c:	e741      	b.n	8005292 <_dtoa_r+0x742>
 800540e:	9e08      	ldr	r6, [sp, #32]
 8005410:	9d05      	ldr	r5, [sp, #20]
 8005412:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005414:	e748      	b.n	80052a8 <_dtoa_r+0x758>
 8005416:	9a08      	ldr	r2, [sp, #32]
 8005418:	e770      	b.n	80052fc <_dtoa_r+0x7ac>
 800541a:	9b07      	ldr	r3, [sp, #28]
 800541c:	2b01      	cmp	r3, #1
 800541e:	dc19      	bgt.n	8005454 <_dtoa_r+0x904>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	b9bb      	cbnz	r3, 8005454 <_dtoa_r+0x904>
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800542a:	b99b      	cbnz	r3, 8005454 <_dtoa_r+0x904>
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005432:	0d1b      	lsrs	r3, r3, #20
 8005434:	051b      	lsls	r3, r3, #20
 8005436:	b183      	cbz	r3, 800545a <_dtoa_r+0x90a>
 8005438:	9b05      	ldr	r3, [sp, #20]
 800543a:	3301      	adds	r3, #1
 800543c:	9305      	str	r3, [sp, #20]
 800543e:	9b06      	ldr	r3, [sp, #24]
 8005440:	3301      	adds	r3, #1
 8005442:	9306      	str	r3, [sp, #24]
 8005444:	f04f 0801 	mov.w	r8, #1
 8005448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800544a:	2b00      	cmp	r3, #0
 800544c:	f47f af6f 	bne.w	800532e <_dtoa_r+0x7de>
 8005450:	2001      	movs	r0, #1
 8005452:	e774      	b.n	800533e <_dtoa_r+0x7ee>
 8005454:	f04f 0800 	mov.w	r8, #0
 8005458:	e7f6      	b.n	8005448 <_dtoa_r+0x8f8>
 800545a:	4698      	mov	r8, r3
 800545c:	e7f4      	b.n	8005448 <_dtoa_r+0x8f8>
 800545e:	d082      	beq.n	8005366 <_dtoa_r+0x816>
 8005460:	9a05      	ldr	r2, [sp, #20]
 8005462:	331c      	adds	r3, #28
 8005464:	441a      	add	r2, r3
 8005466:	9205      	str	r2, [sp, #20]
 8005468:	9a06      	ldr	r2, [sp, #24]
 800546a:	441a      	add	r2, r3
 800546c:	441d      	add	r5, r3
 800546e:	9206      	str	r2, [sp, #24]
 8005470:	e779      	b.n	8005366 <_dtoa_r+0x816>
 8005472:	4603      	mov	r3, r0
 8005474:	e7f4      	b.n	8005460 <_dtoa_r+0x910>
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dc37      	bgt.n	80054ec <_dtoa_r+0x99c>
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	2b02      	cmp	r3, #2
 8005480:	dd34      	ble.n	80054ec <_dtoa_r+0x99c>
 8005482:	9b04      	ldr	r3, [sp, #16]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	b963      	cbnz	r3, 80054a4 <_dtoa_r+0x954>
 800548a:	4631      	mov	r1, r6
 800548c:	2205      	movs	r2, #5
 800548e:	4620      	mov	r0, r4
 8005490:	f000 fab2 	bl	80059f8 <__multadd>
 8005494:	4601      	mov	r1, r0
 8005496:	4606      	mov	r6, r0
 8005498:	4650      	mov	r0, sl
 800549a:	f000 fcc7 	bl	8005e2c <__mcmp>
 800549e:	2800      	cmp	r0, #0
 80054a0:	f73f adbb 	bgt.w	800501a <_dtoa_r+0x4ca>
 80054a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a6:	9d00      	ldr	r5, [sp, #0]
 80054a8:	ea6f 0b03 	mvn.w	fp, r3
 80054ac:	f04f 0800 	mov.w	r8, #0
 80054b0:	4631      	mov	r1, r6
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fa7e 	bl	80059b4 <_Bfree>
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	f43f aeab 	beq.w	8005214 <_dtoa_r+0x6c4>
 80054be:	f1b8 0f00 	cmp.w	r8, #0
 80054c2:	d005      	beq.n	80054d0 <_dtoa_r+0x980>
 80054c4:	45b8      	cmp	r8, r7
 80054c6:	d003      	beq.n	80054d0 <_dtoa_r+0x980>
 80054c8:	4641      	mov	r1, r8
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 fa72 	bl	80059b4 <_Bfree>
 80054d0:	4639      	mov	r1, r7
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fa6e 	bl	80059b4 <_Bfree>
 80054d8:	e69c      	b.n	8005214 <_dtoa_r+0x6c4>
 80054da:	2600      	movs	r6, #0
 80054dc:	4637      	mov	r7, r6
 80054de:	e7e1      	b.n	80054a4 <_dtoa_r+0x954>
 80054e0:	46bb      	mov	fp, r7
 80054e2:	4637      	mov	r7, r6
 80054e4:	e599      	b.n	800501a <_dtoa_r+0x4ca>
 80054e6:	bf00      	nop
 80054e8:	40240000 	.word	0x40240000
 80054ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80c8 	beq.w	8005684 <_dtoa_r+0xb34>
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	dd05      	ble.n	8005508 <_dtoa_r+0x9b8>
 80054fc:	4639      	mov	r1, r7
 80054fe:	462a      	mov	r2, r5
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fc27 	bl	8005d54 <__lshift>
 8005506:	4607      	mov	r7, r0
 8005508:	f1b8 0f00 	cmp.w	r8, #0
 800550c:	d05b      	beq.n	80055c6 <_dtoa_r+0xa76>
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4620      	mov	r0, r4
 8005512:	f000 fa0f 	bl	8005934 <_Balloc>
 8005516:	4605      	mov	r5, r0
 8005518:	b928      	cbnz	r0, 8005526 <_dtoa_r+0x9d6>
 800551a:	4b83      	ldr	r3, [pc, #524]	; (8005728 <_dtoa_r+0xbd8>)
 800551c:	4602      	mov	r2, r0
 800551e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005522:	f7ff bb2e 	b.w	8004b82 <_dtoa_r+0x32>
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	3202      	adds	r2, #2
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	f107 010c 	add.w	r1, r7, #12
 8005530:	300c      	adds	r0, #12
 8005532:	f000 ffab 	bl	800648c <memcpy>
 8005536:	2201      	movs	r2, #1
 8005538:	4629      	mov	r1, r5
 800553a:	4620      	mov	r0, r4
 800553c:	f000 fc0a 	bl	8005d54 <__lshift>
 8005540:	9b00      	ldr	r3, [sp, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800554a:	4413      	add	r3, r2
 800554c:	9308      	str	r3, [sp, #32]
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	46b8      	mov	r8, r7
 8005556:	9306      	str	r3, [sp, #24]
 8005558:	4607      	mov	r7, r0
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	4631      	mov	r1, r6
 800555e:	3b01      	subs	r3, #1
 8005560:	4650      	mov	r0, sl
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	f7ff fa6b 	bl	8004a3e <quorem>
 8005568:	4641      	mov	r1, r8
 800556a:	9002      	str	r0, [sp, #8]
 800556c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005570:	4650      	mov	r0, sl
 8005572:	f000 fc5b 	bl	8005e2c <__mcmp>
 8005576:	463a      	mov	r2, r7
 8005578:	9005      	str	r0, [sp, #20]
 800557a:	4631      	mov	r1, r6
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fc71 	bl	8005e64 <__mdiff>
 8005582:	68c2      	ldr	r2, [r0, #12]
 8005584:	4605      	mov	r5, r0
 8005586:	bb02      	cbnz	r2, 80055ca <_dtoa_r+0xa7a>
 8005588:	4601      	mov	r1, r0
 800558a:	4650      	mov	r0, sl
 800558c:	f000 fc4e 	bl	8005e2c <__mcmp>
 8005590:	4602      	mov	r2, r0
 8005592:	4629      	mov	r1, r5
 8005594:	4620      	mov	r0, r4
 8005596:	9209      	str	r2, [sp, #36]	; 0x24
 8005598:	f000 fa0c 	bl	80059b4 <_Bfree>
 800559c:	9b07      	ldr	r3, [sp, #28]
 800559e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a0:	9d04      	ldr	r5, [sp, #16]
 80055a2:	ea43 0102 	orr.w	r1, r3, r2
 80055a6:	9b06      	ldr	r3, [sp, #24]
 80055a8:	4319      	orrs	r1, r3
 80055aa:	d110      	bne.n	80055ce <_dtoa_r+0xa7e>
 80055ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055b0:	d029      	beq.n	8005606 <_dtoa_r+0xab6>
 80055b2:	9b05      	ldr	r3, [sp, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd02      	ble.n	80055be <_dtoa_r+0xa6e>
 80055b8:	9b02      	ldr	r3, [sp, #8]
 80055ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	f883 9000 	strb.w	r9, [r3]
 80055c4:	e774      	b.n	80054b0 <_dtoa_r+0x960>
 80055c6:	4638      	mov	r0, r7
 80055c8:	e7ba      	b.n	8005540 <_dtoa_r+0x9f0>
 80055ca:	2201      	movs	r2, #1
 80055cc:	e7e1      	b.n	8005592 <_dtoa_r+0xa42>
 80055ce:	9b05      	ldr	r3, [sp, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db04      	blt.n	80055de <_dtoa_r+0xa8e>
 80055d4:	9907      	ldr	r1, [sp, #28]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	9906      	ldr	r1, [sp, #24]
 80055da:	430b      	orrs	r3, r1
 80055dc:	d120      	bne.n	8005620 <_dtoa_r+0xad0>
 80055de:	2a00      	cmp	r2, #0
 80055e0:	dded      	ble.n	80055be <_dtoa_r+0xa6e>
 80055e2:	4651      	mov	r1, sl
 80055e4:	2201      	movs	r2, #1
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fbb4 	bl	8005d54 <__lshift>
 80055ec:	4631      	mov	r1, r6
 80055ee:	4682      	mov	sl, r0
 80055f0:	f000 fc1c 	bl	8005e2c <__mcmp>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dc03      	bgt.n	8005600 <_dtoa_r+0xab0>
 80055f8:	d1e1      	bne.n	80055be <_dtoa_r+0xa6e>
 80055fa:	f019 0f01 	tst.w	r9, #1
 80055fe:	d0de      	beq.n	80055be <_dtoa_r+0xa6e>
 8005600:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005604:	d1d8      	bne.n	80055b8 <_dtoa_r+0xa68>
 8005606:	9a01      	ldr	r2, [sp, #4]
 8005608:	2339      	movs	r3, #57	; 0x39
 800560a:	7013      	strb	r3, [r2, #0]
 800560c:	462b      	mov	r3, r5
 800560e:	461d      	mov	r5, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005616:	2a39      	cmp	r2, #57	; 0x39
 8005618:	d06c      	beq.n	80056f4 <_dtoa_r+0xba4>
 800561a:	3201      	adds	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e747      	b.n	80054b0 <_dtoa_r+0x960>
 8005620:	2a00      	cmp	r2, #0
 8005622:	dd07      	ble.n	8005634 <_dtoa_r+0xae4>
 8005624:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005628:	d0ed      	beq.n	8005606 <_dtoa_r+0xab6>
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	f109 0301 	add.w	r3, r9, #1
 8005630:	7013      	strb	r3, [r2, #0]
 8005632:	e73d      	b.n	80054b0 <_dtoa_r+0x960>
 8005634:	9b04      	ldr	r3, [sp, #16]
 8005636:	9a08      	ldr	r2, [sp, #32]
 8005638:	f803 9c01 	strb.w	r9, [r3, #-1]
 800563c:	4293      	cmp	r3, r2
 800563e:	d043      	beq.n	80056c8 <_dtoa_r+0xb78>
 8005640:	4651      	mov	r1, sl
 8005642:	2300      	movs	r3, #0
 8005644:	220a      	movs	r2, #10
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f9d6 	bl	80059f8 <__multadd>
 800564c:	45b8      	cmp	r8, r7
 800564e:	4682      	mov	sl, r0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	f04f 020a 	mov.w	r2, #10
 8005658:	4641      	mov	r1, r8
 800565a:	4620      	mov	r0, r4
 800565c:	d107      	bne.n	800566e <_dtoa_r+0xb1e>
 800565e:	f000 f9cb 	bl	80059f8 <__multadd>
 8005662:	4680      	mov	r8, r0
 8005664:	4607      	mov	r7, r0
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	3301      	adds	r3, #1
 800566a:	9304      	str	r3, [sp, #16]
 800566c:	e775      	b.n	800555a <_dtoa_r+0xa0a>
 800566e:	f000 f9c3 	bl	80059f8 <__multadd>
 8005672:	4639      	mov	r1, r7
 8005674:	4680      	mov	r8, r0
 8005676:	2300      	movs	r3, #0
 8005678:	220a      	movs	r2, #10
 800567a:	4620      	mov	r0, r4
 800567c:	f000 f9bc 	bl	80059f8 <__multadd>
 8005680:	4607      	mov	r7, r0
 8005682:	e7f0      	b.n	8005666 <_dtoa_r+0xb16>
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	9d00      	ldr	r5, [sp, #0]
 800568a:	4631      	mov	r1, r6
 800568c:	4650      	mov	r0, sl
 800568e:	f7ff f9d6 	bl	8004a3e <quorem>
 8005692:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005696:	9b00      	ldr	r3, [sp, #0]
 8005698:	f805 9b01 	strb.w	r9, [r5], #1
 800569c:	1aea      	subs	r2, r5, r3
 800569e:	9b01      	ldr	r3, [sp, #4]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	dd07      	ble.n	80056b4 <_dtoa_r+0xb64>
 80056a4:	4651      	mov	r1, sl
 80056a6:	2300      	movs	r3, #0
 80056a8:	220a      	movs	r2, #10
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 f9a4 	bl	80059f8 <__multadd>
 80056b0:	4682      	mov	sl, r0
 80056b2:	e7ea      	b.n	800568a <_dtoa_r+0xb3a>
 80056b4:	9b01      	ldr	r3, [sp, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfc8      	it	gt
 80056ba:	461d      	movgt	r5, r3
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	bfd8      	it	le
 80056c0:	2501      	movle	r5, #1
 80056c2:	441d      	add	r5, r3
 80056c4:	f04f 0800 	mov.w	r8, #0
 80056c8:	4651      	mov	r1, sl
 80056ca:	2201      	movs	r2, #1
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fb41 	bl	8005d54 <__lshift>
 80056d2:	4631      	mov	r1, r6
 80056d4:	4682      	mov	sl, r0
 80056d6:	f000 fba9 	bl	8005e2c <__mcmp>
 80056da:	2800      	cmp	r0, #0
 80056dc:	dc96      	bgt.n	800560c <_dtoa_r+0xabc>
 80056de:	d102      	bne.n	80056e6 <_dtoa_r+0xb96>
 80056e0:	f019 0f01 	tst.w	r9, #1
 80056e4:	d192      	bne.n	800560c <_dtoa_r+0xabc>
 80056e6:	462b      	mov	r3, r5
 80056e8:	461d      	mov	r5, r3
 80056ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056ee:	2a30      	cmp	r2, #48	; 0x30
 80056f0:	d0fa      	beq.n	80056e8 <_dtoa_r+0xb98>
 80056f2:	e6dd      	b.n	80054b0 <_dtoa_r+0x960>
 80056f4:	9a00      	ldr	r2, [sp, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d189      	bne.n	800560e <_dtoa_r+0xabe>
 80056fa:	f10b 0b01 	add.w	fp, fp, #1
 80056fe:	2331      	movs	r3, #49	; 0x31
 8005700:	e796      	b.n	8005630 <_dtoa_r+0xae0>
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <_dtoa_r+0xbdc>)
 8005704:	f7ff ba99 	b.w	8004c3a <_dtoa_r+0xea>
 8005708:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800570a:	2b00      	cmp	r3, #0
 800570c:	f47f aa6d 	bne.w	8004bea <_dtoa_r+0x9a>
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <_dtoa_r+0xbe0>)
 8005712:	f7ff ba92 	b.w	8004c3a <_dtoa_r+0xea>
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dcb5      	bgt.n	8005688 <_dtoa_r+0xb38>
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	2b02      	cmp	r3, #2
 8005720:	f73f aeb1 	bgt.w	8005486 <_dtoa_r+0x936>
 8005724:	e7b0      	b.n	8005688 <_dtoa_r+0xb38>
 8005726:	bf00      	nop
 8005728:	08006c74 	.word	0x08006c74
 800572c:	08006bd4 	.word	0x08006bd4
 8005730:	08006bf8 	.word	0x08006bf8

08005734 <_free_r>:
 8005734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005736:	2900      	cmp	r1, #0
 8005738:	d044      	beq.n	80057c4 <_free_r+0x90>
 800573a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573e:	9001      	str	r0, [sp, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f1a1 0404 	sub.w	r4, r1, #4
 8005746:	bfb8      	it	lt
 8005748:	18e4      	addlt	r4, r4, r3
 800574a:	f000 f8e7 	bl	800591c <__malloc_lock>
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <_free_r+0x94>)
 8005750:	9801      	ldr	r0, [sp, #4]
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x30>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005760:	f000 b8e2 	b.w	8005928 <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x46>
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	1961      	adds	r1, r4, r5
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1949      	addeq	r1, r1, r5
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x22>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x50>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x46>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1855      	adds	r5, r2, r1
 8005788:	42a5      	cmp	r5, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x70>
 800578c:	6824      	ldr	r4, [r4, #0]
 800578e:	4421      	add	r1, r4
 8005790:	1854      	adds	r4, r2, r1
 8005792:	42a3      	cmp	r3, r4
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x26>
 8005798:	681c      	ldr	r4, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	440c      	add	r4, r1
 80057a0:	6014      	str	r4, [r2, #0]
 80057a2:	e7da      	b.n	800575a <_free_r+0x26>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x78>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x26>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf04      	itt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	bf04      	itt	eq
 80057bc:	1949      	addeq	r1, r1, r5
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	6054      	str	r4, [r2, #4]
 80057c2:	e7ca      	b.n	800575a <_free_r+0x26>
 80057c4:	b003      	add	sp, #12
 80057c6:	bd30      	pop	{r4, r5, pc}
 80057c8:	200004b0 	.word	0x200004b0

080057cc <malloc>:
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <malloc+0xc>)
 80057ce:	4601      	mov	r1, r0
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f000 b823 	b.w	800581c <_malloc_r>
 80057d6:	bf00      	nop
 80057d8:	200000e4 	.word	0x200000e4

080057dc <sbrk_aligned>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4e0e      	ldr	r6, [pc, #56]	; (8005818 <sbrk_aligned+0x3c>)
 80057e0:	460c      	mov	r4, r1
 80057e2:	6831      	ldr	r1, [r6, #0]
 80057e4:	4605      	mov	r5, r0
 80057e6:	b911      	cbnz	r1, 80057ee <sbrk_aligned+0x12>
 80057e8:	f000 fe40 	bl	800646c <_sbrk_r>
 80057ec:	6030      	str	r0, [r6, #0]
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 fe3b 	bl	800646c <_sbrk_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d00a      	beq.n	8005810 <sbrk_aligned+0x34>
 80057fa:	1cc4      	adds	r4, r0, #3
 80057fc:	f024 0403 	bic.w	r4, r4, #3
 8005800:	42a0      	cmp	r0, r4
 8005802:	d007      	beq.n	8005814 <sbrk_aligned+0x38>
 8005804:	1a21      	subs	r1, r4, r0
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fe30 	bl	800646c <_sbrk_r>
 800580c:	3001      	adds	r0, #1
 800580e:	d101      	bne.n	8005814 <sbrk_aligned+0x38>
 8005810:	f04f 34ff 	mov.w	r4, #4294967295
 8005814:	4620      	mov	r0, r4
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	200004b4 	.word	0x200004b4

0800581c <_malloc_r>:
 800581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005820:	1ccd      	adds	r5, r1, #3
 8005822:	f025 0503 	bic.w	r5, r5, #3
 8005826:	3508      	adds	r5, #8
 8005828:	2d0c      	cmp	r5, #12
 800582a:	bf38      	it	cc
 800582c:	250c      	movcc	r5, #12
 800582e:	2d00      	cmp	r5, #0
 8005830:	4607      	mov	r7, r0
 8005832:	db01      	blt.n	8005838 <_malloc_r+0x1c>
 8005834:	42a9      	cmp	r1, r5
 8005836:	d905      	bls.n	8005844 <_malloc_r+0x28>
 8005838:	230c      	movs	r3, #12
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	2600      	movs	r6, #0
 800583e:	4630      	mov	r0, r6
 8005840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005844:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005918 <_malloc_r+0xfc>
 8005848:	f000 f868 	bl	800591c <__malloc_lock>
 800584c:	f8d8 3000 	ldr.w	r3, [r8]
 8005850:	461c      	mov	r4, r3
 8005852:	bb5c      	cbnz	r4, 80058ac <_malloc_r+0x90>
 8005854:	4629      	mov	r1, r5
 8005856:	4638      	mov	r0, r7
 8005858:	f7ff ffc0 	bl	80057dc <sbrk_aligned>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	4604      	mov	r4, r0
 8005860:	d155      	bne.n	800590e <_malloc_r+0xf2>
 8005862:	f8d8 4000 	ldr.w	r4, [r8]
 8005866:	4626      	mov	r6, r4
 8005868:	2e00      	cmp	r6, #0
 800586a:	d145      	bne.n	80058f8 <_malloc_r+0xdc>
 800586c:	2c00      	cmp	r4, #0
 800586e:	d048      	beq.n	8005902 <_malloc_r+0xe6>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	4631      	mov	r1, r6
 8005874:	4638      	mov	r0, r7
 8005876:	eb04 0903 	add.w	r9, r4, r3
 800587a:	f000 fdf7 	bl	800646c <_sbrk_r>
 800587e:	4581      	cmp	r9, r0
 8005880:	d13f      	bne.n	8005902 <_malloc_r+0xe6>
 8005882:	6821      	ldr	r1, [r4, #0]
 8005884:	1a6d      	subs	r5, r5, r1
 8005886:	4629      	mov	r1, r5
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ffa7 	bl	80057dc <sbrk_aligned>
 800588e:	3001      	adds	r0, #1
 8005890:	d037      	beq.n	8005902 <_malloc_r+0xe6>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	442b      	add	r3, r5
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	f8d8 3000 	ldr.w	r3, [r8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d038      	beq.n	8005912 <_malloc_r+0xf6>
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	42a2      	cmp	r2, r4
 80058a4:	d12b      	bne.n	80058fe <_malloc_r+0xe2>
 80058a6:	2200      	movs	r2, #0
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	e00f      	b.n	80058cc <_malloc_r+0xb0>
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	1b52      	subs	r2, r2, r5
 80058b0:	d41f      	bmi.n	80058f2 <_malloc_r+0xd6>
 80058b2:	2a0b      	cmp	r2, #11
 80058b4:	d917      	bls.n	80058e6 <_malloc_r+0xca>
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	6025      	str	r5, [r4, #0]
 80058bc:	bf18      	it	ne
 80058be:	6059      	strne	r1, [r3, #4]
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	bf08      	it	eq
 80058c4:	f8c8 1000 	streq.w	r1, [r8]
 80058c8:	5162      	str	r2, [r4, r5]
 80058ca:	604b      	str	r3, [r1, #4]
 80058cc:	4638      	mov	r0, r7
 80058ce:	f104 060b 	add.w	r6, r4, #11
 80058d2:	f000 f829 	bl	8005928 <__malloc_unlock>
 80058d6:	f026 0607 	bic.w	r6, r6, #7
 80058da:	1d23      	adds	r3, r4, #4
 80058dc:	1af2      	subs	r2, r6, r3
 80058de:	d0ae      	beq.n	800583e <_malloc_r+0x22>
 80058e0:	1b9b      	subs	r3, r3, r6
 80058e2:	50a3      	str	r3, [r4, r2]
 80058e4:	e7ab      	b.n	800583e <_malloc_r+0x22>
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	6862      	ldr	r2, [r4, #4]
 80058ea:	d1dd      	bne.n	80058a8 <_malloc_r+0x8c>
 80058ec:	f8c8 2000 	str.w	r2, [r8]
 80058f0:	e7ec      	b.n	80058cc <_malloc_r+0xb0>
 80058f2:	4623      	mov	r3, r4
 80058f4:	6864      	ldr	r4, [r4, #4]
 80058f6:	e7ac      	b.n	8005852 <_malloc_r+0x36>
 80058f8:	4634      	mov	r4, r6
 80058fa:	6876      	ldr	r6, [r6, #4]
 80058fc:	e7b4      	b.n	8005868 <_malloc_r+0x4c>
 80058fe:	4613      	mov	r3, r2
 8005900:	e7cc      	b.n	800589c <_malloc_r+0x80>
 8005902:	230c      	movs	r3, #12
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4638      	mov	r0, r7
 8005908:	f000 f80e 	bl	8005928 <__malloc_unlock>
 800590c:	e797      	b.n	800583e <_malloc_r+0x22>
 800590e:	6025      	str	r5, [r4, #0]
 8005910:	e7dc      	b.n	80058cc <_malloc_r+0xb0>
 8005912:	605b      	str	r3, [r3, #4]
 8005914:	deff      	udf	#255	; 0xff
 8005916:	bf00      	nop
 8005918:	200004b0 	.word	0x200004b0

0800591c <__malloc_lock>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__malloc_lock+0x8>)
 800591e:	f7ff b88c 	b.w	8004a3a <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200004ac 	.word	0x200004ac

08005928 <__malloc_unlock>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__malloc_unlock+0x8>)
 800592a:	f7ff b887 	b.w	8004a3c <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200004ac 	.word	0x200004ac

08005934 <_Balloc>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	69c6      	ldr	r6, [r0, #28]
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	b976      	cbnz	r6, 800595c <_Balloc+0x28>
 800593e:	2010      	movs	r0, #16
 8005940:	f7ff ff44 	bl	80057cc <malloc>
 8005944:	4602      	mov	r2, r0
 8005946:	61e0      	str	r0, [r4, #28]
 8005948:	b920      	cbnz	r0, 8005954 <_Balloc+0x20>
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <_Balloc+0x78>)
 800594c:	4818      	ldr	r0, [pc, #96]	; (80059b0 <_Balloc+0x7c>)
 800594e:	216b      	movs	r1, #107	; 0x6b
 8005950:	f000 fdaa 	bl	80064a8 <__assert_func>
 8005954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005958:	6006      	str	r6, [r0, #0]
 800595a:	60c6      	str	r6, [r0, #12]
 800595c:	69e6      	ldr	r6, [r4, #28]
 800595e:	68f3      	ldr	r3, [r6, #12]
 8005960:	b183      	cbz	r3, 8005984 <_Balloc+0x50>
 8005962:	69e3      	ldr	r3, [r4, #28]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800596a:	b9b8      	cbnz	r0, 800599c <_Balloc+0x68>
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f605 	lsl.w	r6, r1, r5
 8005972:	1d72      	adds	r2, r6, #5
 8005974:	0092      	lsls	r2, r2, #2
 8005976:	4620      	mov	r0, r4
 8005978:	f000 fdb4 	bl	80064e4 <_calloc_r>
 800597c:	b160      	cbz	r0, 8005998 <_Balloc+0x64>
 800597e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005982:	e00e      	b.n	80059a2 <_Balloc+0x6e>
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	2104      	movs	r1, #4
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fdab 	bl	80064e4 <_calloc_r>
 800598e:	69e3      	ldr	r3, [r4, #28]
 8005990:	60f0      	str	r0, [r6, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e4      	bne.n	8005962 <_Balloc+0x2e>
 8005998:	2000      	movs	r0, #0
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	6802      	ldr	r2, [r0, #0]
 800599e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059a2:	2300      	movs	r3, #0
 80059a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059a8:	e7f7      	b.n	800599a <_Balloc+0x66>
 80059aa:	bf00      	nop
 80059ac:	08006c05 	.word	0x08006c05
 80059b0:	08006c85 	.word	0x08006c85

080059b4 <_Bfree>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	69c6      	ldr	r6, [r0, #28]
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b976      	cbnz	r6, 80059dc <_Bfree+0x28>
 80059be:	2010      	movs	r0, #16
 80059c0:	f7ff ff04 	bl	80057cc <malloc>
 80059c4:	4602      	mov	r2, r0
 80059c6:	61e8      	str	r0, [r5, #28]
 80059c8:	b920      	cbnz	r0, 80059d4 <_Bfree+0x20>
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <_Bfree+0x3c>)
 80059cc:	4809      	ldr	r0, [pc, #36]	; (80059f4 <_Bfree+0x40>)
 80059ce:	218f      	movs	r1, #143	; 0x8f
 80059d0:	f000 fd6a 	bl	80064a8 <__assert_func>
 80059d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d8:	6006      	str	r6, [r0, #0]
 80059da:	60c6      	str	r6, [r0, #12]
 80059dc:	b13c      	cbz	r4, 80059ee <_Bfree+0x3a>
 80059de:	69eb      	ldr	r3, [r5, #28]
 80059e0:	6862      	ldr	r2, [r4, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e8:	6021      	str	r1, [r4, #0]
 80059ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	08006c05 	.word	0x08006c05
 80059f4:	08006c85 	.word	0x08006c85

080059f8 <__multadd>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	690d      	ldr	r5, [r1, #16]
 80059fe:	4607      	mov	r7, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	461e      	mov	r6, r3
 8005a04:	f101 0c14 	add.w	ip, r1, #20
 8005a08:	2000      	movs	r0, #0
 8005a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a0e:	b299      	uxth	r1, r3
 8005a10:	fb02 6101 	mla	r1, r2, r1, r6
 8005a14:	0c1e      	lsrs	r6, r3, #16
 8005a16:	0c0b      	lsrs	r3, r1, #16
 8005a18:	fb02 3306 	mla	r3, r2, r6, r3
 8005a1c:	b289      	uxth	r1, r1
 8005a1e:	3001      	adds	r0, #1
 8005a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a24:	4285      	cmp	r5, r0
 8005a26:	f84c 1b04 	str.w	r1, [ip], #4
 8005a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a2e:	dcec      	bgt.n	8005a0a <__multadd+0x12>
 8005a30:	b30e      	cbz	r6, 8005a76 <__multadd+0x7e>
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dc19      	bgt.n	8005a6c <__multadd+0x74>
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	f7ff ff79 	bl	8005934 <_Balloc>
 8005a42:	4680      	mov	r8, r0
 8005a44:	b928      	cbnz	r0, 8005a52 <__multadd+0x5a>
 8005a46:	4602      	mov	r2, r0
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <__multadd+0x84>)
 8005a4a:	480d      	ldr	r0, [pc, #52]	; (8005a80 <__multadd+0x88>)
 8005a4c:	21ba      	movs	r1, #186	; 0xba
 8005a4e:	f000 fd2b 	bl	80064a8 <__assert_func>
 8005a52:	6922      	ldr	r2, [r4, #16]
 8005a54:	3202      	adds	r2, #2
 8005a56:	f104 010c 	add.w	r1, r4, #12
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	300c      	adds	r0, #12
 8005a5e:	f000 fd15 	bl	800648c <memcpy>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7ff ffa5 	bl	80059b4 <_Bfree>
 8005a6a:	4644      	mov	r4, r8
 8005a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a70:	3501      	adds	r5, #1
 8005a72:	615e      	str	r6, [r3, #20]
 8005a74:	6125      	str	r5, [r4, #16]
 8005a76:	4620      	mov	r0, r4
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7c:	08006c74 	.word	0x08006c74
 8005a80:	08006c85 	.word	0x08006c85

08005a84 <__hi0bits>:
 8005a84:	0c03      	lsrs	r3, r0, #16
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	b9d3      	cbnz	r3, 8005ac0 <__hi0bits+0x3c>
 8005a8a:	0400      	lsls	r0, r0, #16
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a92:	bf04      	itt	eq
 8005a94:	0200      	lsleq	r0, r0, #8
 8005a96:	3308      	addeq	r3, #8
 8005a98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a9c:	bf04      	itt	eq
 8005a9e:	0100      	lsleq	r0, r0, #4
 8005aa0:	3304      	addeq	r3, #4
 8005aa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005aa6:	bf04      	itt	eq
 8005aa8:	0080      	lsleq	r0, r0, #2
 8005aaa:	3302      	addeq	r3, #2
 8005aac:	2800      	cmp	r0, #0
 8005aae:	db05      	blt.n	8005abc <__hi0bits+0x38>
 8005ab0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ab4:	f103 0301 	add.w	r3, r3, #1
 8005ab8:	bf08      	it	eq
 8005aba:	2320      	moveq	r3, #32
 8005abc:	4618      	mov	r0, r3
 8005abe:	4770      	bx	lr
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e7e4      	b.n	8005a8e <__hi0bits+0xa>

08005ac4 <__lo0bits>:
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	f013 0207 	ands.w	r2, r3, #7
 8005aca:	d00c      	beq.n	8005ae6 <__lo0bits+0x22>
 8005acc:	07d9      	lsls	r1, r3, #31
 8005ace:	d422      	bmi.n	8005b16 <__lo0bits+0x52>
 8005ad0:	079a      	lsls	r2, r3, #30
 8005ad2:	bf49      	itett	mi
 8005ad4:	085b      	lsrmi	r3, r3, #1
 8005ad6:	089b      	lsrpl	r3, r3, #2
 8005ad8:	6003      	strmi	r3, [r0, #0]
 8005ada:	2201      	movmi	r2, #1
 8005adc:	bf5c      	itt	pl
 8005ade:	6003      	strpl	r3, [r0, #0]
 8005ae0:	2202      	movpl	r2, #2
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4770      	bx	lr
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	b909      	cbnz	r1, 8005aee <__lo0bits+0x2a>
 8005aea:	0c1b      	lsrs	r3, r3, #16
 8005aec:	2210      	movs	r2, #16
 8005aee:	b2d9      	uxtb	r1, r3
 8005af0:	b909      	cbnz	r1, 8005af6 <__lo0bits+0x32>
 8005af2:	3208      	adds	r2, #8
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	0719      	lsls	r1, r3, #28
 8005af8:	bf04      	itt	eq
 8005afa:	091b      	lsreq	r3, r3, #4
 8005afc:	3204      	addeq	r2, #4
 8005afe:	0799      	lsls	r1, r3, #30
 8005b00:	bf04      	itt	eq
 8005b02:	089b      	lsreq	r3, r3, #2
 8005b04:	3202      	addeq	r2, #2
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d403      	bmi.n	8005b12 <__lo0bits+0x4e>
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	f102 0201 	add.w	r2, r2, #1
 8005b10:	d003      	beq.n	8005b1a <__lo0bits+0x56>
 8005b12:	6003      	str	r3, [r0, #0]
 8005b14:	e7e5      	b.n	8005ae2 <__lo0bits+0x1e>
 8005b16:	2200      	movs	r2, #0
 8005b18:	e7e3      	b.n	8005ae2 <__lo0bits+0x1e>
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	e7e1      	b.n	8005ae2 <__lo0bits+0x1e>
	...

08005b20 <__i2b>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	460c      	mov	r4, r1
 8005b24:	2101      	movs	r1, #1
 8005b26:	f7ff ff05 	bl	8005934 <_Balloc>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	b928      	cbnz	r0, 8005b3a <__i2b+0x1a>
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <__i2b+0x24>)
 8005b30:	4805      	ldr	r0, [pc, #20]	; (8005b48 <__i2b+0x28>)
 8005b32:	f240 1145 	movw	r1, #325	; 0x145
 8005b36:	f000 fcb7 	bl	80064a8 <__assert_func>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	6144      	str	r4, [r0, #20]
 8005b3e:	6103      	str	r3, [r0, #16]
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	08006c74 	.word	0x08006c74
 8005b48:	08006c85 	.word	0x08006c85

08005b4c <__multiply>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	4691      	mov	r9, r2
 8005b52:	690a      	ldr	r2, [r1, #16]
 8005b54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bfb8      	it	lt
 8005b5c:	460b      	movlt	r3, r1
 8005b5e:	460c      	mov	r4, r1
 8005b60:	bfbc      	itt	lt
 8005b62:	464c      	movlt	r4, r9
 8005b64:	4699      	movlt	r9, r3
 8005b66:	6927      	ldr	r7, [r4, #16]
 8005b68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b6c:	68a3      	ldr	r3, [r4, #8]
 8005b6e:	6861      	ldr	r1, [r4, #4]
 8005b70:	eb07 060a 	add.w	r6, r7, sl
 8005b74:	42b3      	cmp	r3, r6
 8005b76:	b085      	sub	sp, #20
 8005b78:	bfb8      	it	lt
 8005b7a:	3101      	addlt	r1, #1
 8005b7c:	f7ff feda 	bl	8005934 <_Balloc>
 8005b80:	b930      	cbnz	r0, 8005b90 <__multiply+0x44>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b44      	ldr	r3, [pc, #272]	; (8005c98 <__multiply+0x14c>)
 8005b86:	4845      	ldr	r0, [pc, #276]	; (8005c9c <__multiply+0x150>)
 8005b88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b8c:	f000 fc8c 	bl	80064a8 <__assert_func>
 8005b90:	f100 0514 	add.w	r5, r0, #20
 8005b94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b98:	462b      	mov	r3, r5
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4543      	cmp	r3, r8
 8005b9e:	d321      	bcc.n	8005be4 <__multiply+0x98>
 8005ba0:	f104 0314 	add.w	r3, r4, #20
 8005ba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ba8:	f109 0314 	add.w	r3, r9, #20
 8005bac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bb0:	9202      	str	r2, [sp, #8]
 8005bb2:	1b3a      	subs	r2, r7, r4
 8005bb4:	3a15      	subs	r2, #21
 8005bb6:	f022 0203 	bic.w	r2, r2, #3
 8005bba:	3204      	adds	r2, #4
 8005bbc:	f104 0115 	add.w	r1, r4, #21
 8005bc0:	428f      	cmp	r7, r1
 8005bc2:	bf38      	it	cc
 8005bc4:	2204      	movcc	r2, #4
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	9a02      	ldr	r2, [sp, #8]
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d80c      	bhi.n	8005bea <__multiply+0x9e>
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	dd03      	ble.n	8005bdc <__multiply+0x90>
 8005bd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05b      	beq.n	8005c94 <__multiply+0x148>
 8005bdc:	6106      	str	r6, [r0, #16]
 8005bde:	b005      	add	sp, #20
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	f843 2b04 	str.w	r2, [r3], #4
 8005be8:	e7d8      	b.n	8005b9c <__multiply+0x50>
 8005bea:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bee:	f1ba 0f00 	cmp.w	sl, #0
 8005bf2:	d024      	beq.n	8005c3e <__multiply+0xf2>
 8005bf4:	f104 0e14 	add.w	lr, r4, #20
 8005bf8:	46a9      	mov	r9, r5
 8005bfa:	f04f 0c00 	mov.w	ip, #0
 8005bfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c02:	f8d9 1000 	ldr.w	r1, [r9]
 8005c06:	fa1f fb82 	uxth.w	fp, r2
 8005c0a:	b289      	uxth	r1, r1
 8005c0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c14:	f8d9 2000 	ldr.w	r2, [r9]
 8005c18:	4461      	add	r1, ip
 8005c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c26:	b289      	uxth	r1, r1
 8005c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c2c:	4577      	cmp	r7, lr
 8005c2e:	f849 1b04 	str.w	r1, [r9], #4
 8005c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c36:	d8e2      	bhi.n	8005bfe <__multiply+0xb2>
 8005c38:	9a01      	ldr	r2, [sp, #4]
 8005c3a:	f845 c002 	str.w	ip, [r5, r2]
 8005c3e:	9a03      	ldr	r2, [sp, #12]
 8005c40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c44:	3304      	adds	r3, #4
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	d021      	beq.n	8005c90 <__multiply+0x144>
 8005c4c:	6829      	ldr	r1, [r5, #0]
 8005c4e:	f104 0c14 	add.w	ip, r4, #20
 8005c52:	46ae      	mov	lr, r5
 8005c54:	f04f 0a00 	mov.w	sl, #0
 8005c58:	f8bc b000 	ldrh.w	fp, [ip]
 8005c5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c60:	fb09 220b 	mla	r2, r9, fp, r2
 8005c64:	4452      	add	r2, sl
 8005c66:	b289      	uxth	r1, r1
 8005c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c6c:	f84e 1b04 	str.w	r1, [lr], #4
 8005c70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005c74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c78:	f8be 1000 	ldrh.w	r1, [lr]
 8005c7c:	fb09 110a 	mla	r1, r9, sl, r1
 8005c80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005c84:	4567      	cmp	r7, ip
 8005c86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c8a:	d8e5      	bhi.n	8005c58 <__multiply+0x10c>
 8005c8c:	9a01      	ldr	r2, [sp, #4]
 8005c8e:	50a9      	str	r1, [r5, r2]
 8005c90:	3504      	adds	r5, #4
 8005c92:	e799      	b.n	8005bc8 <__multiply+0x7c>
 8005c94:	3e01      	subs	r6, #1
 8005c96:	e79b      	b.n	8005bd0 <__multiply+0x84>
 8005c98:	08006c74 	.word	0x08006c74
 8005c9c:	08006c85 	.word	0x08006c85

08005ca0 <__pow5mult>:
 8005ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	4615      	mov	r5, r2
 8005ca6:	f012 0203 	ands.w	r2, r2, #3
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	d007      	beq.n	8005cc0 <__pow5mult+0x20>
 8005cb0:	4c25      	ldr	r4, [pc, #148]	; (8005d48 <__pow5mult+0xa8>)
 8005cb2:	3a01      	subs	r2, #1
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cba:	f7ff fe9d 	bl	80059f8 <__multadd>
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	10ad      	asrs	r5, r5, #2
 8005cc2:	d03d      	beq.n	8005d40 <__pow5mult+0xa0>
 8005cc4:	69f4      	ldr	r4, [r6, #28]
 8005cc6:	b97c      	cbnz	r4, 8005ce8 <__pow5mult+0x48>
 8005cc8:	2010      	movs	r0, #16
 8005cca:	f7ff fd7f 	bl	80057cc <malloc>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	61f0      	str	r0, [r6, #28]
 8005cd2:	b928      	cbnz	r0, 8005ce0 <__pow5mult+0x40>
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <__pow5mult+0xac>)
 8005cd6:	481e      	ldr	r0, [pc, #120]	; (8005d50 <__pow5mult+0xb0>)
 8005cd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005cdc:	f000 fbe4 	bl	80064a8 <__assert_func>
 8005ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ce4:	6004      	str	r4, [r0, #0]
 8005ce6:	60c4      	str	r4, [r0, #12]
 8005ce8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cf0:	b94c      	cbnz	r4, 8005d06 <__pow5mult+0x66>
 8005cf2:	f240 2171 	movw	r1, #625	; 0x271
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f7ff ff12 	bl	8005b20 <__i2b>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d02:	4604      	mov	r4, r0
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	f04f 0900 	mov.w	r9, #0
 8005d0a:	07eb      	lsls	r3, r5, #31
 8005d0c:	d50a      	bpl.n	8005d24 <__pow5mult+0x84>
 8005d0e:	4639      	mov	r1, r7
 8005d10:	4622      	mov	r2, r4
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ff1a 	bl	8005b4c <__multiply>
 8005d18:	4639      	mov	r1, r7
 8005d1a:	4680      	mov	r8, r0
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff fe49 	bl	80059b4 <_Bfree>
 8005d22:	4647      	mov	r7, r8
 8005d24:	106d      	asrs	r5, r5, #1
 8005d26:	d00b      	beq.n	8005d40 <__pow5mult+0xa0>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	b938      	cbnz	r0, 8005d3c <__pow5mult+0x9c>
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4630      	mov	r0, r6
 8005d32:	f7ff ff0b 	bl	8005b4c <__multiply>
 8005d36:	6020      	str	r0, [r4, #0]
 8005d38:	f8c0 9000 	str.w	r9, [r0]
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	e7e4      	b.n	8005d0a <__pow5mult+0x6a>
 8005d40:	4638      	mov	r0, r7
 8005d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d46:	bf00      	nop
 8005d48:	08006dd0 	.word	0x08006dd0
 8005d4c:	08006c05 	.word	0x08006c05
 8005d50:	08006c85 	.word	0x08006c85

08005d54 <__lshift>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	460c      	mov	r4, r1
 8005d5a:	6849      	ldr	r1, [r1, #4]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d62:	68a3      	ldr	r3, [r4, #8]
 8005d64:	4607      	mov	r7, r0
 8005d66:	4691      	mov	r9, r2
 8005d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d6c:	f108 0601 	add.w	r6, r8, #1
 8005d70:	42b3      	cmp	r3, r6
 8005d72:	db0b      	blt.n	8005d8c <__lshift+0x38>
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff fddd 	bl	8005934 <_Balloc>
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	b948      	cbnz	r0, 8005d92 <__lshift+0x3e>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <__lshift+0xd0>)
 8005d82:	4829      	ldr	r0, [pc, #164]	; (8005e28 <__lshift+0xd4>)
 8005d84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d88:	f000 fb8e 	bl	80064a8 <__assert_func>
 8005d8c:	3101      	adds	r1, #1
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	e7ee      	b.n	8005d70 <__lshift+0x1c>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f100 0114 	add.w	r1, r0, #20
 8005d98:	f100 0210 	add.w	r2, r0, #16
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	4553      	cmp	r3, sl
 8005da0:	db33      	blt.n	8005e0a <__lshift+0xb6>
 8005da2:	6920      	ldr	r0, [r4, #16]
 8005da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005da8:	f104 0314 	add.w	r3, r4, #20
 8005dac:	f019 091f 	ands.w	r9, r9, #31
 8005db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005db4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005db8:	d02b      	beq.n	8005e12 <__lshift+0xbe>
 8005dba:	f1c9 0e20 	rsb	lr, r9, #32
 8005dbe:	468a      	mov	sl, r1
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	fa00 f009 	lsl.w	r0, r0, r9
 8005dc8:	4310      	orrs	r0, r2
 8005dca:	f84a 0b04 	str.w	r0, [sl], #4
 8005dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd2:	459c      	cmp	ip, r3
 8005dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005dd8:	d8f3      	bhi.n	8005dc2 <__lshift+0x6e>
 8005dda:	ebac 0304 	sub.w	r3, ip, r4
 8005dde:	3b15      	subs	r3, #21
 8005de0:	f023 0303 	bic.w	r3, r3, #3
 8005de4:	3304      	adds	r3, #4
 8005de6:	f104 0015 	add.w	r0, r4, #21
 8005dea:	4584      	cmp	ip, r0
 8005dec:	bf38      	it	cc
 8005dee:	2304      	movcc	r3, #4
 8005df0:	50ca      	str	r2, [r1, r3]
 8005df2:	b10a      	cbz	r2, 8005df8 <__lshift+0xa4>
 8005df4:	f108 0602 	add.w	r6, r8, #2
 8005df8:	3e01      	subs	r6, #1
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	612e      	str	r6, [r5, #16]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f7ff fdd8 	bl	80059b4 <_Bfree>
 8005e04:	4628      	mov	r0, r5
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e0e:	3301      	adds	r3, #1
 8005e10:	e7c5      	b.n	8005d9e <__lshift+0x4a>
 8005e12:	3904      	subs	r1, #4
 8005e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e1c:	459c      	cmp	ip, r3
 8005e1e:	d8f9      	bhi.n	8005e14 <__lshift+0xc0>
 8005e20:	e7ea      	b.n	8005df8 <__lshift+0xa4>
 8005e22:	bf00      	nop
 8005e24:	08006c74 	.word	0x08006c74
 8005e28:	08006c85 	.word	0x08006c85

08005e2c <__mcmp>:
 8005e2c:	b530      	push	{r4, r5, lr}
 8005e2e:	6902      	ldr	r2, [r0, #16]
 8005e30:	690c      	ldr	r4, [r1, #16]
 8005e32:	1b12      	subs	r2, r2, r4
 8005e34:	d10e      	bne.n	8005e54 <__mcmp+0x28>
 8005e36:	f100 0314 	add.w	r3, r0, #20
 8005e3a:	3114      	adds	r1, #20
 8005e3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e4c:	42a5      	cmp	r5, r4
 8005e4e:	d003      	beq.n	8005e58 <__mcmp+0x2c>
 8005e50:	d305      	bcc.n	8005e5e <__mcmp+0x32>
 8005e52:	2201      	movs	r2, #1
 8005e54:	4610      	mov	r0, r2
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	4283      	cmp	r3, r0
 8005e5a:	d3f3      	bcc.n	8005e44 <__mcmp+0x18>
 8005e5c:	e7fa      	b.n	8005e54 <__mcmp+0x28>
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	e7f7      	b.n	8005e54 <__mcmp+0x28>

08005e64 <__mdiff>:
 8005e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4690      	mov	r8, r2
 8005e72:	f7ff ffdb 	bl	8005e2c <__mcmp>
 8005e76:	1e05      	subs	r5, r0, #0
 8005e78:	d110      	bne.n	8005e9c <__mdiff+0x38>
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff fd59 	bl	8005934 <_Balloc>
 8005e82:	b930      	cbnz	r0, 8005e92 <__mdiff+0x2e>
 8005e84:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <__mdiff+0x10c>)
 8005e86:	4602      	mov	r2, r0
 8005e88:	f240 2137 	movw	r1, #567	; 0x237
 8005e8c:	4839      	ldr	r0, [pc, #228]	; (8005f74 <__mdiff+0x110>)
 8005e8e:	f000 fb0b 	bl	80064a8 <__assert_func>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	bfa4      	itt	ge
 8005e9e:	4643      	movge	r3, r8
 8005ea0:	46a0      	movge	r8, r4
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ea8:	bfa6      	itte	ge
 8005eaa:	461c      	movge	r4, r3
 8005eac:	2500      	movge	r5, #0
 8005eae:	2501      	movlt	r5, #1
 8005eb0:	f7ff fd40 	bl	8005934 <_Balloc>
 8005eb4:	b920      	cbnz	r0, 8005ec0 <__mdiff+0x5c>
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <__mdiff+0x10c>)
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f240 2145 	movw	r1, #581	; 0x245
 8005ebe:	e7e5      	b.n	8005e8c <__mdiff+0x28>
 8005ec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ec4:	6926      	ldr	r6, [r4, #16]
 8005ec6:	60c5      	str	r5, [r0, #12]
 8005ec8:	f104 0914 	add.w	r9, r4, #20
 8005ecc:	f108 0514 	add.w	r5, r8, #20
 8005ed0:	f100 0e14 	add.w	lr, r0, #20
 8005ed4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005edc:	f108 0210 	add.w	r2, r8, #16
 8005ee0:	46f2      	mov	sl, lr
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005eec:	fa11 f88b 	uxtah	r8, r1, fp
 8005ef0:	b299      	uxth	r1, r3
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	eba8 0801 	sub.w	r8, r8, r1
 8005ef8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005efc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f00:	fa1f f888 	uxth.w	r8, r8
 8005f04:	1419      	asrs	r1, r3, #16
 8005f06:	454e      	cmp	r6, r9
 8005f08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f0c:	f84a 3b04 	str.w	r3, [sl], #4
 8005f10:	d8e8      	bhi.n	8005ee4 <__mdiff+0x80>
 8005f12:	1b33      	subs	r3, r6, r4
 8005f14:	3b15      	subs	r3, #21
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	3415      	adds	r4, #21
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	bf38      	it	cc
 8005f22:	2304      	movcc	r3, #4
 8005f24:	441d      	add	r5, r3
 8005f26:	4473      	add	r3, lr
 8005f28:	469e      	mov	lr, r3
 8005f2a:	462e      	mov	r6, r5
 8005f2c:	4566      	cmp	r6, ip
 8005f2e:	d30e      	bcc.n	8005f4e <__mdiff+0xea>
 8005f30:	f10c 0203 	add.w	r2, ip, #3
 8005f34:	1b52      	subs	r2, r2, r5
 8005f36:	f022 0203 	bic.w	r2, r2, #3
 8005f3a:	3d03      	subs	r5, #3
 8005f3c:	45ac      	cmp	ip, r5
 8005f3e:	bf38      	it	cc
 8005f40:	2200      	movcc	r2, #0
 8005f42:	4413      	add	r3, r2
 8005f44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f48:	b17a      	cbz	r2, 8005f6a <__mdiff+0x106>
 8005f4a:	6107      	str	r7, [r0, #16]
 8005f4c:	e7a4      	b.n	8005e98 <__mdiff+0x34>
 8005f4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f52:	fa11 f288 	uxtah	r2, r1, r8
 8005f56:	1414      	asrs	r4, r2, #16
 8005f58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005f62:	f84e 2b04 	str.w	r2, [lr], #4
 8005f66:	1421      	asrs	r1, r4, #16
 8005f68:	e7e0      	b.n	8005f2c <__mdiff+0xc8>
 8005f6a:	3f01      	subs	r7, #1
 8005f6c:	e7ea      	b.n	8005f44 <__mdiff+0xe0>
 8005f6e:	bf00      	nop
 8005f70:	08006c74 	.word	0x08006c74
 8005f74:	08006c85 	.word	0x08006c85

08005f78 <__d2b>:
 8005f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	2101      	movs	r1, #1
 8005f80:	ec59 8b10 	vmov	r8, r9, d0
 8005f84:	4616      	mov	r6, r2
 8005f86:	f7ff fcd5 	bl	8005934 <_Balloc>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b930      	cbnz	r0, 8005f9c <__d2b+0x24>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <__d2b+0xac>)
 8005f92:	4825      	ldr	r0, [pc, #148]	; (8006028 <__d2b+0xb0>)
 8005f94:	f240 310f 	movw	r1, #783	; 0x30f
 8005f98:	f000 fa86 	bl	80064a8 <__assert_func>
 8005f9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fa4:	bb2d      	cbnz	r5, 8005ff2 <__d2b+0x7a>
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	f1b8 0300 	subs.w	r3, r8, #0
 8005fac:	d026      	beq.n	8005ffc <__d2b+0x84>
 8005fae:	4668      	mov	r0, sp
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	f7ff fd87 	bl	8005ac4 <__lo0bits>
 8005fb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005fba:	b1e8      	cbz	r0, 8005ff8 <__d2b+0x80>
 8005fbc:	f1c0 0320 	rsb	r3, r0, #32
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	40c2      	lsrs	r2, r0
 8005fc8:	6163      	str	r3, [r4, #20]
 8005fca:	9201      	str	r2, [sp, #4]
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	61a3      	str	r3, [r4, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf14      	ite	ne
 8005fd4:	2202      	movne	r2, #2
 8005fd6:	2201      	moveq	r2, #1
 8005fd8:	6122      	str	r2, [r4, #16]
 8005fda:	b1bd      	cbz	r5, 800600c <__d2b+0x94>
 8005fdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005fe0:	4405      	add	r5, r0
 8005fe2:	603d      	str	r5, [r7, #0]
 8005fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4620      	mov	r0, r4
 8005fec:	b003      	add	sp, #12
 8005fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff6:	e7d6      	b.n	8005fa6 <__d2b+0x2e>
 8005ff8:	6161      	str	r1, [r4, #20]
 8005ffa:	e7e7      	b.n	8005fcc <__d2b+0x54>
 8005ffc:	a801      	add	r0, sp, #4
 8005ffe:	f7ff fd61 	bl	8005ac4 <__lo0bits>
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	6163      	str	r3, [r4, #20]
 8006006:	3020      	adds	r0, #32
 8006008:	2201      	movs	r2, #1
 800600a:	e7e5      	b.n	8005fd8 <__d2b+0x60>
 800600c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006014:	6038      	str	r0, [r7, #0]
 8006016:	6918      	ldr	r0, [r3, #16]
 8006018:	f7ff fd34 	bl	8005a84 <__hi0bits>
 800601c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006020:	e7e2      	b.n	8005fe8 <__d2b+0x70>
 8006022:	bf00      	nop
 8006024:	08006c74 	.word	0x08006c74
 8006028:	08006c85 	.word	0x08006c85

0800602c <__ssputs_r>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	688e      	ldr	r6, [r1, #8]
 8006032:	461f      	mov	r7, r3
 8006034:	42be      	cmp	r6, r7
 8006036:	680b      	ldr	r3, [r1, #0]
 8006038:	4682      	mov	sl, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4690      	mov	r8, r2
 800603e:	d82c      	bhi.n	800609a <__ssputs_r+0x6e>
 8006040:	898a      	ldrh	r2, [r1, #12]
 8006042:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006046:	d026      	beq.n	8006096 <__ssputs_r+0x6a>
 8006048:	6965      	ldr	r5, [r4, #20]
 800604a:	6909      	ldr	r1, [r1, #16]
 800604c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006050:	eba3 0901 	sub.w	r9, r3, r1
 8006054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006058:	1c7b      	adds	r3, r7, #1
 800605a:	444b      	add	r3, r9
 800605c:	106d      	asrs	r5, r5, #1
 800605e:	429d      	cmp	r5, r3
 8006060:	bf38      	it	cc
 8006062:	461d      	movcc	r5, r3
 8006064:	0553      	lsls	r3, r2, #21
 8006066:	d527      	bpl.n	80060b8 <__ssputs_r+0x8c>
 8006068:	4629      	mov	r1, r5
 800606a:	f7ff fbd7 	bl	800581c <_malloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	b360      	cbz	r0, 80060cc <__ssputs_r+0xa0>
 8006072:	6921      	ldr	r1, [r4, #16]
 8006074:	464a      	mov	r2, r9
 8006076:	f000 fa09 	bl	800648c <memcpy>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	6126      	str	r6, [r4, #16]
 8006088:	6165      	str	r5, [r4, #20]
 800608a:	444e      	add	r6, r9
 800608c:	eba5 0509 	sub.w	r5, r5, r9
 8006090:	6026      	str	r6, [r4, #0]
 8006092:	60a5      	str	r5, [r4, #8]
 8006094:	463e      	mov	r6, r7
 8006096:	42be      	cmp	r6, r7
 8006098:	d900      	bls.n	800609c <__ssputs_r+0x70>
 800609a:	463e      	mov	r6, r7
 800609c:	6820      	ldr	r0, [r4, #0]
 800609e:	4632      	mov	r2, r6
 80060a0:	4641      	mov	r1, r8
 80060a2:	f000 f9c9 	bl	8006438 <memmove>
 80060a6:	68a3      	ldr	r3, [r4, #8]
 80060a8:	1b9b      	subs	r3, r3, r6
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	4433      	add	r3, r6
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	2000      	movs	r0, #0
 80060b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b8:	462a      	mov	r2, r5
 80060ba:	f000 fa3b 	bl	8006534 <_realloc_r>
 80060be:	4606      	mov	r6, r0
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1e0      	bne.n	8006086 <__ssputs_r+0x5a>
 80060c4:	6921      	ldr	r1, [r4, #16]
 80060c6:	4650      	mov	r0, sl
 80060c8:	f7ff fb34 	bl	8005734 <_free_r>
 80060cc:	230c      	movs	r3, #12
 80060ce:	f8ca 3000 	str.w	r3, [sl]
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e7e9      	b.n	80060b4 <__ssputs_r+0x88>

080060e0 <_svfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	4698      	mov	r8, r3
 80060e6:	898b      	ldrh	r3, [r1, #12]
 80060e8:	061b      	lsls	r3, r3, #24
 80060ea:	b09d      	sub	sp, #116	; 0x74
 80060ec:	4607      	mov	r7, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	d50e      	bpl.n	8006112 <_svfiprintf_r+0x32>
 80060f4:	690b      	ldr	r3, [r1, #16]
 80060f6:	b963      	cbnz	r3, 8006112 <_svfiprintf_r+0x32>
 80060f8:	2140      	movs	r1, #64	; 0x40
 80060fa:	f7ff fb8f 	bl	800581c <_malloc_r>
 80060fe:	6028      	str	r0, [r5, #0]
 8006100:	6128      	str	r0, [r5, #16]
 8006102:	b920      	cbnz	r0, 800610e <_svfiprintf_r+0x2e>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e0d0      	b.n	80062b0 <_svfiprintf_r+0x1d0>
 800610e:	2340      	movs	r3, #64	; 0x40
 8006110:	616b      	str	r3, [r5, #20]
 8006112:	2300      	movs	r3, #0
 8006114:	9309      	str	r3, [sp, #36]	; 0x24
 8006116:	2320      	movs	r3, #32
 8006118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800611c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006120:	2330      	movs	r3, #48	; 0x30
 8006122:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80062c8 <_svfiprintf_r+0x1e8>
 8006126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800612a:	f04f 0901 	mov.w	r9, #1
 800612e:	4623      	mov	r3, r4
 8006130:	469a      	mov	sl, r3
 8006132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006136:	b10a      	cbz	r2, 800613c <_svfiprintf_r+0x5c>
 8006138:	2a25      	cmp	r2, #37	; 0x25
 800613a:	d1f9      	bne.n	8006130 <_svfiprintf_r+0x50>
 800613c:	ebba 0b04 	subs.w	fp, sl, r4
 8006140:	d00b      	beq.n	800615a <_svfiprintf_r+0x7a>
 8006142:	465b      	mov	r3, fp
 8006144:	4622      	mov	r2, r4
 8006146:	4629      	mov	r1, r5
 8006148:	4638      	mov	r0, r7
 800614a:	f7ff ff6f 	bl	800602c <__ssputs_r>
 800614e:	3001      	adds	r0, #1
 8006150:	f000 80a9 	beq.w	80062a6 <_svfiprintf_r+0x1c6>
 8006154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006156:	445a      	add	r2, fp
 8006158:	9209      	str	r2, [sp, #36]	; 0x24
 800615a:	f89a 3000 	ldrb.w	r3, [sl]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80a1 	beq.w	80062a6 <_svfiprintf_r+0x1c6>
 8006164:	2300      	movs	r3, #0
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800616e:	f10a 0a01 	add.w	sl, sl, #1
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	9307      	str	r3, [sp, #28]
 8006176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800617a:	931a      	str	r3, [sp, #104]	; 0x68
 800617c:	4654      	mov	r4, sl
 800617e:	2205      	movs	r2, #5
 8006180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006184:	4850      	ldr	r0, [pc, #320]	; (80062c8 <_svfiprintf_r+0x1e8>)
 8006186:	f7fa f823 	bl	80001d0 <memchr>
 800618a:	9a04      	ldr	r2, [sp, #16]
 800618c:	b9d8      	cbnz	r0, 80061c6 <_svfiprintf_r+0xe6>
 800618e:	06d0      	lsls	r0, r2, #27
 8006190:	bf44      	itt	mi
 8006192:	2320      	movmi	r3, #32
 8006194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006198:	0711      	lsls	r1, r2, #28
 800619a:	bf44      	itt	mi
 800619c:	232b      	movmi	r3, #43	; 0x2b
 800619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a2:	f89a 3000 	ldrb.w	r3, [sl]
 80061a6:	2b2a      	cmp	r3, #42	; 0x2a
 80061a8:	d015      	beq.n	80061d6 <_svfiprintf_r+0xf6>
 80061aa:	9a07      	ldr	r2, [sp, #28]
 80061ac:	4654      	mov	r4, sl
 80061ae:	2000      	movs	r0, #0
 80061b0:	f04f 0c0a 	mov.w	ip, #10
 80061b4:	4621      	mov	r1, r4
 80061b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ba:	3b30      	subs	r3, #48	; 0x30
 80061bc:	2b09      	cmp	r3, #9
 80061be:	d94d      	bls.n	800625c <_svfiprintf_r+0x17c>
 80061c0:	b1b0      	cbz	r0, 80061f0 <_svfiprintf_r+0x110>
 80061c2:	9207      	str	r2, [sp, #28]
 80061c4:	e014      	b.n	80061f0 <_svfiprintf_r+0x110>
 80061c6:	eba0 0308 	sub.w	r3, r0, r8
 80061ca:	fa09 f303 	lsl.w	r3, r9, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	46a2      	mov	sl, r4
 80061d4:	e7d2      	b.n	800617c <_svfiprintf_r+0x9c>
 80061d6:	9b03      	ldr	r3, [sp, #12]
 80061d8:	1d19      	adds	r1, r3, #4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	9103      	str	r1, [sp, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bfbb      	ittet	lt
 80061e2:	425b      	neglt	r3, r3
 80061e4:	f042 0202 	orrlt.w	r2, r2, #2
 80061e8:	9307      	strge	r3, [sp, #28]
 80061ea:	9307      	strlt	r3, [sp, #28]
 80061ec:	bfb8      	it	lt
 80061ee:	9204      	strlt	r2, [sp, #16]
 80061f0:	7823      	ldrb	r3, [r4, #0]
 80061f2:	2b2e      	cmp	r3, #46	; 0x2e
 80061f4:	d10c      	bne.n	8006210 <_svfiprintf_r+0x130>
 80061f6:	7863      	ldrb	r3, [r4, #1]
 80061f8:	2b2a      	cmp	r3, #42	; 0x2a
 80061fa:	d134      	bne.n	8006266 <_svfiprintf_r+0x186>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	9203      	str	r2, [sp, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfb8      	it	lt
 8006208:	f04f 33ff 	movlt.w	r3, #4294967295
 800620c:	3402      	adds	r4, #2
 800620e:	9305      	str	r3, [sp, #20]
 8006210:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80062d8 <_svfiprintf_r+0x1f8>
 8006214:	7821      	ldrb	r1, [r4, #0]
 8006216:	2203      	movs	r2, #3
 8006218:	4650      	mov	r0, sl
 800621a:	f7f9 ffd9 	bl	80001d0 <memchr>
 800621e:	b138      	cbz	r0, 8006230 <_svfiprintf_r+0x150>
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	eba0 000a 	sub.w	r0, r0, sl
 8006226:	2240      	movs	r2, #64	; 0x40
 8006228:	4082      	lsls	r2, r0
 800622a:	4313      	orrs	r3, r2
 800622c:	3401      	adds	r4, #1
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	4825      	ldr	r0, [pc, #148]	; (80062cc <_svfiprintf_r+0x1ec>)
 8006236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800623a:	2206      	movs	r2, #6
 800623c:	f7f9 ffc8 	bl	80001d0 <memchr>
 8006240:	2800      	cmp	r0, #0
 8006242:	d038      	beq.n	80062b6 <_svfiprintf_r+0x1d6>
 8006244:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <_svfiprintf_r+0x1f0>)
 8006246:	bb1b      	cbnz	r3, 8006290 <_svfiprintf_r+0x1b0>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	3307      	adds	r3, #7
 800624c:	f023 0307 	bic.w	r3, r3, #7
 8006250:	3308      	adds	r3, #8
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006256:	4433      	add	r3, r6
 8006258:	9309      	str	r3, [sp, #36]	; 0x24
 800625a:	e768      	b.n	800612e <_svfiprintf_r+0x4e>
 800625c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006260:	460c      	mov	r4, r1
 8006262:	2001      	movs	r0, #1
 8006264:	e7a6      	b.n	80061b4 <_svfiprintf_r+0xd4>
 8006266:	2300      	movs	r3, #0
 8006268:	3401      	adds	r4, #1
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	4619      	mov	r1, r3
 800626e:	f04f 0c0a 	mov.w	ip, #10
 8006272:	4620      	mov	r0, r4
 8006274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006278:	3a30      	subs	r2, #48	; 0x30
 800627a:	2a09      	cmp	r2, #9
 800627c:	d903      	bls.n	8006286 <_svfiprintf_r+0x1a6>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0c6      	beq.n	8006210 <_svfiprintf_r+0x130>
 8006282:	9105      	str	r1, [sp, #20]
 8006284:	e7c4      	b.n	8006210 <_svfiprintf_r+0x130>
 8006286:	fb0c 2101 	mla	r1, ip, r1, r2
 800628a:	4604      	mov	r4, r0
 800628c:	2301      	movs	r3, #1
 800628e:	e7f0      	b.n	8006272 <_svfiprintf_r+0x192>
 8006290:	ab03      	add	r3, sp, #12
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	462a      	mov	r2, r5
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <_svfiprintf_r+0x1f4>)
 8006298:	a904      	add	r1, sp, #16
 800629a:	4638      	mov	r0, r7
 800629c:	f7fd fe64 	bl	8003f68 <_printf_float>
 80062a0:	1c42      	adds	r2, r0, #1
 80062a2:	4606      	mov	r6, r0
 80062a4:	d1d6      	bne.n	8006254 <_svfiprintf_r+0x174>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	065b      	lsls	r3, r3, #25
 80062aa:	f53f af2d 	bmi.w	8006108 <_svfiprintf_r+0x28>
 80062ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062b0:	b01d      	add	sp, #116	; 0x74
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	ab03      	add	r3, sp, #12
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	462a      	mov	r2, r5
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <_svfiprintf_r+0x1f4>)
 80062be:	a904      	add	r1, sp, #16
 80062c0:	4638      	mov	r0, r7
 80062c2:	f7fe f8f5 	bl	80044b0 <_printf_i>
 80062c6:	e7eb      	b.n	80062a0 <_svfiprintf_r+0x1c0>
 80062c8:	08006ddc 	.word	0x08006ddc
 80062cc:	08006de6 	.word	0x08006de6
 80062d0:	08003f69 	.word	0x08003f69
 80062d4:	0800602d 	.word	0x0800602d
 80062d8:	08006de2 	.word	0x08006de2

080062dc <__sflush_r>:
 80062dc:	898a      	ldrh	r2, [r1, #12]
 80062de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e2:	4605      	mov	r5, r0
 80062e4:	0710      	lsls	r0, r2, #28
 80062e6:	460c      	mov	r4, r1
 80062e8:	d458      	bmi.n	800639c <__sflush_r+0xc0>
 80062ea:	684b      	ldr	r3, [r1, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dc05      	bgt.n	80062fc <__sflush_r+0x20>
 80062f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	dc02      	bgt.n	80062fc <__sflush_r+0x20>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062fe:	2e00      	cmp	r6, #0
 8006300:	d0f9      	beq.n	80062f6 <__sflush_r+0x1a>
 8006302:	2300      	movs	r3, #0
 8006304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006308:	682f      	ldr	r7, [r5, #0]
 800630a:	6a21      	ldr	r1, [r4, #32]
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	d032      	beq.n	8006376 <__sflush_r+0x9a>
 8006310:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	075a      	lsls	r2, r3, #29
 8006316:	d505      	bpl.n	8006324 <__sflush_r+0x48>
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	1ac0      	subs	r0, r0, r3
 800631c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800631e:	b10b      	cbz	r3, 8006324 <__sflush_r+0x48>
 8006320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006322:	1ac0      	subs	r0, r0, r3
 8006324:	2300      	movs	r3, #0
 8006326:	4602      	mov	r2, r0
 8006328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632a:	6a21      	ldr	r1, [r4, #32]
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	d106      	bne.n	8006344 <__sflush_r+0x68>
 8006336:	6829      	ldr	r1, [r5, #0]
 8006338:	291d      	cmp	r1, #29
 800633a:	d82b      	bhi.n	8006394 <__sflush_r+0xb8>
 800633c:	4a29      	ldr	r2, [pc, #164]	; (80063e4 <__sflush_r+0x108>)
 800633e:	410a      	asrs	r2, r1
 8006340:	07d6      	lsls	r6, r2, #31
 8006342:	d427      	bmi.n	8006394 <__sflush_r+0xb8>
 8006344:	2200      	movs	r2, #0
 8006346:	6062      	str	r2, [r4, #4]
 8006348:	04d9      	lsls	r1, r3, #19
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	d504      	bpl.n	800635a <__sflush_r+0x7e>
 8006350:	1c42      	adds	r2, r0, #1
 8006352:	d101      	bne.n	8006358 <__sflush_r+0x7c>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b903      	cbnz	r3, 800635a <__sflush_r+0x7e>
 8006358:	6560      	str	r0, [r4, #84]	; 0x54
 800635a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800635c:	602f      	str	r7, [r5, #0]
 800635e:	2900      	cmp	r1, #0
 8006360:	d0c9      	beq.n	80062f6 <__sflush_r+0x1a>
 8006362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006366:	4299      	cmp	r1, r3
 8006368:	d002      	beq.n	8006370 <__sflush_r+0x94>
 800636a:	4628      	mov	r0, r5
 800636c:	f7ff f9e2 	bl	8005734 <_free_r>
 8006370:	2000      	movs	r0, #0
 8006372:	6360      	str	r0, [r4, #52]	; 0x34
 8006374:	e7c0      	b.n	80062f8 <__sflush_r+0x1c>
 8006376:	2301      	movs	r3, #1
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	1c41      	adds	r1, r0, #1
 800637e:	d1c8      	bne.n	8006312 <__sflush_r+0x36>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0c5      	beq.n	8006312 <__sflush_r+0x36>
 8006386:	2b1d      	cmp	r3, #29
 8006388:	d001      	beq.n	800638e <__sflush_r+0xb2>
 800638a:	2b16      	cmp	r3, #22
 800638c:	d101      	bne.n	8006392 <__sflush_r+0xb6>
 800638e:	602f      	str	r7, [r5, #0]
 8006390:	e7b1      	b.n	80062f6 <__sflush_r+0x1a>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	e7ad      	b.n	80062f8 <__sflush_r+0x1c>
 800639c:	690f      	ldr	r7, [r1, #16]
 800639e:	2f00      	cmp	r7, #0
 80063a0:	d0a9      	beq.n	80062f6 <__sflush_r+0x1a>
 80063a2:	0793      	lsls	r3, r2, #30
 80063a4:	680e      	ldr	r6, [r1, #0]
 80063a6:	bf08      	it	eq
 80063a8:	694b      	ldreq	r3, [r1, #20]
 80063aa:	600f      	str	r7, [r1, #0]
 80063ac:	bf18      	it	ne
 80063ae:	2300      	movne	r3, #0
 80063b0:	eba6 0807 	sub.w	r8, r6, r7
 80063b4:	608b      	str	r3, [r1, #8]
 80063b6:	f1b8 0f00 	cmp.w	r8, #0
 80063ba:	dd9c      	ble.n	80062f6 <__sflush_r+0x1a>
 80063bc:	6a21      	ldr	r1, [r4, #32]
 80063be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063c0:	4643      	mov	r3, r8
 80063c2:	463a      	mov	r2, r7
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	2800      	cmp	r0, #0
 80063ca:	dc06      	bgt.n	80063da <__sflush_r+0xfe>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	e78e      	b.n	80062f8 <__sflush_r+0x1c>
 80063da:	4407      	add	r7, r0
 80063dc:	eba8 0800 	sub.w	r8, r8, r0
 80063e0:	e7e9      	b.n	80063b6 <__sflush_r+0xda>
 80063e2:	bf00      	nop
 80063e4:	dfbffffe 	.word	0xdfbffffe

080063e8 <_fflush_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	4605      	mov	r5, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	b913      	cbnz	r3, 80063f8 <_fflush_r+0x10>
 80063f2:	2500      	movs	r5, #0
 80063f4:	4628      	mov	r0, r5
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	b118      	cbz	r0, 8006402 <_fflush_r+0x1a>
 80063fa:	6a03      	ldr	r3, [r0, #32]
 80063fc:	b90b      	cbnz	r3, 8006402 <_fflush_r+0x1a>
 80063fe:	f7fe fa05 	bl	800480c <__sinit>
 8006402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f3      	beq.n	80063f2 <_fflush_r+0xa>
 800640a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800640c:	07d0      	lsls	r0, r2, #31
 800640e:	d404      	bmi.n	800641a <_fflush_r+0x32>
 8006410:	0599      	lsls	r1, r3, #22
 8006412:	d402      	bmi.n	800641a <_fflush_r+0x32>
 8006414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006416:	f7fe fb10 	bl	8004a3a <__retarget_lock_acquire_recursive>
 800641a:	4628      	mov	r0, r5
 800641c:	4621      	mov	r1, r4
 800641e:	f7ff ff5d 	bl	80062dc <__sflush_r>
 8006422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006424:	07da      	lsls	r2, r3, #31
 8006426:	4605      	mov	r5, r0
 8006428:	d4e4      	bmi.n	80063f4 <_fflush_r+0xc>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	059b      	lsls	r3, r3, #22
 800642e:	d4e1      	bmi.n	80063f4 <_fflush_r+0xc>
 8006430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006432:	f7fe fb03 	bl	8004a3c <__retarget_lock_release_recursive>
 8006436:	e7dd      	b.n	80063f4 <_fflush_r+0xc>

08006438 <memmove>:
 8006438:	4288      	cmp	r0, r1
 800643a:	b510      	push	{r4, lr}
 800643c:	eb01 0402 	add.w	r4, r1, r2
 8006440:	d902      	bls.n	8006448 <memmove+0x10>
 8006442:	4284      	cmp	r4, r0
 8006444:	4623      	mov	r3, r4
 8006446:	d807      	bhi.n	8006458 <memmove+0x20>
 8006448:	1e43      	subs	r3, r0, #1
 800644a:	42a1      	cmp	r1, r4
 800644c:	d008      	beq.n	8006460 <memmove+0x28>
 800644e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006456:	e7f8      	b.n	800644a <memmove+0x12>
 8006458:	4402      	add	r2, r0
 800645a:	4601      	mov	r1, r0
 800645c:	428a      	cmp	r2, r1
 800645e:	d100      	bne.n	8006462 <memmove+0x2a>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800646a:	e7f7      	b.n	800645c <memmove+0x24>

0800646c <_sbrk_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d06      	ldr	r5, [pc, #24]	; (8006488 <_sbrk_r+0x1c>)
 8006470:	2300      	movs	r3, #0
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	f7fa ff72 	bl	8001360 <_sbrk>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_sbrk_r+0x1a>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_sbrk_r+0x1a>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	200004a8 	.word	0x200004a8

0800648c <memcpy>:
 800648c:	440a      	add	r2, r1
 800648e:	4291      	cmp	r1, r2
 8006490:	f100 33ff 	add.w	r3, r0, #4294967295
 8006494:	d100      	bne.n	8006498 <memcpy+0xc>
 8006496:	4770      	bx	lr
 8006498:	b510      	push	{r4, lr}
 800649a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a2:	4291      	cmp	r1, r2
 80064a4:	d1f9      	bne.n	800649a <memcpy+0xe>
 80064a6:	bd10      	pop	{r4, pc}

080064a8 <__assert_func>:
 80064a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064aa:	4614      	mov	r4, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <__assert_func+0x2c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4605      	mov	r5, r0
 80064b4:	68d8      	ldr	r0, [r3, #12]
 80064b6:	b14c      	cbz	r4, 80064cc <__assert_func+0x24>
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <__assert_func+0x30>)
 80064ba:	9100      	str	r1, [sp, #0]
 80064bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064c0:	4906      	ldr	r1, [pc, #24]	; (80064dc <__assert_func+0x34>)
 80064c2:	462b      	mov	r3, r5
 80064c4:	f000 f872 	bl	80065ac <fiprintf>
 80064c8:	f000 f882 	bl	80065d0 <abort>
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <__assert_func+0x38>)
 80064ce:	461c      	mov	r4, r3
 80064d0:	e7f3      	b.n	80064ba <__assert_func+0x12>
 80064d2:	bf00      	nop
 80064d4:	200000e4 	.word	0x200000e4
 80064d8:	08006df7 	.word	0x08006df7
 80064dc:	08006e04 	.word	0x08006e04
 80064e0:	08006e32 	.word	0x08006e32

080064e4 <_calloc_r>:
 80064e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064e6:	fba1 2402 	umull	r2, r4, r1, r2
 80064ea:	b94c      	cbnz	r4, 8006500 <_calloc_r+0x1c>
 80064ec:	4611      	mov	r1, r2
 80064ee:	9201      	str	r2, [sp, #4]
 80064f0:	f7ff f994 	bl	800581c <_malloc_r>
 80064f4:	9a01      	ldr	r2, [sp, #4]
 80064f6:	4605      	mov	r5, r0
 80064f8:	b930      	cbnz	r0, 8006508 <_calloc_r+0x24>
 80064fa:	4628      	mov	r0, r5
 80064fc:	b003      	add	sp, #12
 80064fe:	bd30      	pop	{r4, r5, pc}
 8006500:	220c      	movs	r2, #12
 8006502:	6002      	str	r2, [r0, #0]
 8006504:	2500      	movs	r5, #0
 8006506:	e7f8      	b.n	80064fa <_calloc_r+0x16>
 8006508:	4621      	mov	r1, r4
 800650a:	f7fe fa18 	bl	800493e <memset>
 800650e:	e7f4      	b.n	80064fa <_calloc_r+0x16>

08006510 <__ascii_mbtowc>:
 8006510:	b082      	sub	sp, #8
 8006512:	b901      	cbnz	r1, 8006516 <__ascii_mbtowc+0x6>
 8006514:	a901      	add	r1, sp, #4
 8006516:	b142      	cbz	r2, 800652a <__ascii_mbtowc+0x1a>
 8006518:	b14b      	cbz	r3, 800652e <__ascii_mbtowc+0x1e>
 800651a:	7813      	ldrb	r3, [r2, #0]
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	7812      	ldrb	r2, [r2, #0]
 8006520:	1e10      	subs	r0, r2, #0
 8006522:	bf18      	it	ne
 8006524:	2001      	movne	r0, #1
 8006526:	b002      	add	sp, #8
 8006528:	4770      	bx	lr
 800652a:	4610      	mov	r0, r2
 800652c:	e7fb      	b.n	8006526 <__ascii_mbtowc+0x16>
 800652e:	f06f 0001 	mvn.w	r0, #1
 8006532:	e7f8      	b.n	8006526 <__ascii_mbtowc+0x16>

08006534 <_realloc_r>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4680      	mov	r8, r0
 800653a:	4614      	mov	r4, r2
 800653c:	460e      	mov	r6, r1
 800653e:	b921      	cbnz	r1, 800654a <_realloc_r+0x16>
 8006540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	4611      	mov	r1, r2
 8006546:	f7ff b969 	b.w	800581c <_malloc_r>
 800654a:	b92a      	cbnz	r2, 8006558 <_realloc_r+0x24>
 800654c:	f7ff f8f2 	bl	8005734 <_free_r>
 8006550:	4625      	mov	r5, r4
 8006552:	4628      	mov	r0, r5
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006558:	f000 f841 	bl	80065de <_malloc_usable_size_r>
 800655c:	4284      	cmp	r4, r0
 800655e:	4607      	mov	r7, r0
 8006560:	d802      	bhi.n	8006568 <_realloc_r+0x34>
 8006562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006566:	d812      	bhi.n	800658e <_realloc_r+0x5a>
 8006568:	4621      	mov	r1, r4
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff f956 	bl	800581c <_malloc_r>
 8006570:	4605      	mov	r5, r0
 8006572:	2800      	cmp	r0, #0
 8006574:	d0ed      	beq.n	8006552 <_realloc_r+0x1e>
 8006576:	42bc      	cmp	r4, r7
 8006578:	4622      	mov	r2, r4
 800657a:	4631      	mov	r1, r6
 800657c:	bf28      	it	cs
 800657e:	463a      	movcs	r2, r7
 8006580:	f7ff ff84 	bl	800648c <memcpy>
 8006584:	4631      	mov	r1, r6
 8006586:	4640      	mov	r0, r8
 8006588:	f7ff f8d4 	bl	8005734 <_free_r>
 800658c:	e7e1      	b.n	8006552 <_realloc_r+0x1e>
 800658e:	4635      	mov	r5, r6
 8006590:	e7df      	b.n	8006552 <_realloc_r+0x1e>

08006592 <__ascii_wctomb>:
 8006592:	b149      	cbz	r1, 80065a8 <__ascii_wctomb+0x16>
 8006594:	2aff      	cmp	r2, #255	; 0xff
 8006596:	bf85      	ittet	hi
 8006598:	238a      	movhi	r3, #138	; 0x8a
 800659a:	6003      	strhi	r3, [r0, #0]
 800659c:	700a      	strbls	r2, [r1, #0]
 800659e:	f04f 30ff 	movhi.w	r0, #4294967295
 80065a2:	bf98      	it	ls
 80065a4:	2001      	movls	r0, #1
 80065a6:	4770      	bx	lr
 80065a8:	4608      	mov	r0, r1
 80065aa:	4770      	bx	lr

080065ac <fiprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	b503      	push	{r0, r1, lr}
 80065b0:	4601      	mov	r1, r0
 80065b2:	ab03      	add	r3, sp, #12
 80065b4:	4805      	ldr	r0, [pc, #20]	; (80065cc <fiprintf+0x20>)
 80065b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	f000 f83f 	bl	8006640 <_vfiprintf_r>
 80065c2:	b002      	add	sp, #8
 80065c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c8:	b003      	add	sp, #12
 80065ca:	4770      	bx	lr
 80065cc:	200000e4 	.word	0x200000e4

080065d0 <abort>:
 80065d0:	b508      	push	{r3, lr}
 80065d2:	2006      	movs	r0, #6
 80065d4:	f000 fa0c 	bl	80069f0 <raise>
 80065d8:	2001      	movs	r0, #1
 80065da:	f7fa fe49 	bl	8001270 <_exit>

080065de <_malloc_usable_size_r>:
 80065de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e2:	1f18      	subs	r0, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfbc      	itt	lt
 80065e8:	580b      	ldrlt	r3, [r1, r0]
 80065ea:	18c0      	addlt	r0, r0, r3
 80065ec:	4770      	bx	lr

080065ee <__sfputc_r>:
 80065ee:	6893      	ldr	r3, [r2, #8]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	b410      	push	{r4}
 80065f6:	6093      	str	r3, [r2, #8]
 80065f8:	da08      	bge.n	800660c <__sfputc_r+0x1e>
 80065fa:	6994      	ldr	r4, [r2, #24]
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	db01      	blt.n	8006604 <__sfputc_r+0x16>
 8006600:	290a      	cmp	r1, #10
 8006602:	d103      	bne.n	800660c <__sfputc_r+0x1e>
 8006604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006608:	f000 b934 	b.w	8006874 <__swbuf_r>
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	1c58      	adds	r0, r3, #1
 8006610:	6010      	str	r0, [r2, #0]
 8006612:	7019      	strb	r1, [r3, #0]
 8006614:	4608      	mov	r0, r1
 8006616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661a:	4770      	bx	lr

0800661c <__sfputs_r>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	4606      	mov	r6, r0
 8006620:	460f      	mov	r7, r1
 8006622:	4614      	mov	r4, r2
 8006624:	18d5      	adds	r5, r2, r3
 8006626:	42ac      	cmp	r4, r5
 8006628:	d101      	bne.n	800662e <__sfputs_r+0x12>
 800662a:	2000      	movs	r0, #0
 800662c:	e007      	b.n	800663e <__sfputs_r+0x22>
 800662e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006632:	463a      	mov	r2, r7
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff ffda 	bl	80065ee <__sfputc_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d1f3      	bne.n	8006626 <__sfputs_r+0xa>
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006640 <_vfiprintf_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	460d      	mov	r5, r1
 8006646:	b09d      	sub	sp, #116	; 0x74
 8006648:	4614      	mov	r4, r2
 800664a:	4698      	mov	r8, r3
 800664c:	4606      	mov	r6, r0
 800664e:	b118      	cbz	r0, 8006658 <_vfiprintf_r+0x18>
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	b90b      	cbnz	r3, 8006658 <_vfiprintf_r+0x18>
 8006654:	f7fe f8da 	bl	800480c <__sinit>
 8006658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665a:	07d9      	lsls	r1, r3, #31
 800665c:	d405      	bmi.n	800666a <_vfiprintf_r+0x2a>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	059a      	lsls	r2, r3, #22
 8006662:	d402      	bmi.n	800666a <_vfiprintf_r+0x2a>
 8006664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006666:	f7fe f9e8 	bl	8004a3a <__retarget_lock_acquire_recursive>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	071b      	lsls	r3, r3, #28
 800666e:	d501      	bpl.n	8006674 <_vfiprintf_r+0x34>
 8006670:	692b      	ldr	r3, [r5, #16]
 8006672:	b99b      	cbnz	r3, 800669c <_vfiprintf_r+0x5c>
 8006674:	4629      	mov	r1, r5
 8006676:	4630      	mov	r0, r6
 8006678:	f000 f93a 	bl	80068f0 <__swsetup_r>
 800667c:	b170      	cbz	r0, 800669c <_vfiprintf_r+0x5c>
 800667e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006680:	07dc      	lsls	r4, r3, #31
 8006682:	d504      	bpl.n	800668e <_vfiprintf_r+0x4e>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	b01d      	add	sp, #116	; 0x74
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	0598      	lsls	r0, r3, #22
 8006692:	d4f7      	bmi.n	8006684 <_vfiprintf_r+0x44>
 8006694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006696:	f7fe f9d1 	bl	8004a3c <__retarget_lock_release_recursive>
 800669a:	e7f3      	b.n	8006684 <_vfiprintf_r+0x44>
 800669c:	2300      	movs	r3, #0
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
 80066a0:	2320      	movs	r3, #32
 80066a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066aa:	2330      	movs	r3, #48	; 0x30
 80066ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006860 <_vfiprintf_r+0x220>
 80066b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b4:	f04f 0901 	mov.w	r9, #1
 80066b8:	4623      	mov	r3, r4
 80066ba:	469a      	mov	sl, r3
 80066bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c0:	b10a      	cbz	r2, 80066c6 <_vfiprintf_r+0x86>
 80066c2:	2a25      	cmp	r2, #37	; 0x25
 80066c4:	d1f9      	bne.n	80066ba <_vfiprintf_r+0x7a>
 80066c6:	ebba 0b04 	subs.w	fp, sl, r4
 80066ca:	d00b      	beq.n	80066e4 <_vfiprintf_r+0xa4>
 80066cc:	465b      	mov	r3, fp
 80066ce:	4622      	mov	r2, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ffa2 	bl	800661c <__sfputs_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	f000 80a9 	beq.w	8006830 <_vfiprintf_r+0x1f0>
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	445a      	add	r2, fp
 80066e2:	9209      	str	r2, [sp, #36]	; 0x24
 80066e4:	f89a 3000 	ldrb.w	r3, [sl]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a1 	beq.w	8006830 <_vfiprintf_r+0x1f0>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f8:	f10a 0a01 	add.w	sl, sl, #1
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	9307      	str	r3, [sp, #28]
 8006700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006704:	931a      	str	r3, [sp, #104]	; 0x68
 8006706:	4654      	mov	r4, sl
 8006708:	2205      	movs	r2, #5
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	4854      	ldr	r0, [pc, #336]	; (8006860 <_vfiprintf_r+0x220>)
 8006710:	f7f9 fd5e 	bl	80001d0 <memchr>
 8006714:	9a04      	ldr	r2, [sp, #16]
 8006716:	b9d8      	cbnz	r0, 8006750 <_vfiprintf_r+0x110>
 8006718:	06d1      	lsls	r1, r2, #27
 800671a:	bf44      	itt	mi
 800671c:	2320      	movmi	r3, #32
 800671e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006722:	0713      	lsls	r3, r2, #28
 8006724:	bf44      	itt	mi
 8006726:	232b      	movmi	r3, #43	; 0x2b
 8006728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672c:	f89a 3000 	ldrb.w	r3, [sl]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d015      	beq.n	8006760 <_vfiprintf_r+0x120>
 8006734:	9a07      	ldr	r2, [sp, #28]
 8006736:	4654      	mov	r4, sl
 8006738:	2000      	movs	r0, #0
 800673a:	f04f 0c0a 	mov.w	ip, #10
 800673e:	4621      	mov	r1, r4
 8006740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006744:	3b30      	subs	r3, #48	; 0x30
 8006746:	2b09      	cmp	r3, #9
 8006748:	d94d      	bls.n	80067e6 <_vfiprintf_r+0x1a6>
 800674a:	b1b0      	cbz	r0, 800677a <_vfiprintf_r+0x13a>
 800674c:	9207      	str	r2, [sp, #28]
 800674e:	e014      	b.n	800677a <_vfiprintf_r+0x13a>
 8006750:	eba0 0308 	sub.w	r3, r0, r8
 8006754:	fa09 f303 	lsl.w	r3, r9, r3
 8006758:	4313      	orrs	r3, r2
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	46a2      	mov	sl, r4
 800675e:	e7d2      	b.n	8006706 <_vfiprintf_r+0xc6>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9103      	str	r1, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfbb      	ittet	lt
 800676c:	425b      	neglt	r3, r3
 800676e:	f042 0202 	orrlt.w	r2, r2, #2
 8006772:	9307      	strge	r3, [sp, #28]
 8006774:	9307      	strlt	r3, [sp, #28]
 8006776:	bfb8      	it	lt
 8006778:	9204      	strlt	r2, [sp, #16]
 800677a:	7823      	ldrb	r3, [r4, #0]
 800677c:	2b2e      	cmp	r3, #46	; 0x2e
 800677e:	d10c      	bne.n	800679a <_vfiprintf_r+0x15a>
 8006780:	7863      	ldrb	r3, [r4, #1]
 8006782:	2b2a      	cmp	r3, #42	; 0x2a
 8006784:	d134      	bne.n	80067f0 <_vfiprintf_r+0x1b0>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	9203      	str	r2, [sp, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfb8      	it	lt
 8006792:	f04f 33ff 	movlt.w	r3, #4294967295
 8006796:	3402      	adds	r4, #2
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006870 <_vfiprintf_r+0x230>
 800679e:	7821      	ldrb	r1, [r4, #0]
 80067a0:	2203      	movs	r2, #3
 80067a2:	4650      	mov	r0, sl
 80067a4:	f7f9 fd14 	bl	80001d0 <memchr>
 80067a8:	b138      	cbz	r0, 80067ba <_vfiprintf_r+0x17a>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	eba0 000a 	sub.w	r0, r0, sl
 80067b0:	2240      	movs	r2, #64	; 0x40
 80067b2:	4082      	lsls	r2, r0
 80067b4:	4313      	orrs	r3, r2
 80067b6:	3401      	adds	r4, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067be:	4829      	ldr	r0, [pc, #164]	; (8006864 <_vfiprintf_r+0x224>)
 80067c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c4:	2206      	movs	r2, #6
 80067c6:	f7f9 fd03 	bl	80001d0 <memchr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d03f      	beq.n	800684e <_vfiprintf_r+0x20e>
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <_vfiprintf_r+0x228>)
 80067d0:	bb1b      	cbnz	r3, 800681a <_vfiprintf_r+0x1da>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	3308      	adds	r3, #8
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	443b      	add	r3, r7
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	e768      	b.n	80066b8 <_vfiprintf_r+0x78>
 80067e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ea:	460c      	mov	r4, r1
 80067ec:	2001      	movs	r0, #1
 80067ee:	e7a6      	b.n	800673e <_vfiprintf_r+0xfe>
 80067f0:	2300      	movs	r3, #0
 80067f2:	3401      	adds	r4, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	4619      	mov	r1, r3
 80067f8:	f04f 0c0a 	mov.w	ip, #10
 80067fc:	4620      	mov	r0, r4
 80067fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006802:	3a30      	subs	r2, #48	; 0x30
 8006804:	2a09      	cmp	r2, #9
 8006806:	d903      	bls.n	8006810 <_vfiprintf_r+0x1d0>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0c6      	beq.n	800679a <_vfiprintf_r+0x15a>
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	e7c4      	b.n	800679a <_vfiprintf_r+0x15a>
 8006810:	fb0c 2101 	mla	r1, ip, r1, r2
 8006814:	4604      	mov	r4, r0
 8006816:	2301      	movs	r3, #1
 8006818:	e7f0      	b.n	80067fc <_vfiprintf_r+0x1bc>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4b12      	ldr	r3, [pc, #72]	; (800686c <_vfiprintf_r+0x22c>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	4630      	mov	r0, r6
 8006826:	f7fd fb9f 	bl	8003f68 <_printf_float>
 800682a:	4607      	mov	r7, r0
 800682c:	1c78      	adds	r0, r7, #1
 800682e:	d1d6      	bne.n	80067de <_vfiprintf_r+0x19e>
 8006830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	d405      	bmi.n	8006842 <_vfiprintf_r+0x202>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d402      	bmi.n	8006842 <_vfiprintf_r+0x202>
 800683c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683e:	f7fe f8fd 	bl	8004a3c <__retarget_lock_release_recursive>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	065b      	lsls	r3, r3, #25
 8006846:	f53f af1d 	bmi.w	8006684 <_vfiprintf_r+0x44>
 800684a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800684c:	e71c      	b.n	8006688 <_vfiprintf_r+0x48>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <_vfiprintf_r+0x22c>)
 8006856:	a904      	add	r1, sp, #16
 8006858:	4630      	mov	r0, r6
 800685a:	f7fd fe29 	bl	80044b0 <_printf_i>
 800685e:	e7e4      	b.n	800682a <_vfiprintf_r+0x1ea>
 8006860:	08006ddc 	.word	0x08006ddc
 8006864:	08006de6 	.word	0x08006de6
 8006868:	08003f69 	.word	0x08003f69
 800686c:	0800661d 	.word	0x0800661d
 8006870:	08006de2 	.word	0x08006de2

08006874 <__swbuf_r>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	460e      	mov	r6, r1
 8006878:	4614      	mov	r4, r2
 800687a:	4605      	mov	r5, r0
 800687c:	b118      	cbz	r0, 8006886 <__swbuf_r+0x12>
 800687e:	6a03      	ldr	r3, [r0, #32]
 8006880:	b90b      	cbnz	r3, 8006886 <__swbuf_r+0x12>
 8006882:	f7fd ffc3 	bl	800480c <__sinit>
 8006886:	69a3      	ldr	r3, [r4, #24]
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	071a      	lsls	r2, r3, #28
 800688e:	d525      	bpl.n	80068dc <__swbuf_r+0x68>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	b31b      	cbz	r3, 80068dc <__swbuf_r+0x68>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	6922      	ldr	r2, [r4, #16]
 8006898:	1a98      	subs	r0, r3, r2
 800689a:	6963      	ldr	r3, [r4, #20]
 800689c:	b2f6      	uxtb	r6, r6
 800689e:	4283      	cmp	r3, r0
 80068a0:	4637      	mov	r7, r6
 80068a2:	dc04      	bgt.n	80068ae <__swbuf_r+0x3a>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	f7ff fd9e 	bl	80063e8 <_fflush_r>
 80068ac:	b9e0      	cbnz	r0, 80068e8 <__swbuf_r+0x74>
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	60a3      	str	r3, [r4, #8]
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	701e      	strb	r6, [r3, #0]
 80068bc:	6962      	ldr	r2, [r4, #20]
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d004      	beq.n	80068ce <__swbuf_r+0x5a>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	07db      	lsls	r3, r3, #31
 80068c8:	d506      	bpl.n	80068d8 <__swbuf_r+0x64>
 80068ca:	2e0a      	cmp	r6, #10
 80068cc:	d104      	bne.n	80068d8 <__swbuf_r+0x64>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f7ff fd89 	bl	80063e8 <_fflush_r>
 80068d6:	b938      	cbnz	r0, 80068e8 <__swbuf_r+0x74>
 80068d8:	4638      	mov	r0, r7
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f806 	bl	80068f0 <__swsetup_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0d5      	beq.n	8006894 <__swbuf_r+0x20>
 80068e8:	f04f 37ff 	mov.w	r7, #4294967295
 80068ec:	e7f4      	b.n	80068d8 <__swbuf_r+0x64>
	...

080068f0 <__swsetup_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <__swsetup_r+0xac>)
 80068f4:	4605      	mov	r5, r0
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	460c      	mov	r4, r1
 80068fa:	b118      	cbz	r0, 8006904 <__swsetup_r+0x14>
 80068fc:	6a03      	ldr	r3, [r0, #32]
 80068fe:	b90b      	cbnz	r3, 8006904 <__swsetup_r+0x14>
 8006900:	f7fd ff84 	bl	800480c <__sinit>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690a:	0718      	lsls	r0, r3, #28
 800690c:	d422      	bmi.n	8006954 <__swsetup_r+0x64>
 800690e:	06d9      	lsls	r1, r3, #27
 8006910:	d407      	bmi.n	8006922 <__swsetup_r+0x32>
 8006912:	2309      	movs	r3, #9
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e034      	b.n	800698c <__swsetup_r+0x9c>
 8006922:	0758      	lsls	r0, r3, #29
 8006924:	d512      	bpl.n	800694c <__swsetup_r+0x5c>
 8006926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006928:	b141      	cbz	r1, 800693c <__swsetup_r+0x4c>
 800692a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800692e:	4299      	cmp	r1, r3
 8006930:	d002      	beq.n	8006938 <__swsetup_r+0x48>
 8006932:	4628      	mov	r0, r5
 8006934:	f7fe fefe 	bl	8005734 <_free_r>
 8006938:	2300      	movs	r3, #0
 800693a:	6363      	str	r3, [r4, #52]	; 0x34
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	2300      	movs	r3, #0
 8006946:	6063      	str	r3, [r4, #4]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	f043 0308 	orr.w	r3, r3, #8
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b94b      	cbnz	r3, 800696c <__swsetup_r+0x7c>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800695e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006962:	d003      	beq.n	800696c <__swsetup_r+0x7c>
 8006964:	4621      	mov	r1, r4
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f884 	bl	8006a74 <__smakebuf_r>
 800696c:	89a0      	ldrh	r0, [r4, #12]
 800696e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006972:	f010 0301 	ands.w	r3, r0, #1
 8006976:	d00a      	beq.n	800698e <__swsetup_r+0x9e>
 8006978:	2300      	movs	r3, #0
 800697a:	60a3      	str	r3, [r4, #8]
 800697c:	6963      	ldr	r3, [r4, #20]
 800697e:	425b      	negs	r3, r3
 8006980:	61a3      	str	r3, [r4, #24]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	b943      	cbnz	r3, 8006998 <__swsetup_r+0xa8>
 8006986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800698a:	d1c4      	bne.n	8006916 <__swsetup_r+0x26>
 800698c:	bd38      	pop	{r3, r4, r5, pc}
 800698e:	0781      	lsls	r1, r0, #30
 8006990:	bf58      	it	pl
 8006992:	6963      	ldrpl	r3, [r4, #20]
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	e7f4      	b.n	8006982 <__swsetup_r+0x92>
 8006998:	2000      	movs	r0, #0
 800699a:	e7f7      	b.n	800698c <__swsetup_r+0x9c>
 800699c:	200000e4 	.word	0x200000e4

080069a0 <_raise_r>:
 80069a0:	291f      	cmp	r1, #31
 80069a2:	b538      	push	{r3, r4, r5, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	d904      	bls.n	80069b4 <_raise_r+0x14>
 80069aa:	2316      	movs	r3, #22
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069b6:	b112      	cbz	r2, 80069be <_raise_r+0x1e>
 80069b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069bc:	b94b      	cbnz	r3, 80069d2 <_raise_r+0x32>
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f830 	bl	8006a24 <_getpid_r>
 80069c4:	462a      	mov	r2, r5
 80069c6:	4601      	mov	r1, r0
 80069c8:	4620      	mov	r0, r4
 80069ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ce:	f000 b817 	b.w	8006a00 <_kill_r>
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d00a      	beq.n	80069ec <_raise_r+0x4c>
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	d103      	bne.n	80069e2 <_raise_r+0x42>
 80069da:	2316      	movs	r3, #22
 80069dc:	6003      	str	r3, [r0, #0]
 80069de:	2001      	movs	r0, #1
 80069e0:	e7e7      	b.n	80069b2 <_raise_r+0x12>
 80069e2:	2400      	movs	r4, #0
 80069e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069e8:	4628      	mov	r0, r5
 80069ea:	4798      	blx	r3
 80069ec:	2000      	movs	r0, #0
 80069ee:	e7e0      	b.n	80069b2 <_raise_r+0x12>

080069f0 <raise>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <raise+0xc>)
 80069f2:	4601      	mov	r1, r0
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f7ff bfd3 	b.w	80069a0 <_raise_r>
 80069fa:	bf00      	nop
 80069fc:	200000e4 	.word	0x200000e4

08006a00 <_kill_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4d07      	ldr	r5, [pc, #28]	; (8006a20 <_kill_r+0x20>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	f7fa fc1f 	bl	8001250 <_kill>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d102      	bne.n	8006a1c <_kill_r+0x1c>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	b103      	cbz	r3, 8006a1c <_kill_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	200004a8 	.word	0x200004a8

08006a24 <_getpid_r>:
 8006a24:	f7fa bc0c 	b.w	8001240 <_getpid>

08006a28 <__swhatbuf_r>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a30:	2900      	cmp	r1, #0
 8006a32:	b096      	sub	sp, #88	; 0x58
 8006a34:	4615      	mov	r5, r2
 8006a36:	461e      	mov	r6, r3
 8006a38:	da0d      	bge.n	8006a56 <__swhatbuf_r+0x2e>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a40:	f04f 0100 	mov.w	r1, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a4a:	2340      	movne	r3, #64	; 0x40
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	6031      	str	r1, [r6, #0]
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	b016      	add	sp, #88	; 0x58
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	466a      	mov	r2, sp
 8006a58:	f000 f848 	bl	8006aec <_fstat_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dbec      	blt.n	8006a3a <__swhatbuf_r+0x12>
 8006a60:	9901      	ldr	r1, [sp, #4]
 8006a62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a6a:	4259      	negs	r1, r3
 8006a6c:	4159      	adcs	r1, r3
 8006a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a72:	e7eb      	b.n	8006a4c <__swhatbuf_r+0x24>

08006a74 <__smakebuf_r>:
 8006a74:	898b      	ldrh	r3, [r1, #12]
 8006a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a78:	079d      	lsls	r5, r3, #30
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	d507      	bpl.n	8006a90 <__smakebuf_r+0x1c>
 8006a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	ab01      	add	r3, sp, #4
 8006a92:	466a      	mov	r2, sp
 8006a94:	f7ff ffc8 	bl	8006a28 <__swhatbuf_r>
 8006a98:	9900      	ldr	r1, [sp, #0]
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7fe febd 	bl	800581c <_malloc_r>
 8006aa2:	b948      	cbnz	r0, 8006ab8 <__smakebuf_r+0x44>
 8006aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa8:	059a      	lsls	r2, r3, #22
 8006aaa:	d4ef      	bmi.n	8006a8c <__smakebuf_r+0x18>
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	f043 0302 	orr.w	r3, r3, #2
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	e7e3      	b.n	8006a80 <__smakebuf_r+0xc>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	6020      	str	r0, [r4, #0]
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	6120      	str	r0, [r4, #16]
 8006aca:	b15b      	cbz	r3, 8006ae4 <__smakebuf_r+0x70>
 8006acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 f81d 	bl	8006b10 <_isatty_r>
 8006ad6:	b128      	cbz	r0, 8006ae4 <__smakebuf_r+0x70>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	431d      	orrs	r5, r3
 8006ae8:	81a5      	strh	r5, [r4, #12]
 8006aea:	e7cf      	b.n	8006a8c <__smakebuf_r+0x18>

08006aec <_fstat_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	; (8006b0c <_fstat_r+0x20>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f7fa fc08 	bl	800130e <_fstat>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d102      	bne.n	8006b08 <_fstat_r+0x1c>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	b103      	cbz	r3, 8006b08 <_fstat_r+0x1c>
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200004a8 	.word	0x200004a8

08006b10 <_isatty_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d06      	ldr	r5, [pc, #24]	; (8006b2c <_isatty_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fa fc07 	bl	800132e <_isatty>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_isatty_r+0x1a>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_isatty_r+0x1a>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	200004a8 	.word	0x200004a8

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
